
boot.elf:     file format elf32-tradbigmips

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b5e0  bfc00000  bfc00000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .reginfo      00000018  bfc0b5e0  bfc0b5e0  0001b5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA, LINK_ONCE_SAME_SIZE
  2 .data         00009d28  bfc0b600  bfc0b600  0001b600  2**4
                  CONTENTS, ALLOC, LOAD, DATA
  3 .pdr          00000ba0  00000000  00000000  00025328  2**2
                  CONTENTS, READONLY
  4 .comment      0000002b  00000000  00000000  00025ec8  2**0
                  CONTENTS, READONLY
  5 .gnu.attributes 00000010  00000000  00000000  00025ef3  2**0
                  CONTENTS, READONLY
  6 .debug_abbrev 00000276  00000000  00000000  00025f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002809  00000000  00000000  00026179  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f65  00000000  00000000  00028982  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000081c  00000000  00000000  000298e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a3b  00000000  00000000  0002a104  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 000008c5  00000000  00000000  0002ab3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000020  00000000  00000000  0002b404  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  0002b424  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000e09  00000000  00000000  0002b43c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

bfc00000 <__start>:
bfc00000:	0b f0 00 03 00 00 00 00 00 00 00 00                 ............

bfc0000c <reset>:
bfc0000c:	0ff00180 	jal	bfc00600 <uart_show>
bfc00010:	00000000 	nop
bfc00014:	00000000 	nop
bfc00018:	240e0000 	li	t6,0
bfc0001c:	3c0fb800 	lui	t7,0xb800
bfc00020:	35ef0098 	ori	t7,t7,0x98
bfc00024:	adee0000 	sw	t6,0(t7)
	...
bfc00030:	40809000 	mtc0	zero,c0_watchlo
bfc00034:	40809800 	mtc0	zero,c0_watchhi
bfc00038:	40806800 	mtc0	zero,c0_cause
bfc0003c:	40086000 	mfc0	t0,c0_status
bfc00040:	3c01ffff 	lui	at,0xffff
bfc00044:	342100e0 	ori	at,at,0xe0
bfc00048:	01014024 	and	t0,t0,at
bfc0004c:	3c011000 	lui	at,0x1000
bfc00050:	34210400 	ori	at,at,0x400
bfc00054:	01014025 	or	t0,t0,at
bfc00058:	40886000 	mtc0	t0,c0_status
bfc0005c:	000000c0 	ehb
bfc00060:	40804800 	mtc0	zero,c0_count
bfc00064:	40805800 	mtc0	zero,c0_compare
bfc00068:	0ff00138 	jal	bfc004e0 <flush_cache_r>
bfc0006c:	00000000 	nop
bfc00070:	00000000 	nop
bfc00074:	3c088004 	lui	t0,0x8004
bfc00078:	35088485 	ori	t0,t0,0x8485
bfc0007c:	40888000 	mtc0	t0,c0_config
bfc00080:	00000000 	nop
bfc00084:	240900ff 	li	t1,255
bfc00088:	3c08bfbf 	lui	t0,0xbfbf
bfc0008c:	3508a008 	ori	t0,t0,0xa008
bfc00090:	ad090000 	sw	t1,0(t0)
bfc00094:	000000c0 	ehb
bfc00098:	00000000 	nop
bfc0009c:	3c08bfc0 	lui	t0,0xbfc0
bfc000a0:	250800bc 	addiu	t0,t0,188
bfc000a4:	3c01dfff 	lui	at,0xdfff
bfc000a8:	3421ffff 	ori	at,at,0xffff
bfc000ac:	01014024 	and	t0,t0,at
bfc000b0:	01000008 	jr	t0
bfc000b4:	00000000 	nop
bfc000b8:	00000000 	nop

bfc000bc <cache_start>:
bfc000bc:	40037801 	mfc0	v1,c0_ebase
bfc000c0:	306303ff 	andi	v1,v1,0x3ff
bfc000c4:	1060004d 	beqz	v1,bfc001fc <core1_go+0x9c>
bfc000c8:	00000000 	nop

bfc000cc <core1_sleep>:
bfc000cc:	240e3333 	li	t6,13107
bfc000d0:	3c0fb800 	lui	t7,0xb800
bfc000d4:	35ef006c 	ori	t7,t7,0x6c
bfc000d8:	adee0000 	sw	t6,0(t7)
	...
bfc000e4:	40086000 	mfc0	t0,c0_status
bfc000e8:	3c01ffff 	lui	at,0xffff
bfc000ec:	342100e0 	ori	at,at,0xe0
bfc000f0:	01014024 	and	t0,t0,at
bfc000f4:	3c011000 	lui	at,0x1000
bfc000f8:	34210400 	ori	at,at,0x400
bfc000fc:	01014025 	or	t0,t0,at
bfc00100:	40886000 	mtc0	t0,c0_status
bfc00104:	000000c0 	ehb
bfc00108:	42000020 	wait
	...

bfc00118 <core1_ready>:
bfc00118:	240e5555 	li	t6,21845
bfc0011c:	3c0fb800 	lui	t7,0xb800
bfc00120:	35ef006c 	ori	t7,t7,0x6c
bfc00124:	adee0000 	sw	t6,0(t7)
	...

bfc00130 <core1_loop>:
bfc00130:	3c0fb800 	lui	t7,0xb800
bfc00134:	35ef006c 	ori	t7,t7,0x6c
bfc00138:	8de90000 	lw	t1,0(t7)
bfc0013c:	00000000 	nop
bfc00140:	24017777 	li	at,30583
bfc00144:	11210006 	beq	t1,at,bfc00160 <core1_go>
bfc00148:	00000000 	nop
	...
bfc00154:	1000fff6 	b	bfc00130 <core1_loop>
bfc00158:	00000000 	nop
bfc0015c:	00000000 	nop

bfc00160 <core1_go>:
bfc00160:	3c0fb800 	lui	t7,0xb800
bfc00164:	35ef2014 	ori	t7,t7,0x2014
bfc00168:	8dee0000 	lw	t6,0(t7)
bfc0016c:	00000000 	nop
bfc00170:	3c016000 	lui	at,0x6000
bfc00174:	01c17024 	and	t6,t6,at
bfc00178:	11c0fff9 	beqz	t6,bfc00160 <core1_go>
bfc0017c:	00000000 	nop
bfc00180:	3c0e4700 	lui	t6,0x4700
bfc00184:	3c0fb800 	lui	t7,0xb800
bfc00188:	35ef2000 	ori	t7,t7,0x2000
bfc0018c:	adee0000 	sw	t6,0(t7)
bfc00190:	00000000 	nop
bfc00194:	3c0fb800 	lui	t7,0xb800
bfc00198:	35ef2014 	ori	t7,t7,0x2014
bfc0019c:	8dee0000 	lw	t6,0(t7)
bfc001a0:	00000000 	nop
bfc001a4:	3c016000 	lui	at,0x6000
bfc001a8:	01c17024 	and	t6,t6,at
bfc001ac:	11c0fff9 	beqz	t6,bfc00194 <core1_go+0x34>
bfc001b0:	00000000 	nop
bfc001b4:	3c0e4f00 	lui	t6,0x4f00
bfc001b8:	3c0fb800 	lui	t7,0xb800
bfc001bc:	35ef2000 	ori	t7,t7,0x2000
bfc001c0:	adee0000 	sw	t6,0(t7)
bfc001c4:	00000000 	nop
bfc001c8:	340e9999 	li	t6,0x9999
bfc001cc:	3c0fb800 	lui	t7,0xb800
bfc001d0:	35ef006c 	ori	t7,t7,0x6c
bfc001d4:	adee0000 	sw	t6,0(t7)
bfc001d8:	00000000 	nop
bfc001dc:	3c0fb800 	lui	t7,0xb800
bfc001e0:	35ef0068 	ori	t7,t7,0x68
bfc001e4:	8de90000 	lw	t1,0(t7)
bfc001e8:	00000000 	nop
bfc001ec:	01200008 	jr	t1
bfc001f0:	00000000 	nop
	...
bfc001fc:	240e0002 	li	t6,2
bfc00200:	3c0fb800 	lui	t7,0xb800
bfc00204:	35ef0004 	ori	t7,t7,0x4
bfc00208:	adee0000 	sw	t6,0(t7)
	...
bfc00214:	3c0fb800 	lui	t7,0xb800
bfc00218:	35ef000c 	ori	t7,t7,0xc
bfc0021c:	8df80000 	lw	t8,0(t7)
	...
bfc00228:	00187025 	or	t6,zero,t8
bfc0022c:	340f0000 	li	t7,0x0
bfc00230:	11cf0041 	beq	t6,t7,bfc00338 <lab_1G>
bfc00234:	00000000 	nop
	...
bfc00240:	00187025 	or	t6,zero,t8
bfc00244:	340f0002 	li	t7,0x2
bfc00248:	11cf0020 	beq	t6,t7,bfc002cc <lab_600MH>
bfc0024c:	00000000 	nop
	...
bfc00258:	00187025 	or	t6,zero,t8
bfc0025c:	340f0003 	li	t7,0x3
bfc00260:	11cf0035 	beq	t6,t7,bfc00338 <lab_1G>
bfc00264:	00000000 	nop
bfc00268:	00000000 	nop
bfc0026c:	00187025 	or	t6,zero,t8
bfc00270:	340f0080 	li	t7,0x80
bfc00274:	11cf0030 	beq	t6,t7,bfc00338 <lab_1G>
bfc00278:	00000000 	nop
	...
bfc00284:	00187025 	or	t6,zero,t8
bfc00288:	340f0083 	li	t7,0x83
bfc0028c:	11cf002a 	beq	t6,t7,bfc00338 <lab_1G>
bfc00290:	00000000 	nop
	...
bfc0029c:	00187025 	or	t6,zero,t8
bfc002a0:	340f0001 	li	t7,0x1
bfc002a4:	11cf0016 	beq	t6,t7,bfc00300 <lab_800MHZ>
bfc002a8:	00000000 	nop
	...
bfc002b4:	00187025 	or	t6,zero,t8
bfc002b8:	340f0081 	li	t7,0x81
bfc002bc:	11cf0010 	beq	t6,t7,bfc00300 <lab_800MHZ>
bfc002c0:	00000000 	nop
	...

bfc002cc <lab_600MH>:
bfc002cc:	3c0fb800 	lui	t7,0xb800
bfc002d0:	35ef0008 	ori	t7,t7,0x8
bfc002d4:	8dee0000 	lw	t6,0(t7)
bfc002d8:	2401ffff 	li	at,-1
bfc002dc:	01c17024 	and	t6,t6,at
bfc002e0:	3c010001 	lui	at,0x1
bfc002e4:	34218000 	ori	at,at,0x8000
bfc002e8:	01c17025 	or	t6,t6,at
bfc002ec:	adee0000 	sw	t6,0(t7)
	...
bfc002f8:	0bf000da 	j	bfc00368 <lab_end_cpu>
bfc002fc:	00000000 	nop

bfc00300 <lab_800MHZ>:
bfc00300:	3c0fb800 	lui	t7,0xb800
bfc00304:	35ef0008 	ori	t7,t7,0x8
bfc00308:	8dee0000 	lw	t6,0(t7)
bfc0030c:	2401ffff 	li	at,-1
bfc00310:	01c17024 	and	t6,t6,at
bfc00314:	3c010003 	lui	at,0x3
bfc00318:	34218000 	ori	at,at,0x8000
bfc0031c:	01c17025 	or	t6,t6,at
bfc00320:	adee0000 	sw	t6,0(t7)
	...
bfc00330:	0bf000da 	j	bfc00368 <lab_end_cpu>
bfc00334:	00000000 	nop

bfc00338 <lab_1G>:
bfc00338:	3c0fb800 	lui	t7,0xb800
bfc0033c:	35ef0008 	ori	t7,t7,0x8
bfc00340:	8dee0000 	lw	t6,0(t7)
bfc00344:	2401ffff 	li	at,-1
bfc00348:	01c17024 	and	t6,t6,at
bfc0034c:	3c010005 	lui	at,0x5
bfc00350:	34218000 	ori	at,at,0x8000
bfc00354:	01c17025 	or	t6,t6,at
bfc00358:	adee0000 	sw	t6,0(t7)
	...

bfc00368 <lab_end_cpu>:
bfc00368:	3c0e1bdc 	lui	t6,0x1bdc
bfc0036c:	35ce0001 	ori	t6,t6,0x1
bfc00370:	3c0fbfbf 	lui	t7,0xbfbf
bfc00374:	35ef8080 	ori	t7,t7,0x8080
bfc00378:	adee0000 	sw	t6,0(t7)
bfc0037c:	00000000 	nop
bfc00380:	240effff 	li	t6,-1
bfc00384:	3c0fbbdc 	lui	t7,0xbbdc
bfc00388:	35ef0100 	ori	t7,t7,0x100
bfc0038c:	adee0000 	sw	t6,0(t7)
bfc00390:	00000000 	nop
bfc00394:	3c0e0003 	lui	t6,0x3
bfc00398:	35ceffff 	ori	t6,t6,0xffff
bfc0039c:	3c0fbbdc 	lui	t7,0xbbdc
bfc003a0:	35ef0104 	ori	t7,t7,0x104
bfc003a4:	adee0000 	sw	t6,0(t7)
bfc003a8:	00000000 	nop
bfc003ac:	3c0e8000 	lui	t6,0x8000
bfc003b0:	3c0fbbdc 	lui	t7,0xbbdc
bfc003b4:	35ef05ac 	ori	t7,t7,0x5ac
bfc003b8:	adee0000 	sw	t6,0(t7)
bfc003bc:	00000000 	nop
bfc003c0:	240e0001 	li	t6,1
bfc003c4:	3c0fbbdc 	lui	t7,0xbbdc
bfc003c8:	35ef2560 	ori	t7,t7,0x2560
bfc003cc:	adee0000 	sw	t6,0(t7)
bfc003d0:	00000000 	nop
bfc003d4:	240e0800 	li	t6,2048
bfc003d8:	3c0fbbdc 	lui	t7,0xbbdc
bfc003dc:	35ef0384 	ori	t7,t7,0x384
bfc003e0:	adee0000 	sw	t6,0(t7)
	...
bfc00400:	42000020 	wait
	...

bfc00414 <lab_start_c>:
bfc00414:	240e0005 	li	t6,5
bfc00418:	3c0fb800 	lui	t7,0xb800
bfc0041c:	35ef1304 	ori	t7,t7,0x1304
bfc00420:	adee0000 	sw	t6,0(t7)
bfc00424:	00000000 	nop
bfc00428:	3c0e0400 	lui	t6,0x400
bfc0042c:	35ce0001 	ori	t6,t6,0x1
bfc00430:	3c0fb800 	lui	t7,0xb800
bfc00434:	35ef1300 	ori	t7,t7,0x1300
bfc00438:	adee0000 	sw	t6,0(t7)
bfc0043c:	00000000 	nop
bfc00440:	240e0005 	li	t6,5
bfc00444:	3c0fb800 	lui	t7,0xb800
bfc00448:	35ef4004 	ori	t7,t7,0x4004
bfc0044c:	adee0000 	sw	t6,0(t7)
bfc00450:	00000000 	nop
bfc00454:	3c0e0400 	lui	t6,0x400
bfc00458:	35ce0001 	ori	t6,t6,0x1
bfc0045c:	3c0fb800 	lui	t7,0xb800
bfc00460:	35ef4000 	ori	t7,t7,0x4000
bfc00464:	adee0000 	sw	t6,0(t7)
	...
bfc00474:	3c1d8400 	lui	sp,0x8400
bfc00478:	37bd0ffc 	ori	sp,sp,0xffc
bfc0047c:	00000000 	nop
bfc00480:	0ff029e6 	jal	bfc0a798 <start_c>
bfc00484:	00000000 	nop
bfc00488:	00000000 	nop

bfc0048c <flash2ram>:
	...
bfc00498:	3c1abfc1 	lui	k0,0xbfc1
bfc0049c:	275ac000 	addiu	k0,k0,-16384
bfc004a0:	3c1bbfc1 	lui	k1,0xbfc1
bfc004a4:	277b532c 	addiu	k1,k1,21292
bfc004a8:	3c09a010 	lui	t1,0xa010
bfc004ac:	0ff001b0 	jal	bfc006c0 <SPI_show>
bfc004b0:	00000000 	nop
bfc004b4:	8f480000 	lw	t0,0(k0)
bfc004b8:	00000000 	nop
bfc004bc:	ad280000 	sw	t0,0(t1)
bfc004c0:	00000000 	nop
bfc004c4:	25290004 	addiu	t1,t1,4
bfc004c8:	275a0004 	addiu	k0,k0,4
bfc004cc:	177afff7 	bne	k1,k0,bfc004ac <flash2ram+0x20>
bfc004d0:	00000000 	nop
bfc004d4:	3c1aa010 	lui	k0,0xa010
bfc004d8:	03400008 	jr	k0
bfc004dc:	00000000 	nop

bfc004e0 <flush_cache_r>:
bfc004e0:	4080e802 	mtc0	zero,c0_taghi1
bfc004e4:	00000040 	ssnop
bfc004e8:	00000040 	ssnop
bfc004ec:	00000040 	ssnop
bfc004f0:	00000040 	ssnop
bfc004f4:	4080e002 	mtc0	zero,c0_taglo1
bfc004f8:	00000040 	ssnop
bfc004fc:	00000040 	ssnop
bfc00500:	00000040 	ssnop
bfc00504:	00000040 	ssnop
bfc00508:	3c068000 	lui	a2,0x8000
bfc0050c:	24050020 	li	a1,32
bfc00510:	3c078000 	lui	a3,0x8000
bfc00514:	34e77fe0 	ori	a3,a3,0x7fe0
bfc00518:	bcc90000 	cache	0x9,0(a2)
bfc0051c:	14c7fffe 	bne	a2,a3,bfc00518 <flush_cache_r+0x38>
bfc00520:	00c53021 	addu	a2,a2,a1
bfc00524:	4080e800 	mtc0	zero,c0_taghi
bfc00528:	00000040 	ssnop
bfc0052c:	00000040 	ssnop
bfc00530:	00000040 	ssnop
bfc00534:	00000040 	ssnop
bfc00538:	4080e000 	mtc0	zero,c0_taglo
bfc0053c:	00000040 	ssnop
bfc00540:	00000040 	ssnop
bfc00544:	00000040 	ssnop
bfc00548:	00000040 	ssnop
bfc0054c:	3c068000 	lui	a2,0x8000
bfc00550:	24050020 	li	a1,32
bfc00554:	3c078000 	lui	a3,0x8000
bfc00558:	34e7ffe0 	ori	a3,a3,0xffe0
bfc0055c:	bcc80000 	cache	0x8,0(a2)
bfc00560:	14c7fffe 	bne	a2,a3,bfc0055c <flush_cache_r+0x7c>
bfc00564:	00c53021 	addu	a2,a2,a1

bfc00568 <init_L2_cache>:
bfc00568:	00000000 	nop
bfc0056c:	3c0fb800 	lui	t7,0xb800
bfc00570:	8df80000 	lw	t8,0(t7)
	...
bfc00588:	24080000 	li	t0,0
bfc0058c:	4080e004 	mtc0	zero,c0_taglo2
bfc00590:	00000040 	ssnop
bfc00594:	00000040 	ssnop
bfc00598:	00000040 	ssnop
bfc0059c:	00000040 	ssnop
	...
bfc005a8:	3c068000 	lui	a2,0x8000
bfc005ac:	24050020 	li	a1,32
bfc005b0:	3c078007 	lui	a3,0x8007
bfc005b4:	34e7ffe0 	ori	a3,a3,0xffe0
bfc005b8:	bccb0000 	cache	0xb,0(a2)
bfc005bc:	14c7fffe 	bne	a2,a3,bfc005b8 <init_L2_cache+0x50>
bfc005c0:	00c53021 	addu	a2,a2,a1
	...
bfc005cc:	0bf0017c 	j	bfc005f0 <SC_EXIT>

bfc005d0 <lab_disSC>:
bfc005d0:	24081000 	li	t0,4096
bfc005d4:	40888002 	mtc0	t0,c0_config2
bfc005d8:	00000040 	ssnop
bfc005dc:	00000040 	ssnop
bfc005e0:	00000040 	ssnop
bfc005e4:	00000040 	ssnop
	...

bfc005f0 <SC_EXIT>:
bfc005f0:	00000000 	nop
bfc005f4:	03e00008 	jr	ra
bfc005f8:	00000000 	nop
bfc005fc:	00000000 	nop

bfc00600 <uart_show>:
bfc00600:	3c0e0300 	lui	t6,0x300
bfc00604:	3c0fb800 	lui	t7,0xb800
bfc00608:	35ef200c 	ori	t7,t7,0x200c
bfc0060c:	adee0000 	sw	t6,0(t7)
bfc00610:	00000000 	nop
bfc00614:	3c0ec700 	lui	t6,0xc700
bfc00618:	3c0fb800 	lui	t7,0xb800
bfc0061c:	35ef2008 	ori	t7,t7,0x2008
bfc00620:	adee0000 	sw	t6,0(t7)
bfc00624:	00000000 	nop
bfc00628:	240e0000 	li	t6,0
bfc0062c:	3c0fb800 	lui	t7,0xb800
bfc00630:	35ef2004 	ori	t7,t7,0x2004
bfc00634:	adee0000 	sw	t6,0(t7)
bfc00638:	00000000 	nop
bfc0063c:	3c0e8300 	lui	t6,0x8300
bfc00640:	3c0fb800 	lui	t7,0xb800
bfc00644:	35ef200c 	ori	t7,t7,0x200c
bfc00648:	adee0000 	sw	t6,0(t7)
bfc0064c:	00000000 	nop
bfc00650:	3c0e4400 	lui	t6,0x4400
bfc00654:	3c0fb800 	lui	t7,0xb800
bfc00658:	35ef2000 	ori	t7,t7,0x2000
bfc0065c:	adee0000 	sw	t6,0(t7)
bfc00660:	00000000 	nop
bfc00664:	3c0e0100 	lui	t6,0x100
bfc00668:	3c0fb800 	lui	t7,0xb800
bfc0066c:	35ef2004 	ori	t7,t7,0x2004
bfc00670:	adee0000 	sw	t6,0(t7)
bfc00674:	00000000 	nop
bfc00678:	3c0e0300 	lui	t6,0x300
bfc0067c:	3c0fb800 	lui	t7,0xb800
bfc00680:	35ef200c 	ori	t7,t7,0x200c
bfc00684:	adee0000 	sw	t6,0(t7)
bfc00688:	00000000 	nop
bfc0068c:	3c0dbfc0 	lui	t5,0xbfc0
bfc00690:	25ad0754 	addiu	t5,t5,1876
bfc00694:	91ae0000 	lbu	t6,0(t5)
bfc00698:	11c00007 	beqz	t6,bfc006b8 <uart_show+0xb8>
bfc0069c:	25ad0001 	addiu	t5,t5,1
bfc006a0:	000e7600 	sll	t6,t6,0x18
bfc006a4:	3c0fb800 	lui	t7,0xb800
bfc006a8:	35ef2000 	ori	t7,t7,0x2000
bfc006ac:	adee0000 	sw	t6,0(t7)
bfc006b0:	0bf001a5 	j	bfc00694 <uart_show+0x94>
bfc006b4:	00000000 	nop
bfc006b8:	03e00008 	jr	ra
bfc006bc:	00000000 	nop

bfc006c0 <SPI_show>:
bfc006c0:	3c0e0300 	lui	t6,0x300
bfc006c4:	3c0fb800 	lui	t7,0xb800
bfc006c8:	35ef200c 	ori	t7,t7,0x200c
bfc006cc:	adee0000 	sw	t6,0(t7)
bfc006d0:	00000000 	nop
bfc006d4:	3c0ec700 	lui	t6,0xc700
bfc006d8:	3c0fb800 	lui	t7,0xb800
bfc006dc:	35ef2008 	ori	t7,t7,0x2008
bfc006e0:	adee0000 	sw	t6,0(t7)
bfc006e4:	00000000 	nop
bfc006e8:	240e0000 	li	t6,0
bfc006ec:	3c0fb800 	lui	t7,0xb800
bfc006f0:	35ef2004 	ori	t7,t7,0x2004
bfc006f4:	adee0000 	sw	t6,0(t7)
bfc006f8:	00000000 	nop
bfc006fc:	3c0e8300 	lui	t6,0x8300
bfc00700:	3c0fb800 	lui	t7,0xb800
bfc00704:	35ef200c 	ori	t7,t7,0x200c
bfc00708:	adee0000 	sw	t6,0(t7)
bfc0070c:	00000000 	nop
bfc00710:	3c0e4400 	lui	t6,0x4400
bfc00714:	3c0fb800 	lui	t7,0xb800
bfc00718:	35ef2000 	ori	t7,t7,0x2000
bfc0071c:	adee0000 	sw	t6,0(t7)
bfc00720:	00000000 	nop
bfc00724:	3c0e0100 	lui	t6,0x100
bfc00728:	3c0fb800 	lui	t7,0xb800
bfc0072c:	35ef2004 	ori	t7,t7,0x2004
bfc00730:	adee0000 	sw	t6,0(t7)
bfc00734:	00000000 	nop
bfc00738:	3c0e0300 	lui	t6,0x300
bfc0073c:	3c0fb800 	lui	t7,0xb800
bfc00740:	35ef200c 	ori	t7,t7,0x200c
bfc00744:	adee0000 	sw	t6,0(t7)
bfc00748:	00000000 	nop
bfc0074c:	03e00008 	jr	ra
bfc00750:	00000000 	nop

bfc00754 <boot_msg>:
bfc00754:	0d0a426f 	jal	b42909bc <dl+0xb4290878>
bfc00758:	6f74696e 	0x6f74696e
bfc0075c:	672e2e2e 	0x672e2e2e
bfc00760:	0d0a000d 	jal	b4280034 <dl+0xb427fef0>

bfc00763 <SPI_done_msg>:
bfc00763:	0d0a      	la	a1,bfc00788 <SPI_done_msg+0x25>
bfc00765:	5350      	slti	v1,80
bfc00767:	4920      	addiu	s1,32
bfc00769:	696d      	li	s1,109
bfc0076b:	6167      	btnez	bfc0083b <uart_inc+0x3f>
bfc0076d:	6520      	move	at,s0
bfc0076f:	6d6f      	li	a1,111
bfc00771:	7665      	cmpi	a2,101
bfc00773:	2064      	beqz	s0,bfc0083d <uart_inc+0x41>
bfc00775:	6f6e      	li	a3,110
bfc00777:	6520      	move	at,s0
bfc00779:	2d3e      	bnez	a1,bfc007f7 <uart_outc+0x67>
bfc0077b:	4a75      	addiu	v0,117
bfc0077d:	6d70      	li	a1,112
bfc0077f:	2074      	beqz	s0,bfc00869 <kbhit+0x19>
bfc00781:	6f20      	li	a3,32
bfc00783:	4452      	0x4452
bfc00785:	414d      	addiu	v0,s1,-3
bfc00787:	0d0a      	la	a1,bfc007ac <uart_outc+0x1c>
	...

bfc0078a <SPI_msg>:
bfc0078a:	0d0a2e00 	jal	b428b800 <dl+0xb428b6bc>
bfc0078e:	00000080 	sll	zero,zero,0x2

bfc00790 <uart_outc>:
	*((volatile unsigned long *)_WDTCNR_) |= _WDTKICK_;
}
//---------------------------------------------------
#if DBG
void uart_outc(char c)
{
bfc00790:	00801021 	move	v0,a0
bfc00794:	a3a20000 	sb	v0,0(sp)
bfc00798:	0bf001e9 	j	bfc007a4 <uart_outc+0x14>
bfc0079c:	00000000 	nop
		if (i >=3210)
			break;
#endif	
		if 	(REG32(UART_LSR) & 0x60000000)
			break;	
	}
bfc007a0:	00000000 	nop
#if UART_WAIT_BREAK	
		i++;		
		if (i >=3210)
			break;
#endif	
		if 	(REG32(UART_LSR) & 0x60000000)
bfc007a4:	3c02b800 	lui	v0,0xb800
bfc007a8:	34422014 	ori	v0,v0,0x2014
bfc007ac:	8c430000 	lw	v1,0(v0)
bfc007b0:	3c026000 	lui	v0,0x6000
bfc007b4:	00621024 	and	v0,v1,v0
bfc007b8:	1040fff9 	beqz	v0,bfc007a0 <uart_outc+0x10>
bfc007bc:	00000000 	nop
			break;	
	}

	//for(i=0; i<0xff00;i++);
 	REG32(UART_THR)= (unsigned int)(c)<<24;  
bfc007c0:	3c02b800 	lui	v0,0xb800
bfc007c4:	34422000 	ori	v0,v0,0x2000
bfc007c8:	83a30000 	lb	v1,0(sp)
bfc007cc:	00031e00 	sll	v1,v1,0x18
bfc007d0:	ac430000 	sw	v1,0(v0)

	if (c == 0x0a)
bfc007d4:	83a30000 	lb	v1,0(sp)
bfc007d8:	2402000a 	li	v0,10
bfc007dc:	14620005 	bne	v1,v0,bfc007f4 <uart_outc+0x64>
bfc007e0:	00000000 	nop
		REG32(UART_THR)= (unsigned int)(0x0d)<<24;  
bfc007e4:	3c02b800 	lui	v0,0xb800
bfc007e8:	34422000 	ori	v0,v0,0x2000
bfc007ec:	3c030d00 	lui	v1,0xd00
bfc007f0:	ac430000 	sw	v1,0(v0)
}
bfc007f4:	03e00008 	jr	ra
bfc007f8:	00000000 	nop

bfc007fc <uart_inc>:
#endif
//-----------------------------------------------------
inline unsigned char uart_inc(void)
{
bfc007fc:	27bdfff8 	addiu	sp,sp,-8
bfc00800:	afb00004 	sw	s0,4(sp)
bfc00804:	0bf00204 	j	bfc00810 <uart_inc+0x14>
bfc00808:	00000000 	nop
#if UART_WAIT_BREAK	
		i++;		
		if (i >=6540)
			break;
#endif			
	}	
bfc0080c:	00000000 	nop
#endif
	unsigned register  ch;

    while (1)
	{
		if 	(REG32(UART_LSR) & (1<<24) )
bfc00810:	3c02b800 	lui	v0,0xb800
bfc00814:	34422014 	ori	v0,v0,0x2014
bfc00818:	8c430000 	lw	v1,0(v0)
bfc0081c:	3c020100 	lui	v0,0x100
bfc00820:	00621024 	and	v0,v1,v0
bfc00824:	1040fff9 	beqz	v0,bfc0080c <uart_inc+0x10>
bfc00828:	00000000 	nop
		i++;		
		if (i >=6540)
			break;
#endif			
	}	
	ch=REG32(UART_RBR);
bfc0082c:	3c02b800 	lui	v0,0xb800
bfc00830:	34422000 	ori	v0,v0,0x2000
bfc00834:	8c500000 	lw	s0,0(v0)
	ch=ch>>24;
bfc00838:	00108602 	srl	s0,s0,0x18
	return ch;
bfc0083c:	320200ff 	andi	v0,s0,0xff
}
bfc00840:	8fb00004 	lw	s0,4(sp)
bfc00844:	27bd0008 	addiu	sp,sp,8
bfc00848:	03e00008 	jr	ra
bfc0084c:	00000000 	nop

bfc00850 <kbhit>:
//-----------------------------------------------------
unsigned int kbhit(unsigned int loops)
{	unsigned int i=loops;
bfc00850:	27bdfff8 	addiu	sp,sp,-8
bfc00854:	afa40008 	sw	a0,8(sp)
bfc00858:	8fa20008 	lw	v0,8(sp)
bfc0085c:	afa20000 	sw	v0,0(sp)
	while(loops--)
bfc00860:	0bf00224 	j	bfc00890 <kbhit+0x40>
bfc00864:	00000000 	nop
	{
		if(REG32(UART_LSR) & (1<<24) )
bfc00868:	3c02b800 	lui	v0,0xb800
bfc0086c:	34422014 	ori	v0,v0,0x2014
bfc00870:	8c430000 	lw	v1,0(v0)
bfc00874:	3c020100 	lui	v0,0x100
bfc00878:	00621024 	and	v0,v1,v0
bfc0087c:	10400004 	beqz	v0,bfc00890 <kbhit+0x40>
bfc00880:	00000000 	nop
			return 1;
bfc00884:	24020001 	li	v0,1
bfc00888:	0bf0022d 	j	bfc008b4 <kbhit+0x64>
bfc0088c:	00000000 	nop
	return ch;
}
//-----------------------------------------------------
unsigned int kbhit(unsigned int loops)
{	unsigned int i=loops;
	while(loops--)
bfc00890:	8fa20008 	lw	v0,8(sp)
bfc00894:	0002102b 	sltu	v0,zero,v0
bfc00898:	304200ff 	andi	v0,v0,0xff
bfc0089c:	8fa30008 	lw	v1,8(sp)
bfc008a0:	2463ffff 	addiu	v1,v1,-1
bfc008a4:	afa30008 	sw	v1,8(sp)
bfc008a8:	1440ffef 	bnez	v0,bfc00868 <kbhit+0x18>
bfc008ac:	00000000 	nop
	{
		if(REG32(UART_LSR) & (1<<24) )
			return 1;
	}
	return 0;
bfc008b0:	00001021 	move	v0,zero
}
bfc008b4:	27bd0008 	addiu	sp,sp,8
bfc008b8:	03e00008 	jr	ra
bfc008bc:	00000000 	nop

bfc008c0 <Check_UartRxDataRdy>:
inline volatile unsigned int Check_UartRxDataRdy()
{
//	#define IO_BASE         0xB8002000
//	#define	UART_LSR	(0x14+IO_BASE)

	if 	(REG32(UART_LSR) & (1<<24) )
bfc008c0:	3c02b800 	lui	v0,0xb800
bfc008c4:	34422014 	ori	v0,v0,0x2014
bfc008c8:	8c430000 	lw	v1,0(v0)
bfc008cc:	3c020100 	lui	v0,0x100
bfc008d0:	00621024 	and	v0,v1,v0
bfc008d4:	10400004 	beqz	v0,bfc008e8 <Check_UartRxDataRdy+0x28>
bfc008d8:	00000000 	nop
		return 1;
bfc008dc:	24020001 	li	v0,1
bfc008e0:	0bf0023b 	j	bfc008ec <Check_UartRxDataRdy+0x2c>
bfc008e4:	00000000 	nop
	else
		return 0;
bfc008e8:	00001021 	move	v0,zero
}
bfc008ec:	03e00008 	jr	ra
bfc008f0:	00000000 	nop

bfc008f4 <Get_UartData>:
inline volatile unsigned int Get_UartData()
{
//	#define IO_BASE         0xB8002100
//	#define UART_RBR	(0x00+IO_BASE)
	
	return REG32(UART_RBR)>>24;
bfc008f4:	3c02b800 	lui	v0,0xb800
bfc008f8:	34422000 	ori	v0,v0,0x2000
bfc008fc:	8c420000 	lw	v0,0(v0)
bfc00900:	00021602 	srl	v0,v0,0x18
}
bfc00904:	03e00008 	jr	ra
bfc00908:	00000000 	nop

bfc0090c <Get_UartData_timeout>:

inline volatile int Get_UartData_timeout(unsigned char *c, unsigned int  timeout)
{	
bfc0090c:	27bdffe0 	addiu	sp,sp,-32
bfc00910:	afbf001c 	sw	ra,28(sp)
bfc00914:	afa40020 	sw	a0,32(sp)
bfc00918:	afa50024 	sw	a1,36(sp)
	unsigned int t=timeout;
bfc0091c:	8fa20024 	lw	v0,36(sp)
bfc00920:	afa20010 	sw	v0,16(sp)

	while(t--)
bfc00924:	0bf00257 	j	bfc0095c <Get_UartData_timeout+0x50>
bfc00928:	00000000 	nop
	{
		if(Check_UartRxDataRdy())
bfc0092c:	0ff00230 	jal	bfc008c0 <Check_UartRxDataRdy>
bfc00930:	00000000 	nop
bfc00934:	10400009 	beqz	v0,bfc0095c <Get_UartData_timeout+0x50>
bfc00938:	00000000 	nop
		{	*c=Get_UartData();
bfc0093c:	0ff0023d 	jal	bfc008f4 <Get_UartData>
bfc00940:	00000000 	nop
bfc00944:	304300ff 	andi	v1,v0,0xff
bfc00948:	8fa20020 	lw	v0,32(sp)
bfc0094c:	a0430000 	sb	v1,0(v0)
			return 1;
bfc00950:	24020001 	li	v0,1
bfc00954:	0bf00260 	j	bfc00980 <Get_UartData_timeout+0x74>
bfc00958:	00000000 	nop

inline volatile int Get_UartData_timeout(unsigned char *c, unsigned int  timeout)
{	
	unsigned int t=timeout;

	while(t--)
bfc0095c:	8fa20010 	lw	v0,16(sp)
bfc00960:	0002102b 	sltu	v0,zero,v0
bfc00964:	304200ff 	andi	v0,v0,0xff
bfc00968:	8fa30010 	lw	v1,16(sp)
bfc0096c:	2463ffff 	addiu	v1,v1,-1
bfc00970:	afa30010 	sw	v1,16(sp)
bfc00974:	1440ffed 	bnez	v0,bfc0092c <Get_UartData_timeout+0x20>
bfc00978:	00000000 	nop
		{	*c=Get_UartData();
			return 1;
		}

	}
	return 0;
bfc0097c:	00001021 	move	v0,zero
}
bfc00980:	8fbf001c 	lw	ra,28(sp)
bfc00984:	27bd0020 	addiu	sp,sp,32
bfc00988:	03e00008 	jr	ra
bfc0098c:	00000000 	nop

bfc00990 <vsprintf>:
int vsprintf(char *buf, const char *fmt, const int *dp)
{
	#define putchar uart_outc
	char *p, *s;

	s = buf;
bfc00990:	27bdffa0 	addiu	sp,sp,-96
bfc00994:	afbf005c 	sw	ra,92(sp)
bfc00998:	afa40060 	sw	a0,96(sp)
bfc0099c:	afa50064 	sw	a1,100(sp)
bfc009a0:	afa60068 	sw	a2,104(sp)
bfc009a4:	8fa20060 	lw	v0,96(sp)
bfc009a8:	afa20038 	sw	v0,56(sp)
	for ( ; *fmt != '\0'; ++fmt) 
bfc009ac:	0bf0039c 	j	bfc00e70 <vsprintf+0x4e0>
bfc009b0:	00000000 	nop
	{
		if (*fmt != '%') 
bfc009b4:	8fa20064 	lw	v0,100(sp)
bfc009b8:	80430000 	lb	v1,0(v0)
bfc009bc:	24020025 	li	v0,37
bfc009c0:	10620014 	beq	v1,v0,bfc00a14 <vsprintf+0x84>
bfc009c4:	00000000 	nop
		{
			buf ? *s++ = *fmt : putchar(*fmt);
bfc009c8:	8fa20060 	lw	v0,96(sp)
bfc009cc:	1040000a 	beqz	v0,bfc009f8 <vsprintf+0x68>
bfc009d0:	00000000 	nop
bfc009d4:	8fa20064 	lw	v0,100(sp)
bfc009d8:	80430000 	lb	v1,0(v0)
bfc009dc:	8fa20038 	lw	v0,56(sp)
bfc009e0:	a0430000 	sb	v1,0(v0)
bfc009e4:	8fa20038 	lw	v0,56(sp)
bfc009e8:	24420001 	addiu	v0,v0,1
bfc009ec:	afa20038 	sw	v0,56(sp)
			continue;
bfc009f0:	0bf00399 	j	bfc00e64 <vsprintf+0x4d4>
bfc009f4:	00000000 	nop
	s = buf;
	for ( ; *fmt != '\0'; ++fmt) 
	{
		if (*fmt != '%') 
		{
			buf ? *s++ = *fmt : putchar(*fmt);
bfc009f8:	8fa20064 	lw	v0,100(sp)
bfc009fc:	80420000 	lb	v0,0(v0)
bfc00a00:	00402021 	move	a0,v0
bfc00a04:	0ff001e4 	jal	bfc00790 <uart_outc>
bfc00a08:	00000000 	nop
			continue;
bfc00a0c:	0bf00399 	j	bfc00e64 <vsprintf+0x4d4>
bfc00a10:	00000000 	nop
		}
		if (*++fmt == 's') 
bfc00a14:	8fa20064 	lw	v0,100(sp)
bfc00a18:	24420001 	addiu	v0,v0,1
bfc00a1c:	afa20064 	sw	v0,100(sp)
bfc00a20:	8fa20064 	lw	v0,100(sp)
bfc00a24:	80430000 	lb	v1,0(v0)
bfc00a28:	24020073 	li	v0,115
bfc00a2c:	14620023 	bne	v1,v0,bfc00abc <vsprintf+0x12c>
bfc00a30:	00000000 	nop
		{
			for (p = (char *)*dp++; *p != '\0'; p++)
bfc00a34:	8fa20068 	lw	v0,104(sp)
bfc00a38:	8c420000 	lw	v0,0(v0)
bfc00a3c:	afa2003c 	sw	v0,60(sp)
bfc00a40:	8fa20068 	lw	v0,104(sp)
bfc00a44:	24420004 	addiu	v0,v0,4
bfc00a48:	afa20068 	sw	v0,104(sp)
bfc00a4c:	0bf002a9 	j	bfc00aa4 <vsprintf+0x114>
bfc00a50:	00000000 	nop
				buf ? *s++ = *p : putchar(*p);
bfc00a54:	8fa20060 	lw	v0,96(sp)
bfc00a58:	1040000a 	beqz	v0,bfc00a84 <vsprintf+0xf4>
bfc00a5c:	00000000 	nop
bfc00a60:	8fa2003c 	lw	v0,60(sp)
bfc00a64:	80430000 	lb	v1,0(v0)
bfc00a68:	8fa20038 	lw	v0,56(sp)
bfc00a6c:	a0430000 	sb	v1,0(v0)
bfc00a70:	8fa20038 	lw	v0,56(sp)
bfc00a74:	24420001 	addiu	v0,v0,1
bfc00a78:	afa20038 	sw	v0,56(sp)
bfc00a7c:	0bf002a6 	j	bfc00a98 <vsprintf+0x108>
bfc00a80:	00000000 	nop
bfc00a84:	8fa2003c 	lw	v0,60(sp)
bfc00a88:	80420000 	lb	v0,0(v0)
bfc00a8c:	00402021 	move	a0,v0
bfc00a90:	0ff001e4 	jal	bfc00790 <uart_outc>
bfc00a94:	00000000 	nop
			buf ? *s++ = *fmt : putchar(*fmt);
			continue;
		}
		if (*++fmt == 's') 
		{
			for (p = (char *)*dp++; *p != '\0'; p++)
bfc00a98:	8fa2003c 	lw	v0,60(sp)
bfc00a9c:	24420001 	addiu	v0,v0,1
bfc00aa0:	afa2003c 	sw	v0,60(sp)
bfc00aa4:	8fa2003c 	lw	v0,60(sp)
bfc00aa8:	80420000 	lb	v0,0(v0)
bfc00aac:	1440ffe9 	bnez	v0,bfc00a54 <vsprintf+0xc4>
bfc00ab0:	00000000 	nop
bfc00ab4:	0bf00399 	j	bfc00e64 <vsprintf+0x4d4>
bfc00ab8:	00000000 	nop
				buf ? *s++ = *p : putchar(*p);
		}
		else 
		{	/* Length of item is bounded */
			char tmp[20], *q = tmp;
bfc00abc:	27a20040 	addiu	v0,sp,64
bfc00ac0:	afa20034 	sw	v0,52(sp)
			int alt = 0;
bfc00ac4:	afa00030 	sw	zero,48(sp)
			int shift = 28;
bfc00ac8:	2402001c 	li	v0,28
bfc00acc:	afa2002c 	sw	v0,44(sp)

#if 1   //wei patch for %02x
			if ((*fmt  >= '0') && (*fmt  <= '9'))
bfc00ad0:	8fa20064 	lw	v0,100(sp)
bfc00ad4:	80420000 	lb	v0,0(v0)
bfc00ad8:	28420030 	slti	v0,v0,48
bfc00adc:	14400026 	bnez	v0,bfc00b78 <vsprintf+0x1e8>
bfc00ae0:	00000000 	nop
bfc00ae4:	8fa20064 	lw	v0,100(sp)
bfc00ae8:	80420000 	lb	v0,0(v0)
bfc00aec:	2842003a 	slti	v0,v0,58
bfc00af0:	10400021 	beqz	v0,bfc00b78 <vsprintf+0x1e8>
bfc00af4:	00000000 	nop
			{
				int width;
				unsigned char fch = *fmt;
bfc00af8:	8fa20064 	lw	v0,100(sp)
bfc00afc:	80420000 	lb	v0,0(v0)
bfc00b00:	a3a20024 	sb	v0,36(sp)
		                for (width=0; (fch>='0') && (fch<='9'); fch=*++fmt)
bfc00b04:	afa00028 	sw	zero,40(sp)
bfc00b08:	0bf002d2 	j	bfc00b48 <vsprintf+0x1b8>
bfc00b0c:	00000000 	nop
		                {    width = width * 10 + fch - '0';
bfc00b10:	8fa20028 	lw	v0,40(sp)
bfc00b14:	00021040 	sll	v0,v0,0x1
bfc00b18:	00021880 	sll	v1,v0,0x2
bfc00b1c:	00431821 	addu	v1,v0,v1
bfc00b20:	93a20024 	lbu	v0,36(sp)
bfc00b24:	00621021 	addu	v0,v1,v0
bfc00b28:	2442ffd0 	addiu	v0,v0,-48
bfc00b2c:	afa20028 	sw	v0,40(sp)
#if 1   //wei patch for %02x
			if ((*fmt  >= '0') && (*fmt  <= '9'))
			{
				int width;
				unsigned char fch = *fmt;
		                for (width=0; (fch>='0') && (fch<='9'); fch=*++fmt)
bfc00b30:	8fa20064 	lw	v0,100(sp)
bfc00b34:	24420001 	addiu	v0,v0,1
bfc00b38:	afa20064 	sw	v0,100(sp)
bfc00b3c:	8fa20064 	lw	v0,100(sp)
bfc00b40:	80420000 	lb	v0,0(v0)
bfc00b44:	a3a20024 	sb	v0,36(sp)
bfc00b48:	93a20024 	lbu	v0,36(sp)
bfc00b4c:	2c420030 	sltiu	v0,v0,48
bfc00b50:	14400005 	bnez	v0,bfc00b68 <vsprintf+0x1d8>
bfc00b54:	00000000 	nop
bfc00b58:	93a20024 	lbu	v0,36(sp)
bfc00b5c:	2c42003a 	sltiu	v0,v0,58
bfc00b60:	1440ffeb 	bnez	v0,bfc00b10 <vsprintf+0x180>
bfc00b64:	00000000 	nop
		                {    width = width * 10 + fch - '0';
		                }
				  shift=(width-1)*4;
bfc00b68:	8fa20028 	lw	v0,40(sp)
bfc00b6c:	2442ffff 	addiu	v0,v0,-1
bfc00b70:	00021080 	sll	v0,v0,0x2
bfc00b74:	afa2002c 	sw	v0,44(sp)
			}
#endif
		
			if (*fmt  == 'x') 
bfc00b78:	8fa20064 	lw	v0,100(sp)
bfc00b7c:	80430000 	lb	v1,0(v0)
bfc00b80:	24020078 	li	v0,120
bfc00b84:	1462002b 	bne	v1,v0,bfc00c34 <vsprintf+0x2a4>
bfc00b88:	00000000 	nop
			{
				/* With x86 gcc, sizeof(long) == sizeof(int) */
				const long *lp = (const long *)dp;
bfc00b8c:	8fa20068 	lw	v0,104(sp)
bfc00b90:	afa20020 	sw	v0,32(sp)
				long h = *lp++;
bfc00b94:	8fa20020 	lw	v0,32(sp)
bfc00b98:	8c420000 	lw	v0,0(v0)
bfc00b9c:	afa2001c 	sw	v0,28(sp)
bfc00ba0:	8fa20020 	lw	v0,32(sp)
bfc00ba4:	24420004 	addiu	v0,v0,4
bfc00ba8:	afa20020 	sw	v0,32(sp)
				int ncase = (*fmt & 0x20);
bfc00bac:	8fa20064 	lw	v0,100(sp)
bfc00bb0:	80420000 	lb	v0,0(v0)
bfc00bb4:	304200ff 	andi	v0,v0,0xff
bfc00bb8:	30420020 	andi	v0,v0,0x20
bfc00bbc:	afa20018 	sw	v0,24(sp)
				dp = (const int *)lp;
bfc00bc0:	8fa20020 	lw	v0,32(sp)
bfc00bc4:	afa20068 	sw	v0,104(sp)
				{
					*q++ = '0';
					*q++ = 'x' | ncase;
				}
#endif				
				for ( ; shift >= 0; shift -= 4)					
bfc00bc8:	0bf00308 	j	bfc00c20 <vsprintf+0x290>
bfc00bcc:	00000000 	nop
					*q++ = "0123456789ABCDEF"[(h >> shift) & 0xF] | ncase;
bfc00bd0:	8fa3001c 	lw	v1,28(sp)
bfc00bd4:	8fa2002c 	lw	v0,44(sp)
bfc00bd8:	00431007 	srav	v0,v1,v0
bfc00bdc:	3043000f 	andi	v1,v0,0xf
bfc00be0:	3c02bfc1 	lui	v0,0xbfc1
bfc00be4:	2442ad40 	addiu	v0,v0,-21184
bfc00be8:	00621021 	addu	v0,v1,v0
bfc00bec:	80430000 	lb	v1,0(v0)
bfc00bf0:	8fa20018 	lw	v0,24(sp)
bfc00bf4:	7c021420 	seb	v0,v0
bfc00bf8:	00621025 	or	v0,v1,v0
bfc00bfc:	7c021c20 	seb	v1,v0
bfc00c00:	8fa20034 	lw	v0,52(sp)
bfc00c04:	a0430000 	sb	v1,0(v0)
bfc00c08:	8fa20034 	lw	v0,52(sp)
bfc00c0c:	24420001 	addiu	v0,v0,1
bfc00c10:	afa20034 	sw	v0,52(sp)
				{
					*q++ = '0';
					*q++ = 'x' | ncase;
				}
#endif				
				for ( ; shift >= 0; shift -= 4)					
bfc00c14:	8fa2002c 	lw	v0,44(sp)
bfc00c18:	2442fffc 	addiu	v0,v0,-4
bfc00c1c:	afa2002c 	sw	v0,44(sp)
bfc00c20:	8fa2002c 	lw	v0,44(sp)
bfc00c24:	0441ffea 	bgez	v0,bfc00bd0 <vsprintf+0x240>
bfc00c28:	00000000 	nop
bfc00c2c:	0bf0037c 	j	bfc00df0 <vsprintf+0x460>
bfc00c30:	00000000 	nop
					*q++ = "0123456789ABCDEF"[(h >> shift) & 0xF] | ncase;
				
			}
			else if (*fmt == 'd') 
bfc00c34:	8fa20064 	lw	v0,100(sp)
bfc00c38:	80430000 	lb	v1,0(v0)
bfc00c3c:	24020064 	li	v0,100
bfc00c40:	14620052 	bne	v1,v0,bfc00d8c <vsprintf+0x3fc>
bfc00c44:	00000000 	nop
			{
				int i = *dp++;
bfc00c48:	8fa20068 	lw	v0,104(sp)
bfc00c4c:	8c420000 	lw	v0,0(v0)
bfc00c50:	afa20014 	sw	v0,20(sp)
bfc00c54:	8fa20068 	lw	v0,104(sp)
bfc00c58:	24420004 	addiu	v0,v0,4
bfc00c5c:	afa20068 	sw	v0,104(sp)
				char *r;
				if (i < 0) 
bfc00c60:	8fa20014 	lw	v0,20(sp)
bfc00c64:	0441000a 	bgez	v0,bfc00c90 <vsprintf+0x300>
bfc00c68:	00000000 	nop
				{
					*q++ = '-';
bfc00c6c:	8fa20034 	lw	v0,52(sp)
bfc00c70:	2403002d 	li	v1,45
bfc00c74:	a0430000 	sb	v1,0(v0)
bfc00c78:	8fa20034 	lw	v0,52(sp)
bfc00c7c:	24420001 	addiu	v0,v0,1
bfc00c80:	afa20034 	sw	v0,52(sp)
					i = -i;
bfc00c84:	8fa20014 	lw	v0,20(sp)
bfc00c88:	00021023 	negu	v0,v0
bfc00c8c:	afa20014 	sw	v0,20(sp)
				}
				p = q;		/* save beginning of digits */
bfc00c90:	8fa20034 	lw	v0,52(sp)
bfc00c94:	afa2003c 	sw	v0,60(sp)
				do 
				{
					*q++ = '0' + (i % 10);
bfc00c98:	8fa30014 	lw	v1,20(sp)
bfc00c9c:	3c026666 	lui	v0,0x6666
bfc00ca0:	34426667 	ori	v0,v0,0x6667
bfc00ca4:	00620018 	mult	v1,v0
bfc00ca8:	00001010 	mfhi	v0
bfc00cac:	00022083 	sra	a0,v0,0x2
bfc00cb0:	000317c3 	sra	v0,v1,0x1f
bfc00cb4:	00821023 	subu	v0,a0,v0
bfc00cb8:	00021040 	sll	v0,v0,0x1
bfc00cbc:	00022080 	sll	a0,v0,0x2
bfc00cc0:	00441021 	addu	v0,v0,a0
bfc00cc4:	00621023 	subu	v0,v1,v0
bfc00cc8:	304200ff 	andi	v0,v0,0xff
bfc00ccc:	24420030 	addiu	v0,v0,48
bfc00cd0:	304200ff 	andi	v0,v0,0xff
bfc00cd4:	7c021c20 	seb	v1,v0
bfc00cd8:	8fa20034 	lw	v0,52(sp)
bfc00cdc:	a0430000 	sb	v1,0(v0)
bfc00ce0:	8fa20034 	lw	v0,52(sp)
bfc00ce4:	24420001 	addiu	v0,v0,1
bfc00ce8:	afa20034 	sw	v0,52(sp)
					i /= 10;
bfc00cec:	8fa20014 	lw	v0,20(sp)
bfc00cf0:	3c036666 	lui	v1,0x6666
bfc00cf4:	34636667 	ori	v1,v1,0x6667
bfc00cf8:	00430018 	mult	v0,v1
bfc00cfc:	00001810 	mfhi	v1
bfc00d00:	00031883 	sra	v1,v1,0x2
bfc00d04:	000217c3 	sra	v0,v0,0x1f
bfc00d08:	00621023 	subu	v0,v1,v0
bfc00d0c:	afa20014 	sw	v0,20(sp)
				} while (i);
bfc00d10:	8fa20014 	lw	v0,20(sp)
bfc00d14:	1440ffe0 	bnez	v0,bfc00c98 <vsprintf+0x308>
bfc00d18:	00000000 	nop
				/* reverse digits, stop in middle */
				r = q;		/* don't alter q */
bfc00d1c:	8fa20034 	lw	v0,52(sp)
bfc00d20:	afa20010 	sw	v0,16(sp)
				while (--r > p) 
bfc00d24:	0bf00359 	j	bfc00d64 <vsprintf+0x3d4>
bfc00d28:	00000000 	nop
				{
					i = *r;
bfc00d2c:	8fa20010 	lw	v0,16(sp)
bfc00d30:	80420000 	lb	v0,0(v0)
bfc00d34:	afa20014 	sw	v0,20(sp)
					*r = *p;
bfc00d38:	8fa2003c 	lw	v0,60(sp)
bfc00d3c:	80430000 	lb	v1,0(v0)
bfc00d40:	8fa20010 	lw	v0,16(sp)
bfc00d44:	a0430000 	sb	v1,0(v0)
					*p++ = i;
bfc00d48:	8fa20014 	lw	v0,20(sp)
bfc00d4c:	7c021c20 	seb	v1,v0
bfc00d50:	8fa2003c 	lw	v0,60(sp)
bfc00d54:	a0430000 	sb	v1,0(v0)
bfc00d58:	8fa2003c 	lw	v0,60(sp)
bfc00d5c:	24420001 	addiu	v0,v0,1
bfc00d60:	afa2003c 	sw	v0,60(sp)
					*q++ = '0' + (i % 10);
					i /= 10;
				} while (i);
				/* reverse digits, stop in middle */
				r = q;		/* don't alter q */
				while (--r > p) 
bfc00d64:	8fa20010 	lw	v0,16(sp)
bfc00d68:	2442ffff 	addiu	v0,v0,-1
bfc00d6c:	afa20010 	sw	v0,16(sp)
bfc00d70:	8fa30010 	lw	v1,16(sp)
bfc00d74:	8fa2003c 	lw	v0,60(sp)
bfc00d78:	0043102b 	sltu	v0,v0,v1
bfc00d7c:	1440ffeb 	bnez	v0,bfc00d2c <vsprintf+0x39c>
bfc00d80:	00000000 	nop
bfc00d84:	0bf0037c 	j	bfc00df0 <vsprintf+0x460>
bfc00d88:	00000000 	nop
					i = *r;
					*r = *p;
					*p++ = i;
				}
			}			
			else if (*fmt == 'c')
bfc00d8c:	8fa20064 	lw	v0,100(sp)
bfc00d90:	80430000 	lb	v1,0(v0)
bfc00d94:	24020063 	li	v0,99
bfc00d98:	1462000e 	bne	v1,v0,bfc00dd4 <vsprintf+0x444>
bfc00d9c:	00000000 	nop
				*q++ = *dp++;
bfc00da0:	8fa20068 	lw	v0,104(sp)
bfc00da4:	8c420000 	lw	v0,0(v0)
bfc00da8:	7c021c20 	seb	v1,v0
bfc00dac:	8fa20034 	lw	v0,52(sp)
bfc00db0:	a0430000 	sb	v1,0(v0)
bfc00db4:	8fa20034 	lw	v0,52(sp)
bfc00db8:	24420001 	addiu	v0,v0,1
bfc00dbc:	afa20034 	sw	v0,52(sp)
bfc00dc0:	8fa20068 	lw	v0,104(sp)
bfc00dc4:	24420004 	addiu	v0,v0,4
bfc00dc8:	afa20068 	sw	v0,104(sp)
bfc00dcc:	0bf0037c 	j	bfc00df0 <vsprintf+0x460>
bfc00dd0:	00000000 	nop
			else
				*q++ = *fmt;
bfc00dd4:	8fa20064 	lw	v0,100(sp)
bfc00dd8:	80430000 	lb	v1,0(v0)
bfc00ddc:	8fa20034 	lw	v0,52(sp)
bfc00de0:	a0430000 	sb	v1,0(v0)
bfc00de4:	8fa20034 	lw	v0,52(sp)
bfc00de8:	24420001 	addiu	v0,v0,1
bfc00dec:	afa20034 	sw	v0,52(sp)
			/* now output the saved string */
			for (p = tmp; p < q; ++p)
bfc00df0:	27a20040 	addiu	v0,sp,64
bfc00df4:	afa2003c 	sw	v0,60(sp)
bfc00df8:	0bf00394 	j	bfc00e50 <vsprintf+0x4c0>
bfc00dfc:	00000000 	nop
				buf ? *s++ = *p : putchar(*p);
bfc00e00:	8fa20060 	lw	v0,96(sp)
bfc00e04:	1040000a 	beqz	v0,bfc00e30 <vsprintf+0x4a0>
bfc00e08:	00000000 	nop
bfc00e0c:	8fa2003c 	lw	v0,60(sp)
bfc00e10:	80430000 	lb	v1,0(v0)
bfc00e14:	8fa20038 	lw	v0,56(sp)
bfc00e18:	a0430000 	sb	v1,0(v0)
bfc00e1c:	8fa20038 	lw	v0,56(sp)
bfc00e20:	24420001 	addiu	v0,v0,1
bfc00e24:	afa20038 	sw	v0,56(sp)
bfc00e28:	0bf00391 	j	bfc00e44 <vsprintf+0x4b4>
bfc00e2c:	00000000 	nop
bfc00e30:	8fa2003c 	lw	v0,60(sp)
bfc00e34:	80420000 	lb	v0,0(v0)
bfc00e38:	00402021 	move	a0,v0
bfc00e3c:	0ff001e4 	jal	bfc00790 <uart_outc>
bfc00e40:	00000000 	nop
			else if (*fmt == 'c')
				*q++ = *dp++;
			else
				*q++ = *fmt;
			/* now output the saved string */
			for (p = tmp; p < q; ++p)
bfc00e44:	8fa2003c 	lw	v0,60(sp)
bfc00e48:	24420001 	addiu	v0,v0,1
bfc00e4c:	afa2003c 	sw	v0,60(sp)
bfc00e50:	8fa3003c 	lw	v1,60(sp)
bfc00e54:	8fa20034 	lw	v0,52(sp)
bfc00e58:	0062102b 	sltu	v0,v1,v0
bfc00e5c:	1440ffe8 	bnez	v0,bfc00e00 <vsprintf+0x470>
bfc00e60:	00000000 	nop
{
	#define putchar uart_outc
	char *p, *s;

	s = buf;
	for ( ; *fmt != '\0'; ++fmt) 
bfc00e64:	8fa20064 	lw	v0,100(sp)
bfc00e68:	24420001 	addiu	v0,v0,1
bfc00e6c:	afa20064 	sw	v0,100(sp)
bfc00e70:	8fa20064 	lw	v0,100(sp)
bfc00e74:	80420000 	lb	v0,0(v0)
bfc00e78:	1440fece 	bnez	v0,bfc009b4 <vsprintf+0x24>
bfc00e7c:	00000000 	nop
			/* now output the saved string */
			for (p = tmp; p < q; ++p)
				buf ? *s++ = *p : putchar(*p);
		}
	}
	if (buf)
bfc00e80:	8fa20060 	lw	v0,96(sp)
bfc00e84:	10400003 	beqz	v0,bfc00e94 <vsprintf+0x504>
bfc00e88:	00000000 	nop
		*s = '\0';
bfc00e8c:	8fa20038 	lw	v0,56(sp)
bfc00e90:	a0400000 	sb	zero,0(v0)
	return (s - buf);
bfc00e94:	8fa30038 	lw	v1,56(sp)
bfc00e98:	8fa20060 	lw	v0,96(sp)
bfc00e9c:	00621023 	subu	v0,v1,v0
}
bfc00ea0:	8fbf005c 	lw	ra,92(sp)
bfc00ea4:	27bd0060 	addiu	sp,sp,96
bfc00ea8:	03e00008 	jr	ra
bfc00eac:	00000000 	nop

bfc00eb0 <printf>:
//--------------------------------------------------
void printf(const char *fmt, ...)
{	
bfc00eb0:	27bdffe8 	addiu	sp,sp,-24
bfc00eb4:	afbf0014 	sw	ra,20(sp)
bfc00eb8:	afa5001c 	sw	a1,28(sp)
bfc00ebc:	afa60020 	sw	a2,32(sp)
bfc00ec0:	afa70024 	sw	a3,36(sp)
bfc00ec4:	afa40018 	sw	a0,24(sp)
	(void)vsprintf(0, fmt, ((const int *)&fmt)+1);	
bfc00ec8:	8fa30018 	lw	v1,24(sp)
bfc00ecc:	27a20018 	addiu	v0,sp,24
bfc00ed0:	24420004 	addiu	v0,v0,4
bfc00ed4:	00002021 	move	a0,zero
bfc00ed8:	00602821 	move	a1,v1
bfc00edc:	00403021 	move	a2,v0
bfc00ee0:	0ff00264 	jal	bfc00990 <vsprintf>
bfc00ee4:	00000000 	nop
}
bfc00ee8:	8fbf0014 	lw	ra,20(sp)
bfc00eec:	27bd0018 	addiu	sp,sp,24
bfc00ef0:	03e00008 	jr	ra
bfc00ef4:	00000000 	nop

bfc00ef8 <ShowRxDelayMap>:
#endif
//==============================================================


void ShowRxDelayMap()
{
bfc00ef8:	27bdffb0 	addiu	sp,sp,-80
bfc00efc:	afbf004c 	sw	ra,76(sp)
    unsigned int tx,rx,DQS_EN_HCLK;
	#define REG32_ANDOR(x,y,z)  { REG32(x)=( REG32(x) & (y) ) | (z);  }


 unsigned int rx_cnt=0,rx_OK_total=0;
bfc00f00:	afa00024 	sw	zero,36(sp)
bfc00f04:	afa00020 	sw	zero,32(sp)

 unsigned int tx_bit=31,rx_bit=31,rx_final;//scan bit
bfc00f08:	2402001f 	li	v0,31
bfc00f0c:	afa2001c 	sw	v0,28(sp)
bfc00f10:	2402001f 	li	v0,31
bfc00f14:	afa20018 	sw	v0,24(sp)

 volatile unsigned int i;

 volatile unsigned int delay_tap_DDR,freq_DDR_sel;
  
 unsigned int DQS_EN_HCLK_end=1;
bfc00f18:	24020001 	li	v0,1
bfc00f1c:	afa20010 	sw	v0,16(sp)

    for (DQS_EN_HCLK =0; DQS_EN_HCLK<=DQS_EN_HCLK_end; DQS_EN_HCLK++)
bfc00f20:	afa00028 	sw	zero,40(sp)
bfc00f24:	0bf005ad 	j	bfc016b4 <ShowRxDelayMap+0x7bc>
bfc00f28:	00000000 	nop
    {
    	    _memctl_debug_printf("\n\nDQS_EN_HCLK=%02x : ",DQS_EN_HCLK);
	    REG32_ANDOR(DIDER1,    ~( (0x1<<31) | (0x1<<23) ),   (DQS_EN_HCLK<<31) | (DQS_EN_HCLK<<23) );
bfc00f2c:	3c02b800 	lui	v0,0xb800
bfc00f30:	34421050 	ori	v0,v0,0x1050
bfc00f34:	3c03b800 	lui	v1,0xb800
bfc00f38:	34631050 	ori	v1,v1,0x1050
bfc00f3c:	8c640000 	lw	a0,0(v1)
bfc00f40:	3c037f7f 	lui	v1,0x7f7f
bfc00f44:	3463ffff 	ori	v1,v1,0xffff
bfc00f48:	00832024 	and	a0,a0,v1
bfc00f4c:	8fa30028 	lw	v1,40(sp)
bfc00f50:	00032fc0 	sll	a1,v1,0x1f
bfc00f54:	8fa30028 	lw	v1,40(sp)
bfc00f58:	00031dc0 	sll	v1,v1,0x17
bfc00f5c:	00a31825 	or	v1,a1,v1
bfc00f60:	00831825 	or	v1,a0,v1
bfc00f64:	ac430000 	sw	v1,0(v0)

	 _memctl_debug_printf("\n     Rx=" );
     for (rx =0; rx<=31; rx++)
bfc00f68:	afa0002c 	sw	zero,44(sp)
bfc00f6c:	0bf003e0 	j	bfc00f80 <ShowRxDelayMap+0x88>
bfc00f70:	00000000 	nop
bfc00f74:	8fa2002c 	lw	v0,44(sp)
bfc00f78:	24420001 	addiu	v0,v0,1
bfc00f7c:	afa2002c 	sw	v0,44(sp)
bfc00f80:	8fa2002c 	lw	v0,44(sp)
bfc00f84:	2c420020 	sltiu	v0,v0,32
bfc00f88:	1440fffa 	bnez	v0,bfc00f74 <ShowRxDelayMap+0x7c>
bfc00f8c:	00000000 	nop
    	  _memctl_debug_printf("%02x:",rx);
   // for (tx =0; tx<=31; tx++)
    for (tx =0; tx<=tx_bit; tx++)
bfc00f90:	afa00030 	sw	zero,48(sp)
bfc00f94:	0bf005a5 	j	bfc01694 <ShowRxDelayMap+0x79c>
bfc00f98:	00000000 	nop
    {
         _memctl_debug_printf("\nTx=%02x : ",tx );
        for (rx =0; rx<= 31; rx++)
bfc00f9c:	afa0002c 	sw	zero,44(sp)
bfc00fa0:	0bf0059e 	j	bfc01678 <ShowRxDelayMap+0x780>
bfc00fa4:	00000000 	nop
     #if 0
	     REG32_ANDOR(DIDER1,    ~( (0x1f<<24) | (0x1f<<16) ),   (rx<<24) | (rx<<16) );
	#else

	 //RX open loop 
	 REG32_ANDOR(DIDER1,    ~( (0x1f<<24) | (0x1f<<16) ),   (tx<<24) | (tx<<16) );
bfc00fa8:	3c02b800 	lui	v0,0xb800
bfc00fac:	34421050 	ori	v0,v0,0x1050
bfc00fb0:	3c03b800 	lui	v1,0xb800
bfc00fb4:	34631050 	ori	v1,v1,0x1050
bfc00fb8:	8c640000 	lw	a0,0(v1)
bfc00fbc:	3c03e0e0 	lui	v1,0xe0e0
bfc00fc0:	3463ffff 	ori	v1,v1,0xffff
bfc00fc4:	00832024 	and	a0,a0,v1
bfc00fc8:	8fa30030 	lw	v1,48(sp)
bfc00fcc:	00032e00 	sll	a1,v1,0x18
bfc00fd0:	8fa30030 	lw	v1,48(sp)
bfc00fd4:	00031c00 	sll	v1,v1,0x10
bfc00fd8:	00a31825 	or	v1,a1,v1
bfc00fdc:	00831825 	or	v1,a0,v1
bfc00fe0:	ac430000 	sw	v1,0(v0)
	//REG32(DIDER1)=0x8f8f0000;	//DDR3 Chariot 250MHZ OK.

	 REG32_ANDOR(DACCR,    ~( (0x1f<<16) | (0x1f<<8) ),   (rx<<16) | (rx<<8) );
bfc00fe4:	3c02b800 	lui	v0,0xb800
bfc00fe8:	34421500 	ori	v0,v0,0x1500
bfc00fec:	3c03b800 	lui	v1,0xb800
bfc00ff0:	34631500 	ori	v1,v1,0x1500
bfc00ff4:	8c640000 	lw	a0,0(v1)
bfc00ff8:	3c03ffe0 	lui	v1,0xffe0
bfc00ffc:	3463e0ff 	ori	v1,v1,0xe0ff
bfc01000:	00832024 	and	a0,a0,v1
bfc01004:	8fa3002c 	lw	v1,44(sp)
bfc01008:	00032c00 	sll	a1,v1,0x10
bfc0100c:	8fa3002c 	lw	v1,44(sp)
bfc01010:	00031a00 	sll	v1,v1,0x8
bfc01014:	00a31825 	or	v1,a1,v1
bfc01018:	00831825 	or	v1,a0,v1
bfc0101c:	ac430000 	sw	v1,0(v0)
	
	 REG32_ANDOR(CLK_MANAGER,    ~( (0x1f<<5) | (0x1f<<0) ),   (0x0<<5)| (0x0<<0) );
bfc01020:	3c02b800 	lui	v0,0xb800
bfc01024:	34420010 	ori	v0,v0,0x10
bfc01028:	3c03b800 	lui	v1,0xb800
bfc0102c:	34630010 	ori	v1,v1,0x10
bfc01030:	8c640000 	lw	a0,0(v1)
bfc01034:	2403fc00 	li	v1,-1024
bfc01038:	00831824 	and	v1,a0,v1
bfc0103c:	ac430000 	sw	v1,0(v0)
       //Tx command
       //REG32_ANDOR(0xb80000a0,    ~( (0x1f<<5) | (0x1f<<10) ),   (0<<5) |  (0<<10) );


	 //Tx DQS	     
       REG32_ANDOR(DWPR1,    ~( (0x1f<<21) | (0x1f<<16) ),   (0x0<<21) |  (0x0<<16) );
bfc01040:	3c02b800 	lui	v0,0xb800
bfc01044:	34421800 	ori	v0,v0,0x1800
bfc01048:	3c03b800 	lui	v1,0xb800
bfc0104c:	34631800 	ori	v1,v1,0x1800
bfc01050:	8c640000 	lw	a0,0(v1)
bfc01054:	3c03fc00 	lui	v1,0xfc00
bfc01058:	3463ffff 	ori	v1,v1,0xffff
bfc0105c:	00831824 	and	v1,a0,v1
bfc01060:	ac430000 	sw	v1,0(v0)


	 //Tx DQM	   
	REG32_ANDOR(0xb8001590,    ~( (0x1f<<24) | (0x1f<<16) ),   (0x0<<24) |  (0x0<<16) );
bfc01064:	3c02b800 	lui	v0,0xb800
bfc01068:	34421590 	ori	v0,v0,0x1590
bfc0106c:	3c03b800 	lui	v1,0xb800
bfc01070:	34631590 	ori	v1,v1,0x1590
bfc01074:	8c640000 	lw	a0,0(v1)
bfc01078:	3c03e0e0 	lui	v1,0xe0e0
bfc0107c:	3463ffff 	ori	v1,v1,0xffff
bfc01080:	00831824 	and	v1,a0,v1
bfc01084:	ac430000 	sw	v1,0(v0)


		
	    #if 1  //Tx DQ
	  
	    for(i=0;i<32;i++)
bfc01088:	afa00034 	sw	zero,52(sp)
bfc0108c:	0bf00430 	j	bfc010c0 <ShowRxDelayMap+0x1c8>
bfc01090:	00000000 	nop
	    {
 	        //REG32( 0xb8001510 +i*4 ) = 0x00040200; //DDR3 Chariot 250MHZ OK.

		 REG32( 0xb8001510 +i*4 )  = (0x0<<24)|0x00040200;
bfc01094:	8fa30034 	lw	v1,52(sp)
bfc01098:	3c022e00 	lui	v0,0x2e00
bfc0109c:	34420544 	ori	v0,v0,0x544
bfc010a0:	00621021 	addu	v0,v1,v0
bfc010a4:	00021080 	sll	v0,v0,0x2
bfc010a8:	3c030004 	lui	v1,0x4
bfc010ac:	34630200 	ori	v1,v1,0x200
bfc010b0:	ac430000 	sw	v1,0(v0)


		
	    #if 1  //Tx DQ
	  
	    for(i=0;i<32;i++)
bfc010b4:	8fa20034 	lw	v0,52(sp)
bfc010b8:	24420001 	addiu	v0,v0,1
bfc010bc:	afa20034 	sw	v0,52(sp)
bfc010c0:	8fa20034 	lw	v0,52(sp)
bfc010c4:	2c420020 	sltiu	v0,v0,32
bfc010c8:	1440fff2 	bnez	v0,bfc01094 <ShowRxDelayMap+0x19c>
bfc010cc:	00000000 	nop
	
	#endif


	     volatile unsigned int delay_time;
	     delay_time = 0x500;//about 1us to let memory controller setting take effect
bfc010d0:	24020500 	li	v0,1280
bfc010d4:	afa20040 	sw	v0,64(sp)
	     while(delay_time--);
bfc010d8:	8fa20040 	lw	v0,64(sp)
bfc010dc:	0002182b 	sltu	v1,zero,v0
bfc010e0:	306300ff 	andi	v1,v1,0xff
bfc010e4:	2442ffff 	addiu	v0,v0,-1
bfc010e8:	afa20040 	sw	v0,64(sp)
bfc010ec:	1460fffa 	bnez	v1,bfc010d8 <ShowRxDelayMap+0x1e0>
bfc010f0:	00000000 	nop
		

		 

            REG32(ADDR)=PATT0;      if(REG32(ADDR)!=PATT0)          goto failc0;
bfc010f4:	3c02a038 	lui	v0,0xa038
bfc010f8:	3c035a00 	lui	v1,0x5a00
bfc010fc:	346300a5 	ori	v1,v1,0xa5
bfc01100:	ac430000 	sw	v1,0(v0)
bfc01104:	3c02a038 	lui	v0,0xa038
bfc01108:	8c430000 	lw	v1,0(v0)
bfc0110c:	3c025a00 	lui	v0,0x5a00
bfc01110:	344200a5 	ori	v0,v0,0xa5
bfc01114:	1462005a 	bne	v1,v0,bfc01280 <ShowRxDelayMap+0x388>
bfc01118:	00000000 	nop
            REG32(ADDR)=PATT1;      if(REG32(ADDR)!=PATT1)          goto failc0;
bfc0111c:	3c02a038 	lui	v0,0xa038
bfc01120:	3c03a5a5 	lui	v1,0xa5a5
bfc01124:	34635a5a 	ori	v1,v1,0x5a5a
bfc01128:	ac430000 	sw	v1,0(v0)
bfc0112c:	3c02a038 	lui	v0,0xa038
bfc01130:	8c430000 	lw	v1,0(v0)
bfc01134:	3c02a5a5 	lui	v0,0xa5a5
bfc01138:	34425a5a 	ori	v0,v0,0x5a5a
bfc0113c:	14620053 	bne	v1,v0,bfc0128c <ShowRxDelayMap+0x394>
bfc01140:	00000000 	nop
            REG32(ADDR)=PATT2;      if(REG32(ADDR)!=PATT2)          goto failc0;
bfc01144:	3c02a038 	lui	v0,0xa038
bfc01148:	3c03005a 	lui	v1,0x5a
bfc0114c:	3463a500 	ori	v1,v1,0xa500
bfc01150:	ac430000 	sw	v1,0(v0)
bfc01154:	3c02a038 	lui	v0,0xa038
bfc01158:	8c430000 	lw	v1,0(v0)
bfc0115c:	3c02005a 	lui	v0,0x5a
bfc01160:	3442a500 	ori	v0,v0,0xa500
bfc01164:	1462004c 	bne	v1,v0,bfc01298 <ShowRxDelayMap+0x3a0>
bfc01168:	00000000 	nop
            REG32(ADDR)=PATT3;      if(REG32(ADDR)!=PATT3)          goto failc0;
bfc0116c:	3c02a038 	lui	v0,0xa038
bfc01170:	3c03a5a5 	lui	v1,0xa5a5
bfc01174:	34635a5a 	ori	v1,v1,0x5a5a
bfc01178:	ac430000 	sw	v1,0(v0)
bfc0117c:	3c02a038 	lui	v0,0xa038
bfc01180:	8c430000 	lw	v1,0(v0)
bfc01184:	3c02a5a5 	lui	v0,0xa5a5
bfc01188:	34425a5a 	ori	v0,v0,0x5a5a
bfc0118c:	14620045 	bne	v1,v0,bfc012a4 <ShowRxDelayMap+0x3ac>
bfc01190:	00000000 	nop
            REG32(ADDR)=PATT4;      if(REG32(ADDR)!=PATT4)          goto failc0;
bfc01194:	3c02a038 	lui	v0,0xa038
bfc01198:	3c03aaaa 	lui	v1,0xaaaa
bfc0119c:	3463aaaa 	ori	v1,v1,0xaaaa
bfc011a0:	ac430000 	sw	v1,0(v0)
bfc011a4:	3c02a038 	lui	v0,0xa038
bfc011a8:	8c430000 	lw	v1,0(v0)
bfc011ac:	3c02aaaa 	lui	v0,0xaaaa
bfc011b0:	3442aaaa 	ori	v0,v0,0xaaaa
bfc011b4:	1462003e 	bne	v1,v0,bfc012b0 <ShowRxDelayMap+0x3b8>
bfc011b8:	00000000 	nop
	     REG32(ADDR)=PATT5;      if(REG32(ADDR)!=PATT5)          goto failc0;
bfc011bc:	3c02a038 	lui	v0,0xa038
bfc011c0:	2403ffff 	li	v1,-1
bfc011c4:	ac430000 	sw	v1,0(v0)
bfc011c8:	3c02a038 	lui	v0,0xa038
bfc011cc:	8c430000 	lw	v1,0(v0)
bfc011d0:	2402ffff 	li	v0,-1
bfc011d4:	14620039 	bne	v1,v0,bfc012bc <ShowRxDelayMap+0x3c4>
bfc011d8:	00000000 	nop
	     REG32(ADDR)=PATT6;      if(REG32(ADDR)!=PATT6)          goto failc0;
bfc011dc:	3c02a038 	lui	v0,0xa038
bfc011e0:	ac400000 	sw	zero,0(v0)
bfc011e4:	3c02a038 	lui	v0,0xa038
bfc011e8:	8c420000 	lw	v0,0(v0)
bfc011ec:	14400036 	bnez	v0,bfc012c8 <ShowRxDelayMap+0x3d0>
bfc011f0:	00000000 	nop
            REG32(ADDR)=PATT7;      if(REG32(ADDR)!=PATT7)          goto failc0;
bfc011f4:	3c02a038 	lui	v0,0xa038
bfc011f8:	ac400000 	sw	zero,0(v0)
bfc011fc:	3c02a038 	lui	v0,0xa038
bfc01200:	8c420000 	lw	v0,0(v0)
bfc01204:	14400033 	bnez	v0,bfc012d4 <ShowRxDelayMap+0x3dc>
bfc01208:	00000000 	nop
	     REG32(ADDR)=PATT8;      if(REG32(ADDR)!=PATT8)          goto failc0;
bfc0120c:	3c02a038 	lui	v0,0xa038
bfc01210:	2403ffff 	li	v1,-1
bfc01214:	ac430000 	sw	v1,0(v0)
bfc01218:	3c02a038 	lui	v0,0xa038
bfc0121c:	8c430000 	lw	v1,0(v0)
bfc01220:	2402ffff 	li	v0,-1
bfc01224:	1462002e 	bne	v1,v0,bfc012e0 <ShowRxDelayMap+0x3e8>
bfc01228:	00000000 	nop

             _memctl_debug_printf("%02x,",  rx);


	     ////////////////////////////////////Pass
	     rx_OK_total+=rx;
bfc0122c:	8fa30020 	lw	v1,32(sp)
bfc01230:	8fa2002c 	lw	v0,44(sp)
bfc01234:	00621021 	addu	v0,v1,v0
bfc01238:	afa20020 	sw	v0,32(sp)
	     rx_cnt+=1;
bfc0123c:	8fa20024 	lw	v0,36(sp)
bfc01240:	24420001 	addiu	v0,v0,1
bfc01244:	afa20024 	sw	v0,36(sp)

	     if((tx==tx_bit)&&(rx==rx_bit)&&(DQS_EN_HCLK==DQS_EN_HCLK_end))//Scan over
bfc01248:	8fa30030 	lw	v1,48(sp)
bfc0124c:	8fa2001c 	lw	v0,28(sp)
bfc01250:	146200f6 	bne	v1,v0,bfc0162c <ShowRxDelayMap+0x734>
bfc01254:	00000000 	nop
bfc01258:	8fa3002c 	lw	v1,44(sp)
bfc0125c:	8fa20018 	lw	v0,24(sp)
bfc01260:	146200f5 	bne	v1,v0,bfc01638 <ShowRxDelayMap+0x740>
bfc01264:	00000000 	nop
bfc01268:	8fa30028 	lw	v1,40(sp)
bfc0126c:	8fa20010 	lw	v0,16(sp)
bfc01270:	146200f4 	bne	v1,v0,bfc01644 <ShowRxDelayMap+0x74c>
bfc01274:	00000000 	nop
	     {
			goto DONE;
bfc01278:	0bf004c6 	j	bfc01318 <ShowRxDelayMap+0x420>
bfc0127c:	00000000 	nop
	     while(delay_time--);
		

		 

            REG32(ADDR)=PATT0;      if(REG32(ADDR)!=PATT0)          goto failc0;
bfc01280:	00000000 	nop
bfc01284:	0bf004b9 	j	bfc012e4 <ShowRxDelayMap+0x3ec>
bfc01288:	00000000 	nop
            REG32(ADDR)=PATT1;      if(REG32(ADDR)!=PATT1)          goto failc0;
bfc0128c:	00000000 	nop
bfc01290:	0bf004b9 	j	bfc012e4 <ShowRxDelayMap+0x3ec>
bfc01294:	00000000 	nop
            REG32(ADDR)=PATT2;      if(REG32(ADDR)!=PATT2)          goto failc0;
bfc01298:	00000000 	nop
bfc0129c:	0bf004b9 	j	bfc012e4 <ShowRxDelayMap+0x3ec>
bfc012a0:	00000000 	nop
            REG32(ADDR)=PATT3;      if(REG32(ADDR)!=PATT3)          goto failc0;
bfc012a4:	00000000 	nop
bfc012a8:	0bf004b9 	j	bfc012e4 <ShowRxDelayMap+0x3ec>
bfc012ac:	00000000 	nop
            REG32(ADDR)=PATT4;      if(REG32(ADDR)!=PATT4)          goto failc0;
bfc012b0:	00000000 	nop
bfc012b4:	0bf004b9 	j	bfc012e4 <ShowRxDelayMap+0x3ec>
bfc012b8:	00000000 	nop
	     REG32(ADDR)=PATT5;      if(REG32(ADDR)!=PATT5)          goto failc0;
bfc012bc:	00000000 	nop
bfc012c0:	0bf004b9 	j	bfc012e4 <ShowRxDelayMap+0x3ec>
bfc012c4:	00000000 	nop
	     REG32(ADDR)=PATT6;      if(REG32(ADDR)!=PATT6)          goto failc0;
bfc012c8:	00000000 	nop
bfc012cc:	0bf004b9 	j	bfc012e4 <ShowRxDelayMap+0x3ec>
bfc012d0:	00000000 	nop
            REG32(ADDR)=PATT7;      if(REG32(ADDR)!=PATT7)          goto failc0;
bfc012d4:	00000000 	nop
bfc012d8:	0bf004b9 	j	bfc012e4 <ShowRxDelayMap+0x3ec>
bfc012dc:	00000000 	nop
	     REG32(ADDR)=PATT8;      if(REG32(ADDR)!=PATT8)          goto failc0;
bfc012e0:	00000000 	nop
			
	      
	     // rx_cnt+=1;
	     
             _memctl_debug_printf("--," );
	       if((tx==tx_bit)&&(rx==rx_bit)&&(DQS_EN_HCLK==DQS_EN_HCLK_end))//Scan over
bfc012e4:	8fa30030 	lw	v1,48(sp)
bfc012e8:	8fa2001c 	lw	v0,28(sp)
bfc012ec:	146200d8 	bne	v1,v0,bfc01650 <ShowRxDelayMap+0x758>
bfc012f0:	00000000 	nop
bfc012f4:	8fa3002c 	lw	v1,44(sp)
bfc012f8:	8fa20018 	lw	v0,24(sp)
bfc012fc:	146200d7 	bne	v1,v0,bfc0165c <ShowRxDelayMap+0x764>
bfc01300:	00000000 	nop
bfc01304:	8fa30028 	lw	v1,40(sp)
bfc01308:	8fa20010 	lw	v0,16(sp)
bfc0130c:	146200d6 	bne	v1,v0,bfc01668 <ShowRxDelayMap+0x770>
bfc01310:	00000000 	nop
	     {
			goto DONE;
bfc01314:	00000000 	nop
            continue;


	      //////////////////////////////////Done	
	      DONE:
		  	rx_final=( rx_OK_total)/ rx_cnt;	
bfc01318:	8fa30020 	lw	v1,32(sp)
bfc0131c:	8fa20024 	lw	v0,36(sp)
bfc01320:	0062001b 	divu	zero,v1,v0
bfc01324:	004001f4 	teq	v0,zero,0x7
bfc01328:	00001810 	mfhi	v1
bfc0132c:	00001012 	mflo	v0
bfc01330:	afa20014 	sw	v0,20(sp)

			rx_final+=3;
bfc01334:	8fa20014 	lw	v0,20(sp)
bfc01338:	24420003 	addiu	v0,v0,3
bfc0133c:	afa20014 	sw	v0,20(sp)

			 REG32_ANDOR(DIDER1,    ~( (0x1f<<24) | (0x1f<<16) ),   (rx_final<<24) | (rx_final<<16) );
bfc01340:	3c02b800 	lui	v0,0xb800
bfc01344:	34421050 	ori	v0,v0,0x1050
bfc01348:	3c03b800 	lui	v1,0xb800
bfc0134c:	34631050 	ori	v1,v1,0x1050
bfc01350:	8c640000 	lw	a0,0(v1)
bfc01354:	3c03e0e0 	lui	v1,0xe0e0
bfc01358:	3463ffff 	ori	v1,v1,0xffff
bfc0135c:	00832024 	and	a0,a0,v1
bfc01360:	8fa30014 	lw	v1,20(sp)
bfc01364:	00032e00 	sll	a1,v1,0x18
bfc01368:	8fa30014 	lw	v1,20(sp)
bfc0136c:	00031c00 	sll	v1,v1,0x10
bfc01370:	00a31825 	or	v1,a1,v1
bfc01374:	00831825 	or	v1,a0,v1
bfc01378:	ac430000 	sw	v1,0(v0)
			   _memctl_debug_printf("rx_OK_total=%d\n", rx_OK_total);
			     _memctl_debug_printf("rx_cnt=%d\n\n", rx_cnt);

		#if 1

	if(memctlc_is_DDR3())	
bfc0137c:	0ff00caf 	jal	bfc032bc <memctlc_is_DDR3>
bfc01380:	00000000 	nop
bfc01384:	10400003 	beqz	v0,bfc01394 <ShowRxDelayMap+0x49c>
bfc01388:	00000000 	nop
		freq_DDR_sel=550;
bfc0138c:	24020226 	li	v0,550
bfc01390:	afa2003c 	sw	v0,60(sp)

	if(memctlc_is_DDR2())	
bfc01394:	0ff00cbd 	jal	bfc032f4 <memctlc_is_DDR2>
bfc01398:	00000000 	nop
bfc0139c:	10400003 	beqz	v0,bfc013ac <ShowRxDelayMap+0x4b4>
bfc013a0:	00000000 	nop
		freq_DDR_sel=510;
bfc013a4:	240201fe 	li	v0,510
bfc013a8:	afa2003c 	sw	v0,60(sp)


	
		
		
	if(board_DRAM_freq_mhz()<freq_DDR_sel)	
bfc013ac:	0ff0260d 	jal	bfc09834 <board_DRAM_freq_mhz>
bfc013b0:	00000000 	nop
bfc013b4:	00401821 	move	v1,v0
bfc013b8:	8fa2003c 	lw	v0,60(sp)
bfc013bc:	0062102b 	sltu	v0,v1,v0
bfc013c0:	1040003b 	beqz	v0,bfc014b0 <ShowRxDelayMap+0x5b8>
bfc013c4:	00000000 	nop
	{
	   REG32_ANDOR(CLK_MANAGER,    ~( (0x1f<<5) | (0x1f<<0) ),   (0x0<<5)| (0x0<<0) );
bfc013c8:	3c02b800 	lui	v0,0xb800
bfc013cc:	34420010 	ori	v0,v0,0x10
bfc013d0:	3c03b800 	lui	v1,0xb800
bfc013d4:	34630010 	ori	v1,v1,0x10
bfc013d8:	8c640000 	lw	a0,0(v1)
bfc013dc:	2403fc00 	li	v1,-1024
bfc013e0:	00831824 	and	v1,a0,v1
bfc013e4:	ac430000 	sw	v1,0(v0)

	 REG32(DIDER1)=0x1f1f0000;	//DDR3 Chariot 250MHZ OK.
bfc013e8:	3c02b800 	lui	v0,0xb800
bfc013ec:	34421050 	ori	v0,v0,0x1050
bfc013f0:	3c031f1f 	lui	v1,0x1f1f
bfc013f4:	ac430000 	sw	v1,0(v0)
	  
       //Tx command
       REG32_ANDOR(0xb80000a0,    ~( (0x1f<<5) | (0x1f<<10) ),   (0<<5) |  (0<<10) );
bfc013f8:	3c02b800 	lui	v0,0xb800
bfc013fc:	344200a0 	ori	v0,v0,0xa0
bfc01400:	3c03b800 	lui	v1,0xb800
bfc01404:	346300a0 	ori	v1,v1,0xa0
bfc01408:	8c640000 	lw	a0,0(v1)
bfc0140c:	2403801f 	li	v1,-32737
bfc01410:	00831824 	and	v1,a0,v1
bfc01414:	ac430000 	sw	v1,0(v0)

	 //Tx DQS	     
       REG32_ANDOR(DWPR1,    ~( (0x1f<<21) | (0x1f<<16) ),   (0x0<<21) |  (0x0<<16) );
bfc01418:	3c02b800 	lui	v0,0xb800
bfc0141c:	34421800 	ori	v0,v0,0x1800
bfc01420:	3c03b800 	lui	v1,0xb800
bfc01424:	34631800 	ori	v1,v1,0x1800
bfc01428:	8c640000 	lw	a0,0(v1)
bfc0142c:	3c03fc00 	lui	v1,0xfc00
bfc01430:	3463ffff 	ori	v1,v1,0xffff
bfc01434:	00831824 	and	v1,a0,v1
bfc01438:	ac430000 	sw	v1,0(v0)

	 //Tx DQM	   
	REG32_ANDOR(0xb8001590,    ~( (0x1f<<24) | (0x1f<<16) ),   (0x0<<24) |  (0x0<<16) );
bfc0143c:	3c02b800 	lui	v0,0xb800
bfc01440:	34421590 	ori	v0,v0,0x1590
bfc01444:	3c03b800 	lui	v1,0xb800
bfc01448:	34631590 	ori	v1,v1,0x1590
bfc0144c:	8c640000 	lw	a0,0(v1)
bfc01450:	3c03e0e0 	lui	v1,0xe0e0
bfc01454:	3463ffff 	ori	v1,v1,0xffff
bfc01458:	00831824 	and	v1,a0,v1
bfc0145c:	ac430000 	sw	v1,0(v0)

	   //Tx DQ	   
	    for(i=0;i<32;i++)
bfc01460:	afa00034 	sw	zero,52(sp)
bfc01464:	0bf00526 	j	bfc01498 <ShowRxDelayMap+0x5a0>
bfc01468:	00000000 	nop
	    { 	      
		 REG32( 0xb8001510 +i*4 )  = 0x00040200;		
bfc0146c:	8fa30034 	lw	v1,52(sp)
bfc01470:	3c022e00 	lui	v0,0x2e00
bfc01474:	34420544 	ori	v0,v0,0x544
bfc01478:	00621021 	addu	v0,v1,v0
bfc0147c:	00021080 	sll	v0,v0,0x2
bfc01480:	3c030004 	lui	v1,0x4
bfc01484:	34630200 	ori	v1,v1,0x200
bfc01488:	ac430000 	sw	v1,0(v0)

	 //Tx DQM	   
	REG32_ANDOR(0xb8001590,    ~( (0x1f<<24) | (0x1f<<16) ),   (0x0<<24) |  (0x0<<16) );

	   //Tx DQ	   
	    for(i=0;i<32;i++)
bfc0148c:	8fa20034 	lw	v0,52(sp)
bfc01490:	24420001 	addiu	v0,v0,1
bfc01494:	afa20034 	sw	v0,52(sp)
bfc01498:	8fa20034 	lw	v0,52(sp)
bfc0149c:	2c420020 	sltiu	v0,v0,32
bfc014a0:	1440fff2 	bnez	v0,bfc0146c <ShowRxDelayMap+0x574>
bfc014a4:	00000000 	nop
bfc014a8:	0bf0059b 	j	bfc0166c <ShowRxDelayMap+0x774>
bfc014ac:	00000000 	nop
	}
	else //>=550MHZ
	{


	if(memctlc_is_DDR3())	
bfc014b0:	0ff00caf 	jal	bfc032bc <memctlc_is_DDR3>
bfc014b4:	00000000 	nop
bfc014b8:	10400003 	beqz	v0,bfc014c8 <ShowRxDelayMap+0x5d0>
bfc014bc:	00000000 	nop
		 delay_tap_DDR=0x8;
bfc014c0:	24020008 	li	v0,8
bfc014c4:	afa20038 	sw	v0,56(sp)

	if(memctlc_is_DDR2())	
bfc014c8:	0ff00cbd 	jal	bfc032f4 <memctlc_is_DDR2>
bfc014cc:	00000000 	nop
bfc014d0:	10400002 	beqz	v0,bfc014dc <ShowRxDelayMap+0x5e4>
bfc014d4:	00000000 	nop
		 delay_tap_DDR=0x0;//0x12 fail , 0x8 fail 510MHZ
bfc014d8:	afa00038 	sw	zero,56(sp)
	
		
	 REG32_ANDOR(CLK_MANAGER,    ~( (0x1f<<5) | (0x1f<<0) ),   (delay_tap_DDR<<5)| (delay_tap_DDR<<0) );
bfc014dc:	3c02b800 	lui	v0,0xb800
bfc014e0:	34420010 	ori	v0,v0,0x10
bfc014e4:	3c03b800 	lui	v1,0xb800
bfc014e8:	34630010 	ori	v1,v1,0x10
bfc014ec:	8c640000 	lw	a0,0(v1)
bfc014f0:	2403fc00 	li	v1,-1024
bfc014f4:	00832024 	and	a0,a0,v1
bfc014f8:	8fa30038 	lw	v1,56(sp)
bfc014fc:	00032940 	sll	a1,v1,0x5
bfc01500:	8fa30038 	lw	v1,56(sp)
bfc01504:	00a31825 	or	v1,a1,v1
bfc01508:	00831825 	or	v1,a0,v1
bfc0150c:	ac430000 	sw	v1,0(v0)
	  
	 //RX open loop 	
	 REG32(DIDER1)=0x1f1f0000;	
bfc01510:	3c02b800 	lui	v0,0xb800
bfc01514:	34421050 	ori	v0,v0,0x1050
bfc01518:	3c031f1f 	lui	v1,0x1f1f
bfc0151c:	ac430000 	sw	v1,0(v0)
	  
       //Tx command
       REG32_ANDOR(0xb80000a0,    ~( (0x1f<<5) | (0x1f<<10) ),   (delay_tap_DDR<<5) |  (delay_tap_DDR<<10) );
bfc01520:	3c02b800 	lui	v0,0xb800
bfc01524:	344200a0 	ori	v0,v0,0xa0
bfc01528:	3c03b800 	lui	v1,0xb800
bfc0152c:	346300a0 	ori	v1,v1,0xa0
bfc01530:	8c640000 	lw	a0,0(v1)
bfc01534:	2403801f 	li	v1,-32737
bfc01538:	00832024 	and	a0,a0,v1
bfc0153c:	8fa30038 	lw	v1,56(sp)
bfc01540:	00032940 	sll	a1,v1,0x5
bfc01544:	8fa30038 	lw	v1,56(sp)
bfc01548:	00031a80 	sll	v1,v1,0xa
bfc0154c:	00a31825 	or	v1,a1,v1
bfc01550:	00831825 	or	v1,a0,v1
bfc01554:	ac430000 	sw	v1,0(v0)

	 //Tx DQS	     
       REG32_ANDOR(DWPR1,    ~( (0x1f<<21) | (0x1f<<16) ),   (delay_tap_DDR<<21) |  (delay_tap_DDR<<16) );
bfc01558:	3c02b800 	lui	v0,0xb800
bfc0155c:	34421800 	ori	v0,v0,0x1800
bfc01560:	3c03b800 	lui	v1,0xb800
bfc01564:	34631800 	ori	v1,v1,0x1800
bfc01568:	8c640000 	lw	a0,0(v1)
bfc0156c:	3c03fc00 	lui	v1,0xfc00
bfc01570:	3463ffff 	ori	v1,v1,0xffff
bfc01574:	00832024 	and	a0,a0,v1
bfc01578:	8fa30038 	lw	v1,56(sp)
bfc0157c:	00032d40 	sll	a1,v1,0x15
bfc01580:	8fa30038 	lw	v1,56(sp)
bfc01584:	00031c00 	sll	v1,v1,0x10
bfc01588:	00a31825 	or	v1,a1,v1
bfc0158c:	00831825 	or	v1,a0,v1
bfc01590:	ac430000 	sw	v1,0(v0)

	 //Tx DQM	   
	REG32_ANDOR(0xb8001590,    ~( (0x1f<<24) | (0x1f<<16) ),   (delay_tap_DDR<<24) |  (delay_tap_DDR<<16) );
bfc01594:	3c02b800 	lui	v0,0xb800
bfc01598:	34421590 	ori	v0,v0,0x1590
bfc0159c:	3c03b800 	lui	v1,0xb800
bfc015a0:	34631590 	ori	v1,v1,0x1590
bfc015a4:	8c640000 	lw	a0,0(v1)
bfc015a8:	3c03e0e0 	lui	v1,0xe0e0
bfc015ac:	3463ffff 	ori	v1,v1,0xffff
bfc015b0:	00832024 	and	a0,a0,v1
bfc015b4:	8fa30038 	lw	v1,56(sp)
bfc015b8:	00032e00 	sll	a1,v1,0x18
bfc015bc:	8fa30038 	lw	v1,56(sp)
bfc015c0:	00031c00 	sll	v1,v1,0x10
bfc015c4:	00a31825 	or	v1,a1,v1
bfc015c8:	00831825 	or	v1,a0,v1
bfc015cc:	ac430000 	sw	v1,0(v0)

	   //Tx DQ	   
	    for(i=0;i<32;i++)
bfc015d0:	afa00034 	sw	zero,52(sp)
bfc015d4:	0bf00585 	j	bfc01614 <ShowRxDelayMap+0x71c>
bfc015d8:	00000000 	nop
	    { 	      
		  REG32( 0xb8001510 +i*4 )  = (delay_tap_DDR<<24)|0x00040200;	
bfc015dc:	8fa30034 	lw	v1,52(sp)
bfc015e0:	3c022e00 	lui	v0,0x2e00
bfc015e4:	34420544 	ori	v0,v0,0x544
bfc015e8:	00621021 	addu	v0,v1,v0
bfc015ec:	00021080 	sll	v0,v0,0x2
bfc015f0:	8fa30038 	lw	v1,56(sp)
bfc015f4:	00032600 	sll	a0,v1,0x18
bfc015f8:	3c030004 	lui	v1,0x4
bfc015fc:	34630200 	ori	v1,v1,0x200
bfc01600:	00831825 	or	v1,a0,v1
bfc01604:	ac430000 	sw	v1,0(v0)

	 //Tx DQM	   
	REG32_ANDOR(0xb8001590,    ~( (0x1f<<24) | (0x1f<<16) ),   (delay_tap_DDR<<24) |  (delay_tap_DDR<<16) );

	   //Tx DQ	   
	    for(i=0;i<32;i++)
bfc01608:	8fa20034 	lw	v0,52(sp)
bfc0160c:	24420001 	addiu	v0,v0,1
bfc01610:	afa20034 	sw	v0,52(sp)
bfc01614:	8fa20034 	lw	v0,52(sp)
bfc01618:	2c420020 	sltiu	v0,v0,32
bfc0161c:	1440ffef 	bnez	v0,bfc015dc <ShowRxDelayMap+0x6e4>
bfc01620:	00000000 	nop
bfc01624:	0bf0059b 	j	bfc0166c <ShowRxDelayMap+0x774>
bfc01628:	00000000 	nop
	     {
			goto DONE;
	      }
		  

	     continue;
bfc0162c:	00000000 	nop
bfc01630:	0bf0059b 	j	bfc0166c <ShowRxDelayMap+0x774>
bfc01634:	00000000 	nop
bfc01638:	00000000 	nop
bfc0163c:	0bf0059b 	j	bfc0166c <ShowRxDelayMap+0x774>
bfc01640:	00000000 	nop
bfc01644:	00000000 	nop
bfc01648:	0bf0059b 	j	bfc0166c <ShowRxDelayMap+0x774>
bfc0164c:	00000000 	nop
			goto DONE;
	      }

	     
	     
            continue;
bfc01650:	00000000 	nop
bfc01654:	0bf0059b 	j	bfc0166c <ShowRxDelayMap+0x774>
bfc01658:	00000000 	nop
bfc0165c:	00000000 	nop
bfc01660:	0bf0059b 	j	bfc0166c <ShowRxDelayMap+0x774>
bfc01664:	00000000 	nop
bfc01668:	00000000 	nop
    	  _memctl_debug_printf("%02x:",rx);
   // for (tx =0; tx<=31; tx++)
    for (tx =0; tx<=tx_bit; tx++)
    {
         _memctl_debug_printf("\nTx=%02x : ",tx );
        for (rx =0; rx<= 31; rx++)
bfc0166c:	8fa2002c 	lw	v0,44(sp)
bfc01670:	24420001 	addiu	v0,v0,1
bfc01674:	afa2002c 	sw	v0,44(sp)
bfc01678:	8fa2002c 	lw	v0,44(sp)
bfc0167c:	2c420020 	sltiu	v0,v0,32
bfc01680:	1440fe49 	bnez	v0,bfc00fa8 <ShowRxDelayMap+0xb0>
bfc01684:	00000000 	nop

	 _memctl_debug_printf("\n     Rx=" );
     for (rx =0; rx<=31; rx++)
    	  _memctl_debug_printf("%02x:",rx);
   // for (tx =0; tx<=31; tx++)
    for (tx =0; tx<=tx_bit; tx++)
bfc01688:	8fa20030 	lw	v0,48(sp)
bfc0168c:	24420001 	addiu	v0,v0,1
bfc01690:	afa20030 	sw	v0,48(sp)
bfc01694:	8fa30030 	lw	v1,48(sp)
bfc01698:	8fa2001c 	lw	v0,28(sp)
bfc0169c:	0043102b 	sltu	v0,v0,v1
bfc016a0:	1040fe3e 	beqz	v0,bfc00f9c <ShowRxDelayMap+0xa4>
bfc016a4:	00000000 	nop

 volatile unsigned int delay_tap_DDR,freq_DDR_sel;
  
 unsigned int DQS_EN_HCLK_end=1;

    for (DQS_EN_HCLK =0; DQS_EN_HCLK<=DQS_EN_HCLK_end; DQS_EN_HCLK++)
bfc016a8:	8fa20028 	lw	v0,40(sp)
bfc016ac:	24420001 	addiu	v0,v0,1
bfc016b0:	afa20028 	sw	v0,40(sp)
bfc016b4:	8fa30028 	lw	v1,40(sp)
bfc016b8:	8fa20010 	lw	v0,16(sp)
bfc016bc:	0043102b 	sltu	v0,v0,v1
bfc016c0:	1040fe1a 	beqz	v0,bfc00f2c <ShowRxDelayMap+0x34>
bfc016c4:	00000000 	nop
				

        }
    }
   }
}
bfc016c8:	8fbf004c 	lw	ra,76(sp)
bfc016cc:	27bd0050 	addiu	sp,sp,80
bfc016d0:	03e00008 	jr	ra
bfc016d4:	00000000 	nop

bfc016d8 <ShowTxRxDelayMap>:
#if 1//def CONFIG_DRAM_TEST
//==============================================================


void ShowTxRxDelayMap()
{
bfc016d8:	27bdffb8 	addiu	sp,sp,-72
bfc016dc:	afbf0044 	sw	ra,68(sp)
    unsigned int tx,rx,DQS_EN_HCLK;
	#define REG32_ANDOR(x,y,z)  { REG32(x)=( REG32(x) & (y) ) | (z);  }


 unsigned int rx_cnt=0,rx_OK_total=0;
bfc016e0:	afa00024 	sw	zero,36(sp)
bfc016e4:	afa00020 	sw	zero,32(sp)

 unsigned int tx_bit=31,rx_bit=31,rx_final;//scan bit
bfc016e8:	2402001f 	li	v0,31
bfc016ec:	afa2001c 	sw	v0,28(sp)
bfc016f0:	2402001f 	li	v0,31
bfc016f4:	afa20018 	sw	v0,24(sp)

  volatile unsigned int i;
  
 unsigned int DQS_EN_HCLK_end=1;
bfc016f8:	24020001 	li	v0,1
bfc016fc:	afa20010 	sw	v0,16(sp)

    for (DQS_EN_HCLK =0; DQS_EN_HCLK<=DQS_EN_HCLK_end; DQS_EN_HCLK++)
bfc01700:	afa00028 	sw	zero,40(sp)
bfc01704:	0bf00702 	j	bfc01c08 <ShowTxRxDelayMap+0x530>
bfc01708:	00000000 	nop
    {
    	    _memctl_debug_printf("\n\nDQS_EN_HCLK=%02x : ",DQS_EN_HCLK);
	    REG32_ANDOR(DIDER1,    ~( (0x1<<31) | (0x1<<23) ),   (DQS_EN_HCLK<<31) | (DQS_EN_HCLK<<23) );
bfc0170c:	3c02b800 	lui	v0,0xb800
bfc01710:	34421050 	ori	v0,v0,0x1050
bfc01714:	3c03b800 	lui	v1,0xb800
bfc01718:	34631050 	ori	v1,v1,0x1050
bfc0171c:	8c640000 	lw	a0,0(v1)
bfc01720:	3c037f7f 	lui	v1,0x7f7f
bfc01724:	3463ffff 	ori	v1,v1,0xffff
bfc01728:	00832024 	and	a0,a0,v1
bfc0172c:	8fa30028 	lw	v1,40(sp)
bfc01730:	00032fc0 	sll	a1,v1,0x1f
bfc01734:	8fa30028 	lw	v1,40(sp)
bfc01738:	00031dc0 	sll	v1,v1,0x17
bfc0173c:	00a31825 	or	v1,a1,v1
bfc01740:	00831825 	or	v1,a0,v1
bfc01744:	ac430000 	sw	v1,0(v0)

	_memctl_debug_printf("\n     Rx=" );
     for (rx =0; rx<=31; rx++)
bfc01748:	afa0002c 	sw	zero,44(sp)
bfc0174c:	0bf005d8 	j	bfc01760 <ShowTxRxDelayMap+0x88>
bfc01750:	00000000 	nop
bfc01754:	8fa2002c 	lw	v0,44(sp)
bfc01758:	24420001 	addiu	v0,v0,1
bfc0175c:	afa2002c 	sw	v0,44(sp)
bfc01760:	8fa2002c 	lw	v0,44(sp)
bfc01764:	2c420020 	sltiu	v0,v0,32
bfc01768:	1440fffa 	bnez	v0,bfc01754 <ShowTxRxDelayMap+0x7c>
bfc0176c:	00000000 	nop
    	 _memctl_debug_printf("%02x:",rx);
   // for (tx =0; tx<=31; tx++)
    for (tx =0; tx<=tx_bit; tx++)
bfc01770:	afa00030 	sw	zero,48(sp)
bfc01774:	0bf006fa 	j	bfc01be8 <ShowTxRxDelayMap+0x510>
bfc01778:	00000000 	nop
    {
        _memctl_debug_printf("\nTx=%02x : ",tx );
        for (rx =0; rx<= 31; rx++)
bfc0177c:	afa0002c 	sw	zero,44(sp)
bfc01780:	0bf006f3 	j	bfc01bcc <ShowTxRxDelayMap+0x4f4>
bfc01784:	00000000 	nop
				}else{
					_memctl_debug_printf("%s, %d: Error, Unknown DRAM type! \n", __FUNCTION__, __LINE__);	
					//while(1);
				}
		#else
		_memctl_update_phy_param();
bfc01788:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc0178c:	00000000 	nop
     #if 0
	     REG32_ANDOR(DIDER1,    ~( (0x1f<<24) | (0x1f<<16) ),   (rx<<24) | (rx<<16) );
	#else

	 //RX open loop 
	 REG32_ANDOR(DIDER1,    ~( (0x1f<<24) | (0x1f<<16) ),   (tx<<24) | (tx<<16) );
bfc01790:	3c02b800 	lui	v0,0xb800
bfc01794:	34421050 	ori	v0,v0,0x1050
bfc01798:	3c03b800 	lui	v1,0xb800
bfc0179c:	34631050 	ori	v1,v1,0x1050
bfc017a0:	8c640000 	lw	a0,0(v1)
bfc017a4:	3c03e0e0 	lui	v1,0xe0e0
bfc017a8:	3463ffff 	ori	v1,v1,0xffff
bfc017ac:	00832024 	and	a0,a0,v1
bfc017b0:	8fa30030 	lw	v1,48(sp)
bfc017b4:	00032e00 	sll	a1,v1,0x18
bfc017b8:	8fa30030 	lw	v1,48(sp)
bfc017bc:	00031c00 	sll	v1,v1,0x10
bfc017c0:	00a31825 	or	v1,a1,v1
bfc017c4:	00831825 	or	v1,a0,v1
bfc017c8:	ac430000 	sw	v1,0(v0)
	//REG32(DIDER1)=0x8f8f0000;	//DDR3 Chariot 250MHZ OK.

	  REG32_ANDOR(DACCR,    ~( (0x1f<<16) | (0x1f<<8) ),   (rx<<16) | (rx<<8) );
bfc017cc:	3c02b800 	lui	v0,0xb800
bfc017d0:	34421500 	ori	v0,v0,0x1500
bfc017d4:	3c03b800 	lui	v1,0xb800
bfc017d8:	34631500 	ori	v1,v1,0x1500
bfc017dc:	8c640000 	lw	a0,0(v1)
bfc017e0:	3c03ffe0 	lui	v1,0xffe0
bfc017e4:	3463e0ff 	ori	v1,v1,0xe0ff
bfc017e8:	00832024 	and	a0,a0,v1
bfc017ec:	8fa3002c 	lw	v1,44(sp)
bfc017f0:	00032c00 	sll	a1,v1,0x10
bfc017f4:	8fa3002c 	lw	v1,44(sp)
bfc017f8:	00031a00 	sll	v1,v1,0x8
bfc017fc:	00a31825 	or	v1,a1,v1
bfc01800:	00831825 	or	v1,a0,v1
bfc01804:	ac430000 	sw	v1,0(v0)

	
	
	   REG32_ANDOR(CLK_MANAGER,    ~( (0x1f<<5) | (0x1f<<0) ),   (0x10<<5)| (0x10<<0) );
bfc01808:	3c02b800 	lui	v0,0xb800
bfc0180c:	34420010 	ori	v0,v0,0x10
bfc01810:	3c03b800 	lui	v1,0xb800
bfc01814:	34630010 	ori	v1,v1,0x10
bfc01818:	8c640000 	lw	a0,0(v1)
bfc0181c:	2403fc00 	li	v1,-1024
bfc01820:	00831824 	and	v1,a0,v1
bfc01824:	34630210 	ori	v1,v1,0x210
bfc01828:	ac430000 	sw	v1,0(v0)
       //Tx command
       //REG32_ANDOR(0xb80000a0,    ~( (0x1f<<5) | (0x1f<<10) ),   (0<<5) |  (0<<10) );


	 //Tx DQS	     
       REG32_ANDOR(DWPR1,    ~( (0x1f<<21) | (0x1f<<16) ),   (0x10<<21) |  (0x10<<16) );
bfc0182c:	3c02b800 	lui	v0,0xb800
bfc01830:	34421800 	ori	v0,v0,0x1800
bfc01834:	3c03b800 	lui	v1,0xb800
bfc01838:	34631800 	ori	v1,v1,0x1800
bfc0183c:	8c640000 	lw	a0,0(v1)
bfc01840:	3c03fc00 	lui	v1,0xfc00
bfc01844:	3463ffff 	ori	v1,v1,0xffff
bfc01848:	00832024 	and	a0,a0,v1
bfc0184c:	3c030210 	lui	v1,0x210
bfc01850:	00831825 	or	v1,a0,v1
bfc01854:	ac430000 	sw	v1,0(v0)


	 //Tx DQM	   
	REG32_ANDOR(0xb8001590,    ~( (0x1f<<24) | (0x1f<<16) ),   (0x10<<24) |  (0x10<<16) );
bfc01858:	3c02b800 	lui	v0,0xb800
bfc0185c:	34421590 	ori	v0,v0,0x1590
bfc01860:	3c03b800 	lui	v1,0xb800
bfc01864:	34631590 	ori	v1,v1,0x1590
bfc01868:	8c640000 	lw	a0,0(v1)
bfc0186c:	3c03e0e0 	lui	v1,0xe0e0
bfc01870:	3463ffff 	ori	v1,v1,0xffff
bfc01874:	00832024 	and	a0,a0,v1
bfc01878:	3c031010 	lui	v1,0x1010
bfc0187c:	00831825 	or	v1,a0,v1
bfc01880:	ac430000 	sw	v1,0(v0)


		
	    #if 1  //Tx DQ
	  
	    for(i=0;i<32;i++)
bfc01884:	afa00034 	sw	zero,52(sp)
bfc01888:	0bf0062f 	j	bfc018bc <ShowTxRxDelayMap+0x1e4>
bfc0188c:	00000000 	nop
	    {
 	        //REG32( 0xb8001510 +i*4 ) = 0x00040200; //DDR3 Chariot 250MHZ OK.

		 REG32( 0xb8001510 +i*4 )  = (0x10<<24)|0x00040200;
bfc01890:	8fa30034 	lw	v1,52(sp)
bfc01894:	3c022e00 	lui	v0,0x2e00
bfc01898:	34420544 	ori	v0,v0,0x544
bfc0189c:	00621021 	addu	v0,v1,v0
bfc018a0:	00021080 	sll	v0,v0,0x2
bfc018a4:	3c031004 	lui	v1,0x1004
bfc018a8:	34630200 	ori	v1,v1,0x200
bfc018ac:	ac430000 	sw	v1,0(v0)


		
	    #if 1  //Tx DQ
	  
	    for(i=0;i<32;i++)
bfc018b0:	8fa20034 	lw	v0,52(sp)
bfc018b4:	24420001 	addiu	v0,v0,1
bfc018b8:	afa20034 	sw	v0,52(sp)
bfc018bc:	8fa20034 	lw	v0,52(sp)
bfc018c0:	2c420020 	sltiu	v0,v0,32
bfc018c4:	1440fff2 	bnez	v0,bfc01890 <ShowTxRxDelayMap+0x1b8>
bfc018c8:	00000000 	nop
	
	#endif


	     volatile unsigned int delay_time;
	     delay_time = 0x500;//about 1us to let memory controller setting take effect
bfc018cc:	24020500 	li	v0,1280
bfc018d0:	afa20038 	sw	v0,56(sp)
	     while(delay_time--);
bfc018d4:	8fa20038 	lw	v0,56(sp)
bfc018d8:	0002182b 	sltu	v1,zero,v0
bfc018dc:	306300ff 	andi	v1,v1,0xff
bfc018e0:	2442ffff 	addiu	v0,v0,-1
bfc018e4:	afa20038 	sw	v0,56(sp)
bfc018e8:	1460fffa 	bnez	v1,bfc018d4 <ShowTxRxDelayMap+0x1fc>
bfc018ec:	00000000 	nop
		

		 

            REG32(ADDR)=PATT0;      if(REG32(ADDR)!=PATT0)          goto failc0;
bfc018f0:	3c02a038 	lui	v0,0xa038
bfc018f4:	3c035a00 	lui	v1,0x5a00
bfc018f8:	346300a5 	ori	v1,v1,0xa5
bfc018fc:	ac430000 	sw	v1,0(v0)
bfc01900:	3c02a038 	lui	v0,0xa038
bfc01904:	8c430000 	lw	v1,0(v0)
bfc01908:	3c025a00 	lui	v0,0x5a00
bfc0190c:	344200a5 	ori	v0,v0,0xa5
bfc01910:	1462005a 	bne	v1,v0,bfc01a7c <ShowTxRxDelayMap+0x3a4>
bfc01914:	00000000 	nop
            REG32(ADDR)=PATT1;      if(REG32(ADDR)!=PATT1)          goto failc0;
bfc01918:	3c02a038 	lui	v0,0xa038
bfc0191c:	3c03a5a5 	lui	v1,0xa5a5
bfc01920:	34635a5a 	ori	v1,v1,0x5a5a
bfc01924:	ac430000 	sw	v1,0(v0)
bfc01928:	3c02a038 	lui	v0,0xa038
bfc0192c:	8c430000 	lw	v1,0(v0)
bfc01930:	3c02a5a5 	lui	v0,0xa5a5
bfc01934:	34425a5a 	ori	v0,v0,0x5a5a
bfc01938:	14620053 	bne	v1,v0,bfc01a88 <ShowTxRxDelayMap+0x3b0>
bfc0193c:	00000000 	nop
            REG32(ADDR)=PATT2;      if(REG32(ADDR)!=PATT2)          goto failc0;
bfc01940:	3c02a038 	lui	v0,0xa038
bfc01944:	3c03005a 	lui	v1,0x5a
bfc01948:	3463a500 	ori	v1,v1,0xa500
bfc0194c:	ac430000 	sw	v1,0(v0)
bfc01950:	3c02a038 	lui	v0,0xa038
bfc01954:	8c430000 	lw	v1,0(v0)
bfc01958:	3c02005a 	lui	v0,0x5a
bfc0195c:	3442a500 	ori	v0,v0,0xa500
bfc01960:	1462004c 	bne	v1,v0,bfc01a94 <ShowTxRxDelayMap+0x3bc>
bfc01964:	00000000 	nop
            REG32(ADDR)=PATT3;      if(REG32(ADDR)!=PATT3)          goto failc0;
bfc01968:	3c02a038 	lui	v0,0xa038
bfc0196c:	3c03a5a5 	lui	v1,0xa5a5
bfc01970:	34635a5a 	ori	v1,v1,0x5a5a
bfc01974:	ac430000 	sw	v1,0(v0)
bfc01978:	3c02a038 	lui	v0,0xa038
bfc0197c:	8c430000 	lw	v1,0(v0)
bfc01980:	3c02a5a5 	lui	v0,0xa5a5
bfc01984:	34425a5a 	ori	v0,v0,0x5a5a
bfc01988:	14620045 	bne	v1,v0,bfc01aa0 <ShowTxRxDelayMap+0x3c8>
bfc0198c:	00000000 	nop
            REG32(ADDR)=PATT4;      if(REG32(ADDR)!=PATT4)          goto failc0;
bfc01990:	3c02a038 	lui	v0,0xa038
bfc01994:	3c03aaaa 	lui	v1,0xaaaa
bfc01998:	3463aaaa 	ori	v1,v1,0xaaaa
bfc0199c:	ac430000 	sw	v1,0(v0)
bfc019a0:	3c02a038 	lui	v0,0xa038
bfc019a4:	8c430000 	lw	v1,0(v0)
bfc019a8:	3c02aaaa 	lui	v0,0xaaaa
bfc019ac:	3442aaaa 	ori	v0,v0,0xaaaa
bfc019b0:	1462003e 	bne	v1,v0,bfc01aac <ShowTxRxDelayMap+0x3d4>
bfc019b4:	00000000 	nop
	     REG32(ADDR)=PATT5;      if(REG32(ADDR)!=PATT5)          goto failc0;
bfc019b8:	3c02a038 	lui	v0,0xa038
bfc019bc:	2403ffff 	li	v1,-1
bfc019c0:	ac430000 	sw	v1,0(v0)
bfc019c4:	3c02a038 	lui	v0,0xa038
bfc019c8:	8c430000 	lw	v1,0(v0)
bfc019cc:	2402ffff 	li	v0,-1
bfc019d0:	14620039 	bne	v1,v0,bfc01ab8 <ShowTxRxDelayMap+0x3e0>
bfc019d4:	00000000 	nop
	     REG32(ADDR)=PATT6;      if(REG32(ADDR)!=PATT6)          goto failc0;
bfc019d8:	3c02a038 	lui	v0,0xa038
bfc019dc:	ac400000 	sw	zero,0(v0)
bfc019e0:	3c02a038 	lui	v0,0xa038
bfc019e4:	8c420000 	lw	v0,0(v0)
bfc019e8:	14400036 	bnez	v0,bfc01ac4 <ShowTxRxDelayMap+0x3ec>
bfc019ec:	00000000 	nop
            REG32(ADDR)=PATT7;      if(REG32(ADDR)!=PATT7)          goto failc0;
bfc019f0:	3c02a038 	lui	v0,0xa038
bfc019f4:	ac400000 	sw	zero,0(v0)
bfc019f8:	3c02a038 	lui	v0,0xa038
bfc019fc:	8c420000 	lw	v0,0(v0)
bfc01a00:	14400033 	bnez	v0,bfc01ad0 <ShowTxRxDelayMap+0x3f8>
bfc01a04:	00000000 	nop
	     REG32(ADDR)=PATT8;      if(REG32(ADDR)!=PATT8)          goto failc0;
bfc01a08:	3c02a038 	lui	v0,0xa038
bfc01a0c:	2403ffff 	li	v1,-1
bfc01a10:	ac430000 	sw	v1,0(v0)
bfc01a14:	3c02a038 	lui	v0,0xa038
bfc01a18:	8c430000 	lw	v1,0(v0)
bfc01a1c:	2402ffff 	li	v0,-1
bfc01a20:	1462002e 	bne	v1,v0,bfc01adc <ShowTxRxDelayMap+0x404>
bfc01a24:	00000000 	nop

            _memctl_debug_printf("%02x,",  rx);


	     ////////////////////////////////////Pass
	     rx_OK_total+=rx;
bfc01a28:	8fa30020 	lw	v1,32(sp)
bfc01a2c:	8fa2002c 	lw	v0,44(sp)
bfc01a30:	00621021 	addu	v0,v1,v0
bfc01a34:	afa20020 	sw	v0,32(sp)
	     rx_cnt+=1;
bfc01a38:	8fa20024 	lw	v0,36(sp)
bfc01a3c:	24420001 	addiu	v0,v0,1
bfc01a40:	afa20024 	sw	v0,36(sp)

	     if((tx==tx_bit)&&(rx==rx_bit)&&(DQS_EN_HCLK==DQS_EN_HCLK_end))//Scan over
bfc01a44:	8fa30030 	lw	v1,48(sp)
bfc01a48:	8fa2001c 	lw	v0,28(sp)
bfc01a4c:	1462004c 	bne	v1,v0,bfc01b80 <ShowTxRxDelayMap+0x4a8>
bfc01a50:	00000000 	nop
bfc01a54:	8fa3002c 	lw	v1,44(sp)
bfc01a58:	8fa20018 	lw	v0,24(sp)
bfc01a5c:	1462004b 	bne	v1,v0,bfc01b8c <ShowTxRxDelayMap+0x4b4>
bfc01a60:	00000000 	nop
bfc01a64:	8fa30028 	lw	v1,40(sp)
bfc01a68:	8fa20010 	lw	v0,16(sp)
bfc01a6c:	1462004a 	bne	v1,v0,bfc01b98 <ShowTxRxDelayMap+0x4c0>
bfc01a70:	00000000 	nop
	     {
			goto DONE;
bfc01a74:	0bf006c5 	j	bfc01b14 <ShowTxRxDelayMap+0x43c>
bfc01a78:	00000000 	nop
	     while(delay_time--);
		

		 

            REG32(ADDR)=PATT0;      if(REG32(ADDR)!=PATT0)          goto failc0;
bfc01a7c:	00000000 	nop
bfc01a80:	0bf006b8 	j	bfc01ae0 <ShowTxRxDelayMap+0x408>
bfc01a84:	00000000 	nop
            REG32(ADDR)=PATT1;      if(REG32(ADDR)!=PATT1)          goto failc0;
bfc01a88:	00000000 	nop
bfc01a8c:	0bf006b8 	j	bfc01ae0 <ShowTxRxDelayMap+0x408>
bfc01a90:	00000000 	nop
            REG32(ADDR)=PATT2;      if(REG32(ADDR)!=PATT2)          goto failc0;
bfc01a94:	00000000 	nop
bfc01a98:	0bf006b8 	j	bfc01ae0 <ShowTxRxDelayMap+0x408>
bfc01a9c:	00000000 	nop
            REG32(ADDR)=PATT3;      if(REG32(ADDR)!=PATT3)          goto failc0;
bfc01aa0:	00000000 	nop
bfc01aa4:	0bf006b8 	j	bfc01ae0 <ShowTxRxDelayMap+0x408>
bfc01aa8:	00000000 	nop
            REG32(ADDR)=PATT4;      if(REG32(ADDR)!=PATT4)          goto failc0;
bfc01aac:	00000000 	nop
bfc01ab0:	0bf006b8 	j	bfc01ae0 <ShowTxRxDelayMap+0x408>
bfc01ab4:	00000000 	nop
	     REG32(ADDR)=PATT5;      if(REG32(ADDR)!=PATT5)          goto failc0;
bfc01ab8:	00000000 	nop
bfc01abc:	0bf006b8 	j	bfc01ae0 <ShowTxRxDelayMap+0x408>
bfc01ac0:	00000000 	nop
	     REG32(ADDR)=PATT6;      if(REG32(ADDR)!=PATT6)          goto failc0;
bfc01ac4:	00000000 	nop
bfc01ac8:	0bf006b8 	j	bfc01ae0 <ShowTxRxDelayMap+0x408>
bfc01acc:	00000000 	nop
            REG32(ADDR)=PATT7;      if(REG32(ADDR)!=PATT7)          goto failc0;
bfc01ad0:	00000000 	nop
bfc01ad4:	0bf006b8 	j	bfc01ae0 <ShowTxRxDelayMap+0x408>
bfc01ad8:	00000000 	nop
	     REG32(ADDR)=PATT8;      if(REG32(ADDR)!=PATT8)          goto failc0;
bfc01adc:	00000000 	nop
			
	      
	     // rx_cnt+=1;
	     
            _memctl_debug_printf("--," );
	       if((tx==tx_bit)&&(rx==rx_bit)&&(DQS_EN_HCLK==DQS_EN_HCLK_end))//Scan over
bfc01ae0:	8fa30030 	lw	v1,48(sp)
bfc01ae4:	8fa2001c 	lw	v0,28(sp)
bfc01ae8:	1462002e 	bne	v1,v0,bfc01ba4 <ShowTxRxDelayMap+0x4cc>
bfc01aec:	00000000 	nop
bfc01af0:	8fa3002c 	lw	v1,44(sp)
bfc01af4:	8fa20018 	lw	v0,24(sp)
bfc01af8:	1462002d 	bne	v1,v0,bfc01bb0 <ShowTxRxDelayMap+0x4d8>
bfc01afc:	00000000 	nop
bfc01b00:	8fa30028 	lw	v1,40(sp)
bfc01b04:	8fa20010 	lw	v0,16(sp)
bfc01b08:	1462002c 	bne	v1,v0,bfc01bbc <ShowTxRxDelayMap+0x4e4>
bfc01b0c:	00000000 	nop
	     {
			goto DONE;
bfc01b10:	00000000 	nop
            continue;


	      //////////////////////////////////Done	
	      DONE:
		  	rx_final=( rx_OK_total)/ rx_cnt;	
bfc01b14:	8fa30020 	lw	v1,32(sp)
bfc01b18:	8fa20024 	lw	v0,36(sp)
bfc01b1c:	0062001b 	divu	zero,v1,v0
bfc01b20:	004001f4 	teq	v0,zero,0x7
bfc01b24:	00001810 	mfhi	v1
bfc01b28:	00001012 	mflo	v0
bfc01b2c:	afa20014 	sw	v0,20(sp)

			rx_final+=3;
bfc01b30:	8fa20014 	lw	v0,20(sp)
bfc01b34:	24420003 	addiu	v0,v0,3
bfc01b38:	afa20014 	sw	v0,20(sp)

			 REG32_ANDOR(DIDER1,    ~( (0x1f<<24) | (0x1f<<16) ),   (rx_final<<24) | (rx_final<<16) );
bfc01b3c:	3c02b800 	lui	v0,0xb800
bfc01b40:	34421050 	ori	v0,v0,0x1050
bfc01b44:	3c03b800 	lui	v1,0xb800
bfc01b48:	34631050 	ori	v1,v1,0x1050
bfc01b4c:	8c640000 	lw	a0,0(v1)
bfc01b50:	3c03e0e0 	lui	v1,0xe0e0
bfc01b54:	3463ffff 	ori	v1,v1,0xffff
bfc01b58:	00832024 	and	a0,a0,v1
bfc01b5c:	8fa30014 	lw	v1,20(sp)
bfc01b60:	00032e00 	sll	a1,v1,0x18
bfc01b64:	8fa30014 	lw	v1,20(sp)
bfc01b68:	00031c00 	sll	v1,v1,0x10
bfc01b6c:	00a31825 	or	v1,a1,v1
bfc01b70:	00831825 	or	v1,a0,v1
bfc01b74:	ac430000 	sw	v1,0(v0)
 		
		
	     } 		
	   #endif
		#endif
				return;	
bfc01b78:	0bf00707 	j	bfc01c1c <ShowTxRxDelayMap+0x544>
bfc01b7c:	00000000 	nop
	     {
			goto DONE;
	      }
		  

	     continue;
bfc01b80:	00000000 	nop
bfc01b84:	0bf006f0 	j	bfc01bc0 <ShowTxRxDelayMap+0x4e8>
bfc01b88:	00000000 	nop
bfc01b8c:	00000000 	nop
bfc01b90:	0bf006f0 	j	bfc01bc0 <ShowTxRxDelayMap+0x4e8>
bfc01b94:	00000000 	nop
bfc01b98:	00000000 	nop
bfc01b9c:	0bf006f0 	j	bfc01bc0 <ShowTxRxDelayMap+0x4e8>
bfc01ba0:	00000000 	nop
			goto DONE;
	      }

	     
	     
            continue;
bfc01ba4:	00000000 	nop
bfc01ba8:	0bf006f0 	j	bfc01bc0 <ShowTxRxDelayMap+0x4e8>
bfc01bac:	00000000 	nop
bfc01bb0:	00000000 	nop
bfc01bb4:	0bf006f0 	j	bfc01bc0 <ShowTxRxDelayMap+0x4e8>
bfc01bb8:	00000000 	nop
bfc01bbc:	00000000 	nop
    	 _memctl_debug_printf("%02x:",rx);
   // for (tx =0; tx<=31; tx++)
    for (tx =0; tx<=tx_bit; tx++)
    {
        _memctl_debug_printf("\nTx=%02x : ",tx );
        for (rx =0; rx<= 31; rx++)
bfc01bc0:	8fa2002c 	lw	v0,44(sp)
bfc01bc4:	24420001 	addiu	v0,v0,1
bfc01bc8:	afa2002c 	sw	v0,44(sp)
bfc01bcc:	8fa2002c 	lw	v0,44(sp)
bfc01bd0:	2c420020 	sltiu	v0,v0,32
bfc01bd4:	1440feec 	bnez	v0,bfc01788 <ShowTxRxDelayMap+0xb0>
bfc01bd8:	00000000 	nop

	_memctl_debug_printf("\n     Rx=" );
     for (rx =0; rx<=31; rx++)
    	 _memctl_debug_printf("%02x:",rx);
   // for (tx =0; tx<=31; tx++)
    for (tx =0; tx<=tx_bit; tx++)
bfc01bdc:	8fa20030 	lw	v0,48(sp)
bfc01be0:	24420001 	addiu	v0,v0,1
bfc01be4:	afa20030 	sw	v0,48(sp)
bfc01be8:	8fa30030 	lw	v1,48(sp)
bfc01bec:	8fa2001c 	lw	v0,28(sp)
bfc01bf0:	0043102b 	sltu	v0,v0,v1
bfc01bf4:	1040fee1 	beqz	v0,bfc0177c <ShowTxRxDelayMap+0xa4>
bfc01bf8:	00000000 	nop

  volatile unsigned int i;
  
 unsigned int DQS_EN_HCLK_end=1;

    for (DQS_EN_HCLK =0; DQS_EN_HCLK<=DQS_EN_HCLK_end; DQS_EN_HCLK++)
bfc01bfc:	8fa20028 	lw	v0,40(sp)
bfc01c00:	24420001 	addiu	v0,v0,1
bfc01c04:	afa20028 	sw	v0,40(sp)
bfc01c08:	8fa30028 	lw	v1,40(sp)
bfc01c0c:	8fa20010 	lw	v0,16(sp)
bfc01c10:	0043102b 	sltu	v0,v0,v1
bfc01c14:	1040febd 	beqz	v0,bfc0170c <ShowTxRxDelayMap+0x34>
bfc01c18:	00000000 	nop
				return;	

        }
    }
   }
}
bfc01c1c:	8fbf0044 	lw	ra,68(sp)
bfc01c20:	27bd0048 	addiu	sp,sp,72
bfc01c24:	03e00008 	jr	ra
bfc01c28:	00000000 	nop

bfc01c2c <uart_rx8b_val>:
#endif


//==============================================================
unsigned int uart_rx8b_val()  //user input 
{
bfc01c2c:	27bdffd8 	addiu	sp,sp,-40
bfc01c30:	afbf0024 	sw	ra,36(sp)
	unsigned int val=0;
bfc01c34:	afa00018 	sw	zero,24(sp)
	unsigned char ch;
	int i;

  for(i=28; i>=0; i=i-4)
bfc01c38:	2402001c 	li	v0,28
bfc01c3c:	afa20010 	sw	v0,16(sp)
bfc01c40:	0bf00734 	j	bfc01cd0 <uart_rx8b_val+0xa4>
bfc01c44:	00000000 	nop
  {
	ch=uart_inc();
bfc01c48:	0ff001ff 	jal	bfc007fc <uart_inc>
bfc01c4c:	00000000 	nop
bfc01c50:	a3a20014 	sb	v0,20(sp)
	_memctl_debug_printf("%c",ch);
	ch= (ch<':')? ch-'0'  :   (ch<'Z') ?  ch-'A'+10 : ch-'a'+10;
bfc01c54:	93a20014 	lbu	v0,20(sp)
bfc01c58:	2c42003a 	sltiu	v0,v0,58
bfc01c5c:	10400006 	beqz	v0,bfc01c78 <uart_rx8b_val+0x4c>
bfc01c60:	00000000 	nop
bfc01c64:	93a20014 	lbu	v0,20(sp)
bfc01c68:	2442ffd0 	addiu	v0,v0,-48
bfc01c6c:	304200ff 	andi	v0,v0,0xff
bfc01c70:	0bf0072a 	j	bfc01ca8 <uart_rx8b_val+0x7c>
bfc01c74:	00000000 	nop
bfc01c78:	93a20014 	lbu	v0,20(sp)
bfc01c7c:	2c42005a 	sltiu	v0,v0,90
bfc01c80:	10400006 	beqz	v0,bfc01c9c <uart_rx8b_val+0x70>
bfc01c84:	00000000 	nop
bfc01c88:	93a20014 	lbu	v0,20(sp)
bfc01c8c:	2442ffc9 	addiu	v0,v0,-55
bfc01c90:	304200ff 	andi	v0,v0,0xff
bfc01c94:	0bf0072a 	j	bfc01ca8 <uart_rx8b_val+0x7c>
bfc01c98:	00000000 	nop
bfc01c9c:	93a20014 	lbu	v0,20(sp)
bfc01ca0:	2442ffa9 	addiu	v0,v0,-87
bfc01ca4:	304200ff 	andi	v0,v0,0xff
bfc01ca8:	a3a20014 	sb	v0,20(sp)
	val+=ch<<i;
bfc01cac:	93a30014 	lbu	v1,20(sp)
bfc01cb0:	8fa20010 	lw	v0,16(sp)
bfc01cb4:	00431004 	sllv	v0,v1,v0
bfc01cb8:	8fa30018 	lw	v1,24(sp)
bfc01cbc:	00621021 	addu	v0,v1,v0
bfc01cc0:	afa20018 	sw	v0,24(sp)
{
	unsigned int val=0;
	unsigned char ch;
	int i;

  for(i=28; i>=0; i=i-4)
bfc01cc4:	8fa20010 	lw	v0,16(sp)
bfc01cc8:	2442fffc 	addiu	v0,v0,-4
bfc01ccc:	afa20010 	sw	v0,16(sp)
bfc01cd0:	8fa20010 	lw	v0,16(sp)
bfc01cd4:	0441ffdc 	bgez	v0,bfc01c48 <uart_rx8b_val+0x1c>
bfc01cd8:	00000000 	nop
	_memctl_debug_printf("%c",ch);
	ch= (ch<':')? ch-'0'  :   (ch<'Z') ?  ch-'A'+10 : ch-'a'+10;
	val+=ch<<i;
	
  }	
	return val;
bfc01cdc:	8fa20018 	lw	v0,24(sp)
}
bfc01ce0:	8fbf0024 	lw	ra,36(sp)
bfc01ce4:	27bd0028 	addiu	sp,sp,40
bfc01ce8:	03e00008 	jr	ra
bfc01cec:	00000000 	nop

bfc01cf0 <uart_rx4b_val>:
//==============================================================
unsigned int uart_rx4b_val()    //transfer binary
{
bfc01cf0:	27bdffe0 	addiu	sp,sp,-32
bfc01cf4:	afbf001c 	sw	ra,28(sp)
	unsigned int val;
	unsigned char ch;
	
	ch=uart_inc();
bfc01cf8:	0ff001ff 	jal	bfc007fc <uart_inc>
bfc01cfc:	00000000 	nop
bfc01d00:	a3a20010 	sb	v0,16(sp)
	val=ch<<24;
bfc01d04:	93a20010 	lbu	v0,16(sp)
bfc01d08:	00021600 	sll	v0,v0,0x18
bfc01d0c:	afa20014 	sw	v0,20(sp)
	
	ch=uart_inc();
bfc01d10:	0ff001ff 	jal	bfc007fc <uart_inc>
bfc01d14:	00000000 	nop
bfc01d18:	a3a20010 	sb	v0,16(sp)
	val+=ch<<16;
bfc01d1c:	93a20010 	lbu	v0,16(sp)
bfc01d20:	00021400 	sll	v0,v0,0x10
bfc01d24:	8fa30014 	lw	v1,20(sp)
bfc01d28:	00621021 	addu	v0,v1,v0
bfc01d2c:	afa20014 	sw	v0,20(sp)

	ch=uart_inc();
bfc01d30:	0ff001ff 	jal	bfc007fc <uart_inc>
bfc01d34:	00000000 	nop
bfc01d38:	a3a20010 	sb	v0,16(sp)
	val+=ch<<8;
bfc01d3c:	93a20010 	lbu	v0,16(sp)
bfc01d40:	00021200 	sll	v0,v0,0x8
bfc01d44:	8fa30014 	lw	v1,20(sp)
bfc01d48:	00621021 	addu	v0,v1,v0
bfc01d4c:	afa20014 	sw	v0,20(sp)

	ch=uart_inc();
bfc01d50:	0ff001ff 	jal	bfc007fc <uart_inc>
bfc01d54:	00000000 	nop
bfc01d58:	a3a20010 	sb	v0,16(sp)
	val+=ch;
bfc01d5c:	93a20010 	lbu	v0,16(sp)
bfc01d60:	8fa30014 	lw	v1,20(sp)
bfc01d64:	00621021 	addu	v0,v1,v0
bfc01d68:	afa20014 	sw	v0,20(sp)
	
	return val;
bfc01d6c:	8fa20014 	lw	v0,20(sp)
}
bfc01d70:	8fbf001c 	lw	ra,28(sp)
bfc01d74:	27bd0020 	addiu	sp,sp,32
bfc01d78:	03e00008 	jr	ra
bfc01d7c:	00000000 	nop

bfc01d80 <xmodem_receive>:
#define putc(x)	Put_UartData(x)
#define getc_timeout  Get_UartData_timeout


int xmodem_receive()
{
bfc01d80:	27bdffc0 	addiu	sp,sp,-64
bfc01d84:	afbf003c 	sw	ra,60(sp)
	#define CAN				0x18	/* cancel */
	#define CRC				0x43	/* crc acknowledge */

	#define RETRY			(20)
	
	volatile unsigned int state = XMODEM_RX_READY;
bfc01d88:	24020001 	li	v0,1
bfc01d8c:	afa2002c 	sw	v0,44(sp)

	unsigned int retry = RETRY;
bfc01d90:	24020014 	li	v0,20
bfc01d94:	afa20028 	sw	v0,40(sp)
	unsigned int timeout=50000;
bfc01d98:	3402c350 	li	v0,0xc350
bfc01d9c:	afa20024 	sw	v0,36(sp)
	unsigned int i;
	unsigned char  c;
	
	#define packet_size  128
	unsigned char  block_index = 1;
bfc01da0:	24020001 	li	v0,1
bfc01da4:	a3a2001c 	sb	v0,28(sp)

	unsigned char head1,head2,head_csum;
	unsigned char csum;
	unsigned char *ptr=JUMPADDR;
bfc01da8:	3c02a010 	lui	v0,0xa010
bfc01dac:	afa20014 	sw	v0,20(sp)
		return false;
#endif	

	
	/* received buffer size to zero */
	unsigned int size = 0;
bfc01db0:	afa00010 	sw	zero,16(sp)
	
	while(retry > 0)
bfc01db4:	0bf00850 	j	bfc02140 <xmodem_receive+0x3c0>
bfc01db8:	00000000 	nop
	{

		switch(state)
bfc01dbc:	8fa2002c 	lw	v0,44(sp)
bfc01dc0:	2c430006 	sltiu	v1,v0,6
bfc01dc4:	106000de 	beqz	v1,bfc02140 <xmodem_receive+0x3c0>
bfc01dc8:	00000000 	nop
bfc01dcc:	00021880 	sll	v1,v0,0x2
bfc01dd0:	3c02bfc1 	lui	v0,0xbfc1
bfc01dd4:	2442ad54 	addiu	v0,v0,-21164
bfc01dd8:	00621021 	addu	v0,v1,v0
bfc01ddc:	8c420000 	lw	v0,0(v0)
bfc01de0:	00400008 	jr	v0
bfc01de4:	00000000 	nop
		{	
			case XMODEM_RX_READY:				
				putc(NAK);	
bfc01de8:	24040015 	li	a0,21
bfc01dec:	0ff001e4 	jal	bfc00790 <uart_outc>
bfc01df0:	00000000 	nop
				if(getc_timeout(&c, timeout))
bfc01df4:	27a20030 	addiu	v0,sp,48
bfc01df8:	00402021 	move	a0,v0
bfc01dfc:	8fa50024 	lw	a1,36(sp)
bfc01e00:	0ff00243 	jal	bfc0090c <Get_UartData_timeout>
bfc01e04:	00000000 	nop
bfc01e08:	104000c6 	beqz	v0,bfc02124 <xmodem_receive+0x3a4>
bfc01e0c:	00000000 	nop
				{
					if(c == SOH)
bfc01e10:	93a30030 	lbu	v1,48(sp)
bfc01e14:	24020001 	li	v0,1
bfc01e18:	14620005 	bne	v1,v0,bfc01e30 <xmodem_receive+0xb0>
bfc01e1c:	00000000 	nop
					{	state = XMODEM_RX_PACKET;
bfc01e20:	24020003 	li	v0,3
bfc01e24:	afa2002c 	sw	v0,44(sp)
					{	putc(CAN);	putc(CAN);
						putc(CAN);	putc(CAN);						
						return 0;
					}
				}	
				break;
bfc01e28:	0bf00850 	j	bfc02140 <xmodem_receive+0x3c0>
bfc01e2c:	00000000 	nop
				if(getc_timeout(&c, timeout))
				{
					if(c == SOH)
					{	state = XMODEM_RX_PACKET;
					}			
					else if(c == 3)  //Ctrl+C
bfc01e30:	93a30030 	lbu	v1,48(sp)
bfc01e34:	24020003 	li	v0,3
bfc01e38:	146200bd 	bne	v1,v0,bfc02130 <xmodem_receive+0x3b0>
bfc01e3c:	00000000 	nop
					{	putc(CAN);	putc(CAN);
bfc01e40:	24040018 	li	a0,24
bfc01e44:	0ff001e4 	jal	bfc00790 <uart_outc>
bfc01e48:	00000000 	nop
bfc01e4c:	24040018 	li	a0,24
bfc01e50:	0ff001e4 	jal	bfc00790 <uart_outc>
bfc01e54:	00000000 	nop
						putc(CAN);	putc(CAN);						
bfc01e58:	24040018 	li	a0,24
bfc01e5c:	0ff001e4 	jal	bfc00790 <uart_outc>
bfc01e60:	00000000 	nop
bfc01e64:	24040018 	li	a0,24
bfc01e68:	0ff001e4 	jal	bfc00790 <uart_outc>
bfc01e6c:	00000000 	nop
						return 0;
bfc01e70:	00001021 	move	v0,zero
bfc01e74:	0bf00860 	j	bfc02180 <xmodem_receive+0x400>
bfc01e78:	00000000 	nop
					}
				}	
				break;
				
			case XMODEM_WAIT_HEADER:			
				if(getc_timeout(&c, timeout))
bfc01e7c:	27a20030 	addiu	v0,sp,48
bfc01e80:	00402021 	move	a0,v0
bfc01e84:	8fa50024 	lw	a1,36(sp)
bfc01e88:	0ff00243 	jal	bfc0090c <Get_UartData_timeout>
bfc01e8c:	00000000 	nop
bfc01e90:	10400019 	beqz	v0,bfc01ef8 <xmodem_receive+0x178>
bfc01e94:	00000000 	nop
				{	if(c == SOH)
bfc01e98:	93a30030 	lbu	v1,48(sp)
bfc01e9c:	24020001 	li	v0,1
bfc01ea0:	14620005 	bne	v1,v0,bfc01eb8 <xmodem_receive+0x138>
bfc01ea4:	00000000 	nop
					{	state = XMODEM_RX_PACKET;						
bfc01ea8:	24020003 	li	v0,3
bfc01eac:	afa2002c 	sw	v0,44(sp)
				}
				else
				{	/* timed out, try again */
					retry--;
				}
				break;
bfc01eb0:	0bf00850 	j	bfc02140 <xmodem_receive+0x3c0>
bfc01eb4:	00000000 	nop
			case XMODEM_WAIT_HEADER:			
				if(getc_timeout(&c, timeout))
				{	if(c == SOH)
					{	state = XMODEM_RX_PACKET;						
					}				
					else if(c == CAN)
bfc01eb8:	93a30030 	lbu	v1,48(sp)
bfc01ebc:	24020018 	li	v0,24
bfc01ec0:	14620005 	bne	v1,v0,bfc01ed8 <xmodem_receive+0x158>
bfc01ec4:	00000000 	nop
					{	state = XMODEM_CANCEL;					
bfc01ec8:	24020004 	li	v0,4
bfc01ecc:	afa2002c 	sw	v0,44(sp)
				}
				else
				{	/* timed out, try again */
					retry--;
				}
				break;
bfc01ed0:	0bf00850 	j	bfc02140 <xmodem_receive+0x3c0>
bfc01ed4:	00000000 	nop
					{	state = XMODEM_RX_PACKET;						
					}				
					else if(c == CAN)
					{	state = XMODEM_CANCEL;					
					}
					else if(c == EOT)
bfc01ed8:	93a30030 	lbu	v1,48(sp)
bfc01edc:	24020004 	li	v0,4
bfc01ee0:	14620096 	bne	v1,v0,bfc0213c <xmodem_receive+0x3bc>
bfc01ee4:	00000000 	nop
					{	state = XMODEM_EOT;
bfc01ee8:	24020005 	li	v0,5
bfc01eec:	afa2002c 	sw	v0,44(sp)
				}
				else
				{	/* timed out, try again */
					retry--;
				}
				break;
bfc01ef0:	0bf00850 	j	bfc02140 <xmodem_receive+0x3c0>
bfc01ef4:	00000000 	nop
					{	state = XMODEM_EOT;
					}
				}
				else
				{	/* timed out, try again */
					retry--;
bfc01ef8:	8fa20028 	lw	v0,40(sp)
bfc01efc:	2442ffff 	addiu	v0,v0,-1
bfc01f00:	afa20028 	sw	v0,40(sp)
				}
				break;
bfc01f04:	0bf00850 	j	bfc02140 <xmodem_receive+0x3c0>
bfc01f08:	00000000 	nop
				
			case XMODEM_RX_PACKET:		
				if(getc_timeout(&c, timeout))
bfc01f0c:	27a20030 	addiu	v0,sp,48
bfc01f10:	00402021 	move	a0,v0
bfc01f14:	8fa50024 	lw	a1,36(sp)
bfc01f18:	0ff00243 	jal	bfc0090c <Get_UartData_timeout>
bfc01f1c:	00000000 	nop
bfc01f20:	1040005f 	beqz	v0,bfc020a0 <xmodem_receive+0x320>
bfc01f24:	00000000 	nop
				{	xprintf("c1=%x\n", c);
					head1=c;
bfc01f28:	93a20030 	lbu	v0,48(sp)
bfc01f2c:	a3a2001b 	sb	v0,27(sp)
				}
				else goto failx;
				
				if(getc_timeout(&c, timeout))
bfc01f30:	27a20030 	addiu	v0,sp,48
bfc01f34:	00402021 	move	a0,v0
bfc01f38:	8fa50024 	lw	a1,36(sp)
bfc01f3c:	0ff00243 	jal	bfc0090c <Get_UartData_timeout>
bfc01f40:	00000000 	nop
bfc01f44:	10400059 	beqz	v0,bfc020ac <xmodem_receive+0x32c>
bfc01f48:	00000000 	nop
				{	xprintf("c2=%x\n", c);
					head2=c;				
bfc01f4c:	93a20030 	lbu	v0,48(sp)
bfc01f50:	a3a2001a 	sb	v0,26(sp)
				}
				else goto failx;

				csum=0;
bfc01f54:	a3a00018 	sb	zero,24(sp)
				for(i = 0; i < packet_size  ; i++)
bfc01f58:	afa00020 	sw	zero,32(sp)
bfc01f5c:	0bf007ec 	j	bfc01fb0 <xmodem_receive+0x230>
bfc01f60:	00000000 	nop
				{
					if(getc_timeout(&c, timeout))
bfc01f64:	27a20030 	addiu	v0,sp,48
bfc01f68:	00402021 	move	a0,v0
bfc01f6c:	8fa50024 	lw	a1,36(sp)
bfc01f70:	0ff00243 	jal	bfc0090c <Get_UartData_timeout>
bfc01f74:	00000000 	nop
bfc01f78:	1040004f 	beqz	v0,bfc020b8 <xmodem_receive+0x338>
bfc01f7c:	00000000 	nop
					{	xprintf("c3=%x\n", c);
						ptr[i] = c;
bfc01f80:	8fa30014 	lw	v1,20(sp)
bfc01f84:	8fa20020 	lw	v0,32(sp)
bfc01f88:	00621021 	addu	v0,v1,v0
bfc01f8c:	93a30030 	lbu	v1,48(sp)
bfc01f90:	a0430000 	sb	v1,0(v0)
						csum+=c;
bfc01f94:	93a30030 	lbu	v1,48(sp)
bfc01f98:	93a20018 	lbu	v0,24(sp)
bfc01f9c:	00621021 	addu	v0,v1,v0
bfc01fa0:	a3a20018 	sb	v0,24(sp)
					head2=c;				
				}
				else goto failx;

				csum=0;
				for(i = 0; i < packet_size  ; i++)
bfc01fa4:	8fa20020 	lw	v0,32(sp)
bfc01fa8:	24420001 	addiu	v0,v0,1
bfc01fac:	afa20020 	sw	v0,32(sp)
bfc01fb0:	8fa20020 	lw	v0,32(sp)
bfc01fb4:	2c420080 	sltiu	v0,v0,128
bfc01fb8:	1440ffea 	bnez	v0,bfc01f64 <xmodem_receive+0x1e4>
bfc01fbc:	00000000 	nop

					}
					else goto failx;
				}

				if(getc_timeout(&c, timeout))
bfc01fc0:	27a20030 	addiu	v0,sp,48
bfc01fc4:	00402021 	move	a0,v0
bfc01fc8:	8fa50024 	lw	a1,36(sp)
bfc01fcc:	0ff00243 	jal	bfc0090c <Get_UartData_timeout>
bfc01fd0:	00000000 	nop
bfc01fd4:	1040003b 	beqz	v0,bfc020c4 <xmodem_receive+0x344>
bfc01fd8:	00000000 	nop
				{	xprintf("c4=%x\n", c);
					head_csum=c;	
bfc01fdc:	93a20030 	lbu	v0,48(sp)
bfc01fe0:	a3a20019 	sb	v0,25(sp)
				}
				else goto failx;
		
				
				state = XMODEM_WAIT_HEADER;
bfc01fe4:	24020002 	li	v0,2
bfc01fe8:	afa2002c 	sw	v0,44(sp)
				
				/* packet was too small, retry */
				if(i < (packet_size))
bfc01fec:	8fa20020 	lw	v0,32(sp)
bfc01ff0:	2c420080 	sltiu	v0,v0,128
bfc01ff4:	14400036 	bnez	v0,bfc020d0 <xmodem_receive+0x350>
bfc01ff8:	00000000 	nop
				{	goto failx;
				}

				/* check validity of packet */
				if( (head1 == (255-head2)) && (head_csum==csum) )
bfc01ffc:	93a3001b 	lbu	v1,27(sp)
bfc02000:	93a2001a 	lbu	v0,26(sp)
bfc02004:	240400ff 	li	a0,255
bfc02008:	00821023 	subu	v0,a0,v0
bfc0200c:	14620031 	bne	v1,v0,bfc020d4 <xmodem_receive+0x354>
bfc02010:	00000000 	nop
bfc02014:	93a30019 	lbu	v1,25(sp)
bfc02018:	93a20018 	lbu	v0,24(sp)
bfc0201c:	1462002d 	bne	v1,v0,bfc020d4 <xmodem_receive+0x354>
bfc02020:	00000000 	nop
				{	xprintf("hok\n");
					/* is this the packet we were waiting for? */
					if(head1== block_index)
bfc02024:	93a3001b 	lbu	v1,27(sp)
bfc02028:	93a2001c 	lbu	v0,28(sp)
bfc0202c:	14620011 	bne	v1,v0,bfc02074 <xmodem_receive+0x2f4>
bfc02030:	00000000 	nop
					{	xprintf("aok\n");
						ptr+=packet_size;
bfc02034:	8fa20014 	lw	v0,20(sp)
bfc02038:	24420080 	addiu	v0,v0,128
bfc0203c:	afa20014 	sw	v0,20(sp)
						size += packet_size;						
bfc02040:	8fa20010 	lw	v0,16(sp)
bfc02044:	24420080 	addiu	v0,v0,128
bfc02048:	afa20010 	sw	v0,16(sp)
						block_index++;
bfc0204c:	93a2001c 	lbu	v0,28(sp)
bfc02050:	24420001 	addiu	v0,v0,1
bfc02054:	a3a2001c 	sb	v0,28(sp)
						retry = RETRY;
bfc02058:	24020014 	li	v0,20
bfc0205c:	afa20028 	sw	v0,40(sp)
						putc(ACK);
bfc02060:	24040006 	li	a0,6
bfc02064:	0ff001e4 	jal	bfc00790 <uart_outc>
bfc02068:	00000000 	nop
						continue;
bfc0206c:	0bf00850 	j	bfc02140 <xmodem_receive+0x3c0>
bfc02070:	00000000 	nop
					}
					else if(head1 == (unsigned char )(block_index-1))
bfc02074:	93a2001c 	lbu	v0,28(sp)
bfc02078:	2442ffff 	addiu	v0,v0,-1
bfc0207c:	304200ff 	andi	v0,v0,0xff
bfc02080:	93a3001b 	lbu	v1,27(sp)
bfc02084:	14620013 	bne	v1,v0,bfc020d4 <xmodem_receive+0x354>
bfc02088:	00000000 	nop
					{
						/* this is a retransmission of the last packet */
						putc(ACK);
bfc0208c:	24040006 	li	a0,6
bfc02090:	0ff001e4 	jal	bfc00790 <uart_outc>
bfc02094:	00000000 	nop
						 continue;
bfc02098:	0bf00850 	j	bfc02140 <xmodem_receive+0x3c0>
bfc0209c:	00000000 	nop
			case XMODEM_RX_PACKET:		
				if(getc_timeout(&c, timeout))
				{	xprintf("c1=%x\n", c);
					head1=c;
				}
				else goto failx;
bfc020a0:	00000000 	nop
bfc020a4:	0bf00835 	j	bfc020d4 <xmodem_receive+0x354>
bfc020a8:	00000000 	nop
				
				if(getc_timeout(&c, timeout))
				{	xprintf("c2=%x\n", c);
					head2=c;				
				}
				else goto failx;
bfc020ac:	00000000 	nop
bfc020b0:	0bf00835 	j	bfc020d4 <xmodem_receive+0x354>
bfc020b4:	00000000 	nop
					{	xprintf("c3=%x\n", c);
						ptr[i] = c;
						csum+=c;

					}
					else goto failx;
bfc020b8:	00000000 	nop
bfc020bc:	0bf00835 	j	bfc020d4 <xmodem_receive+0x354>
bfc020c0:	00000000 	nop

				if(getc_timeout(&c, timeout))
				{	xprintf("c4=%x\n", c);
					head_csum=c;	
				}
				else goto failx;
bfc020c4:	00000000 	nop
bfc020c8:	0bf00835 	j	bfc020d4 <xmodem_receive+0x354>
bfc020cc:	00000000 	nop
				
				state = XMODEM_WAIT_HEADER;
				
				/* packet was too small, retry */
				if(i < (packet_size))
				{	goto failx;
bfc020d0:	00000000 	nop
						putc(ACK);
						 continue;
					}
				}	
failx:				
				retry--;
bfc020d4:	8fa20028 	lw	v0,40(sp)
bfc020d8:	2442ffff 	addiu	v0,v0,-1
bfc020dc:	afa20028 	sw	v0,40(sp)
				putc(NAK);
bfc020e0:	24040015 	li	a0,21
bfc020e4:	0ff001e4 	jal	bfc00790 <uart_outc>
bfc020e8:	00000000 	nop
				break;
bfc020ec:	0bf00850 	j	bfc02140 <xmodem_receive+0x3c0>
bfc020f0:	00000000 	nop
				
			case XMODEM_CANCEL:
				putc(ACK);				
bfc020f4:	24040006 	li	a0,6
bfc020f8:	0ff001e4 	jal	bfc00790 <uart_outc>
bfc020fc:	00000000 	nop
				return 0;
bfc02100:	00001021 	move	v0,zero
bfc02104:	0bf00860 	j	bfc02180 <xmodem_receive+0x400>
bfc02108:	00000000 	nop
				
			case XMODEM_EOT:
				putc(ACK);
bfc0210c:	24040006 	li	a0,6
bfc02110:	0ff001e4 	jal	bfc00790 <uart_outc>
bfc02114:	00000000 	nop
				//mdelay(100);				
				return size;
bfc02118:	8fa20010 	lw	v0,16(sp)
bfc0211c:	0bf00860 	j	bfc02180 <xmodem_receive+0x400>
bfc02120:	00000000 	nop
					{	putc(CAN);	putc(CAN);
						putc(CAN);	putc(CAN);						
						return 0;
					}
				}	
				break;
bfc02124:	00000000 	nop
bfc02128:	0bf00850 	j	bfc02140 <xmodem_receive+0x3c0>
bfc0212c:	00000000 	nop
bfc02130:	00000000 	nop
bfc02134:	0bf00850 	j	bfc02140 <xmodem_receive+0x3c0>
bfc02138:	00000000 	nop
				}
				else
				{	/* timed out, try again */
					retry--;
				}
				break;
bfc0213c:	00000000 	nop

	
	/* received buffer size to zero */
	unsigned int size = 0;
	
	while(retry > 0)
bfc02140:	8fa20028 	lw	v0,40(sp)
bfc02144:	1440ff1d 	bnez	v0,bfc01dbc <xmodem_receive+0x3c>
bfc02148:	00000000 	nop
				break;
		}
	}
	
	/* retry too much, fail */
	putc(CAN);	putc(CAN);
bfc0214c:	24040018 	li	a0,24
bfc02150:	0ff001e4 	jal	bfc00790 <uart_outc>
bfc02154:	00000000 	nop
bfc02158:	24040018 	li	a0,24
bfc0215c:	0ff001e4 	jal	bfc00790 <uart_outc>
bfc02160:	00000000 	nop
	putc(CAN);	putc(CAN);
bfc02164:	24040018 	li	a0,24
bfc02168:	0ff001e4 	jal	bfc00790 <uart_outc>
bfc0216c:	00000000 	nop
bfc02170:	24040018 	li	a0,24
bfc02174:	0ff001e4 	jal	bfc00790 <uart_outc>
bfc02178:	00000000 	nop
	
	
	return 0;
bfc0217c:	00001021 	move	v0,zero
}
bfc02180:	8fbf003c 	lw	ra,60(sp)
bfc02184:	27bd0040 	addiu	sp,sp,64
bfc02188:	03e00008 	jr	ra
bfc0218c:	00000000 	nop

bfc02190 <_DTR_suggestion>:
void _DTR_suggestion(unsigned int *sug_dtr, unsigned int refi_ns, unsigned int rp_ns,\
			     unsigned int rcd_ns, unsigned int ras_ns, unsigned int rfc_ns, \
			     unsigned int wr_ns , unsigned int rrd_ns, unsigned int fawg_ns,\
			     unsigned int wtr_ns, unsigned int rtp_ns, unsigned int cas_10_ns, \
			     unsigned int mem_freq)
{
bfc02190:	27bdffa8 	addiu	sp,sp,-88
bfc02194:	afbf0054 	sw	ra,84(sp)
bfc02198:	afa40058 	sw	a0,88(sp)
bfc0219c:	afa5005c 	sw	a1,92(sp)
bfc021a0:	afa60060 	sw	a2,96(sp)
bfc021a4:	afa70064 	sw	a3,100(sp)
	unsigned int rp, rcd, ras, rfc, wr, wtr, rtp, rrd, fawg;
	unsigned int refi_unit, refi, refi_clks, cas;
	unsigned int dtr_value;
	unsigned int clk_10_ns, rowcnt;
	
	dtr_value = 0;
bfc021a8:	afa00018 	sw	zero,24(sp)

	

	clk_10_ns = (1000 * 10) / mem_freq;
bfc021ac:	24032710 	li	v1,10000
bfc021b0:	8fa20088 	lw	v0,136(sp)
bfc021b4:	0062001b 	divu	zero,v1,v0
bfc021b8:	004001f4 	teq	v0,zero,0x7
bfc021bc:	00001810 	mfhi	v1
bfc021c0:	00001012 	mflo	v0
bfc021c4:	afa20014 	sw	v0,20(sp)

	/*count for CAS*/
	cas = (cas_10_ns*10)/clk_10_ns;//400/40
bfc021c8:	8fa20084 	lw	v0,132(sp)
bfc021cc:	00021040 	sll	v0,v0,0x1
bfc021d0:	00021880 	sll	v1,v0,0x2
bfc021d4:	00431821 	addu	v1,v0,v1
bfc021d8:	8fa20014 	lw	v0,20(sp)
bfc021dc:	0062001b 	divu	zero,v1,v0
bfc021e0:	004001f4 	teq	v0,zero,0x7
bfc021e4:	00001810 	mfhi	v1
bfc021e8:	00001012 	mflo	v0
bfc021ec:	afa2001c 	sw	v0,28(sp)
	if(cas <= 20){/* Cas = 2*/
bfc021f0:	8fa2001c 	lw	v0,28(sp)
bfc021f4:	2c420015 	sltiu	v0,v0,21
bfc021f8:	10400005 	beqz	v0,bfc02210 <_DTR_suggestion+0x80>
bfc021fc:	00000000 	nop
		cas = 1;
bfc02200:	24020001 	li	v0,1
bfc02204:	afa2001c 	sw	v0,28(sp)
bfc02208:	0bf0089f 	j	bfc0227c <_DTR_suggestion+0xec>
bfc0220c:	00000000 	nop
	}
	else if(cas <= 25){ /* Cas = 2.5*/
bfc02210:	8fa2001c 	lw	v0,28(sp)
bfc02214:	2c42001a 	sltiu	v0,v0,26
bfc02218:	10400004 	beqz	v0,bfc0222c <_DTR_suggestion+0x9c>
bfc0221c:	00000000 	nop
		cas = 0;
bfc02220:	afa0001c 	sw	zero,28(sp)
bfc02224:	0bf0089f 	j	bfc0227c <_DTR_suggestion+0xec>
bfc02228:	00000000 	nop
	}else{
		cas = (cas_10_ns/clk_10_ns);
bfc0222c:	8fa30084 	lw	v1,132(sp)
bfc02230:	8fa20014 	lw	v0,20(sp)
bfc02234:	0062001b 	divu	zero,v1,v0
bfc02238:	004001f4 	teq	v0,zero,0x7
bfc0223c:	00001810 	mfhi	v1
bfc02240:	00001012 	mflo	v0
bfc02244:	afa2001c 	sw	v0,28(sp)

		#if 1
		if((cas_10_ns%clk_10_ns) != 0)
bfc02248:	8fa30084 	lw	v1,132(sp)
bfc0224c:	8fa20014 	lw	v0,20(sp)
bfc02250:	0062001b 	divu	zero,v1,v0
bfc02254:	004001f4 	teq	v0,zero,0x7
bfc02258:	00001010 	mfhi	v0
bfc0225c:	10400004 	beqz	v0,bfc02270 <_DTR_suggestion+0xe0>
bfc02260:	00000000 	nop
			cas++;
bfc02264:	8fa2001c 	lw	v0,28(sp)
bfc02268:	24420001 	addiu	v0,v0,1
bfc0226c:	afa2001c 	sw	v0,28(sp)
		#else
		//if(((cas_10_ns%clk_10_ns) != 0)&&(mem_freq>=400))//RTL8198C
			//cas++;
		#endif

		cas--;
bfc02270:	8fa2001c 	lw	v0,28(sp)
bfc02274:	2442ffff 	addiu	v0,v0,-1
bfc02278:	afa2001c 	sw	v0,28(sp)
	}

	#if 1 //JSW add ,test purpose
	if((mem_freq <=400) )
bfc0227c:	8fa20088 	lw	v0,136(sp)
bfc02280:	2c420191 	sltiu	v0,v0,401
bfc02284:	10400005 	beqz	v0,bfc0229c <_DTR_suggestion+0x10c>
bfc02288:	00000000 	nop
	{
	//if((mem_freq <=450) )
		cas=4; //CL=5 , "0"= 1 unit ,good
bfc0228c:	24020004 	li	v0,4
bfc02290:	afa2001c 	sw	v0,28(sp)
bfc02294:	0bf008cf 	j	bfc0233c <_DTR_suggestion+0x1ac>
bfc02298:	00000000 	nop
		//cas=5; //CL=6 , "0"= 1 unit  , bad
		//cas=6; //CL=7 , "0"= 1 unit  , bad
		//cas=7; //CL=8 , "0"= 1 unit  , bad
	}
	else if((mem_freq <=533) )
bfc0229c:	8fa20088 	lw	v0,136(sp)
bfc022a0:	2c420216 	sltiu	v0,v0,534
bfc022a4:	1040000f 	beqz	v0,bfc022e4 <_DTR_suggestion+0x154>
bfc022a8:	00000000 	nop
	{
		if(memctlc_is_DDR3())
bfc022ac:	0ff00caf 	jal	bfc032bc <memctlc_is_DDR3>
bfc022b0:	00000000 	nop
bfc022b4:	10400003 	beqz	v0,bfc022c4 <_DTR_suggestion+0x134>
bfc022b8:	00000000 	nop
			cas=6;  //CL=7 , "0"= 1 unit 
bfc022bc:	24020006 	li	v0,6
bfc022c0:	afa2001c 	sw	v0,28(sp)

		if(memctlc_is_DDR2())
bfc022c4:	0ff00cbd 	jal	bfc032f4 <memctlc_is_DDR2>
bfc022c8:	00000000 	nop
bfc022cc:	1040001b 	beqz	v0,bfc0233c <_DTR_suggestion+0x1ac>
bfc022d0:	00000000 	nop
			cas=5;  //CL=6 , "0"= 1 unit  , OK
bfc022d4:	24020005 	li	v0,5
bfc022d8:	afa2001c 	sw	v0,28(sp)
bfc022dc:	0bf008cf 	j	bfc0233c <_DTR_suggestion+0x1ac>
bfc022e0:	00000000 	nop
			//cas=6;  //CL=7 , "0"= 1 unit ,fail
		
		//cas=7;  //CL=8 , "0"= 1 unit 	
	}
	else if((mem_freq <=600) )
bfc022e4:	8fa20088 	lw	v0,136(sp)
bfc022e8:	2c420259 	sltiu	v0,v0,601
bfc022ec:	10400005 	beqz	v0,bfc02304 <_DTR_suggestion+0x174>
bfc022f0:	00000000 	nop
	{
		cas=7;  //CL=8 , "0"= 1 unit 	
bfc022f4:	24020007 	li	v0,7
bfc022f8:	afa2001c 	sw	v0,28(sp)
bfc022fc:	0bf008cf 	j	bfc0233c <_DTR_suggestion+0x1ac>
bfc02300:	00000000 	nop
		//cas=8;  //CL=9 , "0"= 1 unit 
		//cas=9;  //CL=10 , "0"= 1 unit 
	}
	else if((mem_freq <=666) )
bfc02304:	8fa20088 	lw	v0,136(sp)
bfc02308:	2c42029b 	sltiu	v0,v0,667
bfc0230c:	10400005 	beqz	v0,bfc02324 <_DTR_suggestion+0x194>
bfc02310:	00000000 	nop
	{
		
		cas=7;  //CL=8 , "0"= 1 unit 
bfc02314:	24020007 	li	v0,7
bfc02318:	afa2001c 	sw	v0,28(sp)
bfc0231c:	0bf008cf 	j	bfc0233c <_DTR_suggestion+0x1ac>
bfc02320:	00000000 	nop
		//cas=8;  //CL=9 , "0"= 1 unit 
		//cas=9;  //CL=10 , "0"= 1 unit 
	}
	else if((mem_freq <=800) )
bfc02324:	8fa20088 	lw	v0,136(sp)
bfc02328:	2c420321 	sltiu	v0,v0,801
bfc0232c:	10400003 	beqz	v0,bfc0233c <_DTR_suggestion+0x1ac>
bfc02330:	00000000 	nop
	{
		//cas=7;  //CL=8 , "0"= 1 unit 
		//cas=8;  //CL=9 , "0"= 1 unit 
		cas=9;  //CL=10 , "0"= 1 unit 
bfc02334:	24020009 	li	v0,9
bfc02338:	afa2001c 	sw	v0,28(sp)
	#endif
	
	

	/*count for FAWG*/
	fawg = (fawg_ns * 10)/clk_10_ns;
bfc0233c:	8fa20078 	lw	v0,120(sp)
bfc02340:	00021040 	sll	v0,v0,0x1
bfc02344:	00021880 	sll	v1,v0,0x2
bfc02348:	00431821 	addu	v1,v0,v1
bfc0234c:	8fa20014 	lw	v0,20(sp)
bfc02350:	0062001b 	divu	zero,v1,v0
bfc02354:	004001f4 	teq	v0,zero,0x7
bfc02358:	00001810 	mfhi	v1
bfc0235c:	00001012 	mflo	v0
bfc02360:	afa2002c 	sw	v0,44(sp)
	//_memctl_debug_printf("\nfawg 001= %d ,\n", fawg );

	
	if(0 != ((fawg_ns*10)%clk_10_ns))
bfc02364:	8fa20078 	lw	v0,120(sp)
bfc02368:	00021040 	sll	v0,v0,0x1
bfc0236c:	00021880 	sll	v1,v0,0x2
bfc02370:	00431821 	addu	v1,v0,v1
bfc02374:	8fa20014 	lw	v0,20(sp)
bfc02378:	0062001b 	divu	zero,v1,v0
bfc0237c:	004001f4 	teq	v0,zero,0x7
bfc02380:	00001010 	mfhi	v0
bfc02384:	10400004 	beqz	v0,bfc02398 <_DTR_suggestion+0x208>
bfc02388:	00000000 	nop
		fawg++;
bfc0238c:	8fa2002c 	lw	v0,44(sp)
bfc02390:	24420001 	addiu	v0,v0,1
bfc02394:	afa2002c 	sw	v0,44(sp)
		//fawg+=2;
	fawg--; /* FAWG == 0, apply tFAWG with 1 DRAM clock. */
bfc02398:	8fa2002c 	lw	v0,44(sp)
bfc0239c:	2442ffff 	addiu	v0,v0,-1
bfc023a0:	afa2002c 	sw	v0,44(sp)

	//_memctl_debug_printf("\nfawg = %d ,\n", fawg );

	/*count for RRD*/
	rrd = (rrd_ns * 10)/clk_10_ns;
bfc023a4:	8fa20074 	lw	v0,116(sp)
bfc023a8:	00021040 	sll	v0,v0,0x1
bfc023ac:	00021880 	sll	v1,v0,0x2
bfc023b0:	00431821 	addu	v1,v0,v1
bfc023b4:	8fa20014 	lw	v0,20(sp)
bfc023b8:	0062001b 	divu	zero,v1,v0
bfc023bc:	004001f4 	teq	v0,zero,0x7
bfc023c0:	00001810 	mfhi	v1
bfc023c4:	00001012 	mflo	v0
bfc023c8:	afa20030 	sw	v0,48(sp)
	if(0 != ((rrd_ns * 10)%clk_10_ns))
bfc023cc:	8fa20074 	lw	v0,116(sp)
bfc023d0:	00021040 	sll	v0,v0,0x1
bfc023d4:	00021880 	sll	v1,v0,0x2
bfc023d8:	00431821 	addu	v1,v0,v1
bfc023dc:	8fa20014 	lw	v0,20(sp)
bfc023e0:	0062001b 	divu	zero,v1,v0
bfc023e4:	004001f4 	teq	v0,zero,0x7
bfc023e8:	00001010 	mfhi	v0
bfc023ec:	10400004 	beqz	v0,bfc02400 <_DTR_suggestion+0x270>
bfc023f0:	00000000 	nop
		rrd++;
bfc023f4:	8fa20030 	lw	v0,48(sp)
bfc023f8:	24420001 	addiu	v0,v0,1
bfc023fc:	afa20030 	sw	v0,48(sp)
	rrd--; /* rrd == 0, apply tRRD with 1 DRAM clock. */
bfc02400:	8fa20030 	lw	v0,48(sp)
bfc02404:	2442ffff 	addiu	v0,v0,-1
bfc02408:	afa20030 	sw	v0,48(sp)

	/*count for wtr*/
	wtr = (wtr_ns * 10)/clk_10_ns;
bfc0240c:	8fa2007c 	lw	v0,124(sp)
bfc02410:	00021040 	sll	v0,v0,0x1
bfc02414:	00021880 	sll	v1,v0,0x2
bfc02418:	00431821 	addu	v1,v0,v1
bfc0241c:	8fa20014 	lw	v0,20(sp)
bfc02420:	0062001b 	divu	zero,v1,v0
bfc02424:	004001f4 	teq	v0,zero,0x7
bfc02428:	00001810 	mfhi	v1
bfc0242c:	00001012 	mflo	v0
bfc02430:	afa20038 	sw	v0,56(sp)
	if(0 != ((wtr_ns*10)%clk_10_ns))
bfc02434:	8fa2007c 	lw	v0,124(sp)
bfc02438:	00021040 	sll	v0,v0,0x1
bfc0243c:	00021880 	sll	v1,v0,0x2
bfc02440:	00431821 	addu	v1,v0,v1
bfc02444:	8fa20014 	lw	v0,20(sp)
bfc02448:	0062001b 	divu	zero,v1,v0
bfc0244c:	004001f4 	teq	v0,zero,0x7
bfc02450:	00001010 	mfhi	v0
bfc02454:	10400004 	beqz	v0,bfc02468 <_DTR_suggestion+0x2d8>
bfc02458:	00000000 	nop
		wtr++;
bfc0245c:	8fa20038 	lw	v0,56(sp)
bfc02460:	24420001 	addiu	v0,v0,1
bfc02464:	afa20038 	sw	v0,56(sp)
	wtr--; /* wtr == 0, apply tWTR with 1 DRAM clock. */
bfc02468:	8fa20038 	lw	v0,56(sp)
bfc0246c:	2442ffff 	addiu	v0,v0,-1
bfc02470:	afa20038 	sw	v0,56(sp)

	/*count for rtp*/
	rtp = (rtp_ns*10)/clk_10_ns;
bfc02474:	8fa20080 	lw	v0,128(sp)
bfc02478:	00021040 	sll	v0,v0,0x1
bfc0247c:	00021880 	sll	v1,v0,0x2
bfc02480:	00431821 	addu	v1,v0,v1
bfc02484:	8fa20014 	lw	v0,20(sp)
bfc02488:	0062001b 	divu	zero,v1,v0
bfc0248c:	004001f4 	teq	v0,zero,0x7
bfc02490:	00001810 	mfhi	v1
bfc02494:	00001012 	mflo	v0
bfc02498:	afa20034 	sw	v0,52(sp)
	if(0 != ((rtp_ns*10)%clk_10_ns))
bfc0249c:	8fa20080 	lw	v0,128(sp)
bfc024a0:	00021040 	sll	v0,v0,0x1
bfc024a4:	00021880 	sll	v1,v0,0x2
bfc024a8:	00431821 	addu	v1,v0,v1
bfc024ac:	8fa20014 	lw	v0,20(sp)
bfc024b0:	0062001b 	divu	zero,v1,v0
bfc024b4:	004001f4 	teq	v0,zero,0x7
bfc024b8:	00001010 	mfhi	v0
bfc024bc:	10400004 	beqz	v0,bfc024d0 <_DTR_suggestion+0x340>
bfc024c0:	00000000 	nop
		rtp++;
bfc024c4:	8fa20034 	lw	v0,52(sp)
bfc024c8:	24420001 	addiu	v0,v0,1
bfc024cc:	afa20034 	sw	v0,52(sp)
	rtp--; /* wtr == 0, apply tRP with 1 DRAM clock. */
bfc024d0:	8fa20034 	lw	v0,52(sp)
bfc024d4:	2442ffff 	addiu	v0,v0,-1
bfc024d8:	afa20034 	sw	v0,52(sp)


	/*count for rp*/
	rp = (rp_ns*10)/clk_10_ns;
bfc024dc:	8fa20060 	lw	v0,96(sp)
bfc024e0:	00021040 	sll	v0,v0,0x1
bfc024e4:	00021880 	sll	v1,v0,0x2
bfc024e8:	00431821 	addu	v1,v0,v1
bfc024ec:	8fa20014 	lw	v0,20(sp)
bfc024f0:	0062001b 	divu	zero,v1,v0
bfc024f4:	004001f4 	teq	v0,zero,0x7
bfc024f8:	00001810 	mfhi	v1
bfc024fc:	00001012 	mflo	v0
bfc02500:	afa2004c 	sw	v0,76(sp)
	if(0 != ((rp_ns*10)%clk_10_ns))
bfc02504:	8fa20060 	lw	v0,96(sp)
bfc02508:	00021040 	sll	v0,v0,0x1
bfc0250c:	00021880 	sll	v1,v0,0x2
bfc02510:	00431821 	addu	v1,v0,v1
bfc02514:	8fa20014 	lw	v0,20(sp)
bfc02518:	0062001b 	divu	zero,v1,v0
bfc0251c:	004001f4 	teq	v0,zero,0x7
bfc02520:	00001010 	mfhi	v0
bfc02524:	10400004 	beqz	v0,bfc02538 <_DTR_suggestion+0x3a8>
bfc02528:	00000000 	nop
		rp++;
bfc0252c:	8fa2004c 	lw	v0,76(sp)
bfc02530:	24420001 	addiu	v0,v0,1
bfc02534:	afa2004c 	sw	v0,76(sp)
	rp--; /* rp == 0, apply tRP with 1 DRAM clock. */
bfc02538:	8fa2004c 	lw	v0,76(sp)
bfc0253c:	2442ffff 	addiu	v0,v0,-1
bfc02540:	afa2004c 	sw	v0,76(sp)

	/*count for rcd*/
	rcd = (rcd_ns*10)/clk_10_ns;
bfc02544:	8fa20064 	lw	v0,100(sp)
bfc02548:	00021040 	sll	v0,v0,0x1
bfc0254c:	00021880 	sll	v1,v0,0x2
bfc02550:	00431821 	addu	v1,v0,v1
bfc02554:	8fa20014 	lw	v0,20(sp)
bfc02558:	0062001b 	divu	zero,v1,v0
bfc0255c:	004001f4 	teq	v0,zero,0x7
bfc02560:	00001810 	mfhi	v1
bfc02564:	00001012 	mflo	v0
bfc02568:	afa20048 	sw	v0,72(sp)
	if(0 != ((rcd_ns*10)%clk_10_ns))
bfc0256c:	8fa20064 	lw	v0,100(sp)
bfc02570:	00021040 	sll	v0,v0,0x1
bfc02574:	00021880 	sll	v1,v0,0x2
bfc02578:	00431821 	addu	v1,v0,v1
bfc0257c:	8fa20014 	lw	v0,20(sp)
bfc02580:	0062001b 	divu	zero,v1,v0
bfc02584:	004001f4 	teq	v0,zero,0x7
bfc02588:	00001010 	mfhi	v0
bfc0258c:	10400004 	beqz	v0,bfc025a0 <_DTR_suggestion+0x410>
bfc02590:	00000000 	nop
		rcd++;
bfc02594:	8fa20048 	lw	v0,72(sp)
bfc02598:	24420001 	addiu	v0,v0,1
bfc0259c:	afa20048 	sw	v0,72(sp)
	
	rcd--; /* rcd == 0, apply tRCD with 1 DRAM clock. */
bfc025a0:	8fa20048 	lw	v0,72(sp)
bfc025a4:	2442ffff 	addiu	v0,v0,-1
bfc025a8:	afa20048 	sw	v0,72(sp)

	/*count for ras*/
	ras = (ras_ns*10)/clk_10_ns;
bfc025ac:	8fa20068 	lw	v0,104(sp)
bfc025b0:	00021040 	sll	v0,v0,0x1
bfc025b4:	00021880 	sll	v1,v0,0x2
bfc025b8:	00431821 	addu	v1,v0,v1
bfc025bc:	8fa20014 	lw	v0,20(sp)
bfc025c0:	0062001b 	divu	zero,v1,v0
bfc025c4:	004001f4 	teq	v0,zero,0x7
bfc025c8:	00001810 	mfhi	v1
bfc025cc:	00001012 	mflo	v0
bfc025d0:	afa20044 	sw	v0,68(sp)
	if(0 != ((ras_ns*10)%clk_10_ns))
bfc025d4:	8fa20068 	lw	v0,104(sp)
bfc025d8:	00021040 	sll	v0,v0,0x1
bfc025dc:	00021880 	sll	v1,v0,0x2
bfc025e0:	00431821 	addu	v1,v0,v1
bfc025e4:	8fa20014 	lw	v0,20(sp)
bfc025e8:	0062001b 	divu	zero,v1,v0
bfc025ec:	004001f4 	teq	v0,zero,0x7
bfc025f0:	00001010 	mfhi	v0
bfc025f4:	10400004 	beqz	v0,bfc02608 <_DTR_suggestion+0x478>
bfc025f8:	00000000 	nop
		ras++;
bfc025fc:	8fa20044 	lw	v0,68(sp)
bfc02600:	24420001 	addiu	v0,v0,1
bfc02604:	afa20044 	sw	v0,68(sp)
	ras--;
bfc02608:	8fa20044 	lw	v0,68(sp)
bfc0260c:	2442ffff 	addiu	v0,v0,-1
bfc02610:	afa20044 	sw	v0,68(sp)

	/*count for rfc*/
	rfc = (rfc_ns*10)/clk_10_ns;
bfc02614:	8fa2006c 	lw	v0,108(sp)
bfc02618:	00021040 	sll	v0,v0,0x1
bfc0261c:	00021880 	sll	v1,v0,0x2
bfc02620:	00431821 	addu	v1,v0,v1
bfc02624:	8fa20014 	lw	v0,20(sp)
bfc02628:	0062001b 	divu	zero,v1,v0
bfc0262c:	004001f4 	teq	v0,zero,0x7
bfc02630:	00001810 	mfhi	v1
bfc02634:	00001012 	mflo	v0
bfc02638:	afa20040 	sw	v0,64(sp)
	if(0 != ((rfc_ns*10)%clk_10_ns))
bfc0263c:	8fa2006c 	lw	v0,108(sp)
bfc02640:	00021040 	sll	v0,v0,0x1
bfc02644:	00021880 	sll	v1,v0,0x2
bfc02648:	00431821 	addu	v1,v0,v1
bfc0264c:	8fa20014 	lw	v0,20(sp)
bfc02650:	0062001b 	divu	zero,v1,v0
bfc02654:	004001f4 	teq	v0,zero,0x7
bfc02658:	00001010 	mfhi	v0
bfc0265c:	10400004 	beqz	v0,bfc02670 <_DTR_suggestion+0x4e0>
bfc02660:	00000000 	nop
		rfc++;
bfc02664:	8fa20040 	lw	v0,64(sp)
bfc02668:	24420001 	addiu	v0,v0,1
bfc0266c:	afa20040 	sw	v0,64(sp)
	rfc--;
bfc02670:	8fa20040 	lw	v0,64(sp)
bfc02674:	2442ffff 	addiu	v0,v0,-1
bfc02678:	afa20040 	sw	v0,64(sp)

	/*count for wr*/
	wr = (wr_ns*10)/clk_10_ns;
bfc0267c:	8fa20070 	lw	v0,112(sp)
bfc02680:	00021040 	sll	v0,v0,0x1
bfc02684:	00021880 	sll	v1,v0,0x2
bfc02688:	00431821 	addu	v1,v0,v1
bfc0268c:	8fa20014 	lw	v0,20(sp)
bfc02690:	0062001b 	divu	zero,v1,v0
bfc02694:	004001f4 	teq	v0,zero,0x7
bfc02698:	00001810 	mfhi	v1
bfc0269c:	00001012 	mflo	v0
bfc026a0:	afa2003c 	sw	v0,60(sp)
	if(0 != ((wr_ns*10)%clk_10_ns))
bfc026a4:	8fa20070 	lw	v0,112(sp)
bfc026a8:	00021040 	sll	v0,v0,0x1
bfc026ac:	00021880 	sll	v1,v0,0x2
bfc026b0:	00431821 	addu	v1,v0,v1
bfc026b4:	8fa20014 	lw	v0,20(sp)
bfc026b8:	0062001b 	divu	zero,v1,v0
bfc026bc:	004001f4 	teq	v0,zero,0x7
bfc026c0:	00001010 	mfhi	v0
bfc026c4:	10400004 	beqz	v0,bfc026d8 <_DTR_suggestion+0x548>
bfc026c8:	00000000 	nop
		wr++;
bfc026cc:	8fa2003c 	lw	v0,60(sp)
bfc026d0:	24420001 	addiu	v0,v0,1
bfc026d4:	afa2003c 	sw	v0,60(sp)

	if((mem_freq >= 400)&&(memctlc_is_DDR2())){
bfc026d8:	8fa20088 	lw	v0,136(sp)
bfc026dc:	2c420190 	sltiu	v0,v0,400
bfc026e0:	1440000a 	bnez	v0,bfc0270c <_DTR_suggestion+0x57c>
bfc026e4:	00000000 	nop
bfc026e8:	0ff00cbd 	jal	bfc032f4 <memctlc_is_DDR2>
bfc026ec:	00000000 	nop
bfc026f0:	10400006 	beqz	v0,bfc0270c <_DTR_suggestion+0x57c>
bfc026f4:	00000000 	nop
		wr++;
bfc026f8:	8fa2003c 	lw	v0,60(sp)
bfc026fc:	24420001 	addiu	v0,v0,1
bfc02700:	afa2003c 	sw	v0,60(sp)
	/*count for wr*/
	wr = (wr_ns*10)/clk_10_ns;
	if(0 != ((wr_ns*10)%clk_10_ns))
		wr++;

	if((mem_freq >= 400)&&(memctlc_is_DDR2())){
bfc02704:	0bf009c6 	j	bfc02718 <_DTR_suggestion+0x588>
bfc02708:	00000000 	nop
		wr++;
		//_memctl_debug_printf("\nmem_freq 123= %d ,\n", mem_freq);//250MHZ : 250
	}
	else
	{
		wr--;
bfc0270c:	8fa2003c 	lw	v0,60(sp)
bfc02710:	2442ffff 	addiu	v0,v0,-1
bfc02714:	afa2003c 	sw	v0,60(sp)
	/* count for DRAM refresh period.*/
	/* get row count */
	//rowcnt = 2048 << ((REG(DCR) & DCR_ROWCNT_MASK) >> DCR_ROWCNT_FD_S);
	//_memctl_debug_printf("rowcnt(%d)\n", rowcnt);
	//refi_clks = (ref_ms*mem_freq*1000)/rowcnt;
	refi_clks = (refi_ns*mem_freq)/1000;
bfc02718:	8fa3005c 	lw	v1,92(sp)
bfc0271c:	8fa20088 	lw	v0,136(sp)
bfc02720:	70621802 	mul	v1,v1,v0
bfc02724:	3c021062 	lui	v0,0x1062
bfc02728:	34424dd3 	ori	v0,v0,0x4dd3
bfc0272c:	00620019 	multu	v1,v0
bfc02730:	00001010 	mfhi	v0
bfc02734:	00021182 	srl	v0,v0,0x6
bfc02738:	afa20020 	sw	v0,32(sp)
	for(refi_unit=0; refi_unit <=7; refi_unit++){
bfc0273c:	afa00028 	sw	zero,40(sp)
bfc02740:	0bf00a02 	j	bfc02808 <_DTR_suggestion+0x678>
bfc02744:	00000000 	nop
		for(refi=0; refi<=15; refi++){
bfc02748:	afa00024 	sw	zero,36(sp)
bfc0274c:	0bf009fb 	j	bfc027ec <_DTR_suggestion+0x65c>
bfc02750:	00000000 	nop
			if(refi_clks < ((32<<refi_unit)*(refi+1))){
bfc02754:	8fa20028 	lw	v0,40(sp)
bfc02758:	24030020 	li	v1,32
bfc0275c:	00431004 	sllv	v0,v1,v0
bfc02760:	00401821 	move	v1,v0
bfc02764:	8fa20024 	lw	v0,36(sp)
bfc02768:	24420001 	addiu	v0,v0,1
bfc0276c:	70621802 	mul	v1,v1,v0
bfc02770:	8fa20020 	lw	v0,32(sp)
bfc02774:	0043102b 	sltu	v0,v0,v1
bfc02778:	10400019 	beqz	v0,bfc027e0 <_DTR_suggestion+0x650>
bfc0277c:	00000000 	nop
			//if(refi_clks < ((32<<refi_unit)*(refi+2))){ //RTL8198C
				if(refi==0){
bfc02780:	8fa20024 	lw	v0,36(sp)
bfc02784:	1440000b 	bnez	v0,bfc027b4 <_DTR_suggestion+0x624>
bfc02788:	00000000 	nop
					refi = 15;
bfc0278c:	2402000f 	li	v0,15
bfc02790:	afa20024 	sw	v0,36(sp)
					if(0 < refi_unit)
bfc02794:	8fa20028 	lw	v0,40(sp)
bfc02798:	10400009 	beqz	v0,bfc027c0 <_DTR_suggestion+0x630>
bfc0279c:	00000000 	nop
						refi_unit--;
bfc027a0:	8fa20028 	lw	v0,40(sp)
bfc027a4:	2442ffff 	addiu	v0,v0,-1
bfc027a8:	afa20028 	sw	v0,40(sp)
bfc027ac:	0bf009f0 	j	bfc027c0 <_DTR_suggestion+0x630>
bfc027b0:	00000000 	nop
				}
				else{
					refi--;
bfc027b4:	8fa20024 	lw	v0,36(sp)
bfc027b8:	2442ffff 	addiu	v0,v0,-1
bfc027bc:	afa20024 	sw	v0,36(sp)
				}

				#if 1
				if(mem_freq <=250 )
bfc027c0:	8fa20088 	lw	v0,136(sp)
bfc027c4:	2c4200fb 	sltiu	v0,v0,251
bfc027c8:	10400019 	beqz	v0,bfc02830 <_DTR_suggestion+0x6a0>
bfc027cc:	00000000 	nop
				{
					refi=14;
bfc027d0:	2402000e 	li	v0,14
bfc027d4:	afa20024 	sw	v0,36(sp)
				}
				#endif

				
				goto count_dtr;
bfc027d8:	0bf00a0d 	j	bfc02834 <_DTR_suggestion+0x6a4>
bfc027dc:	00000000 	nop
	//rowcnt = 2048 << ((REG(DCR) & DCR_ROWCNT_MASK) >> DCR_ROWCNT_FD_S);
	//_memctl_debug_printf("rowcnt(%d)\n", rowcnt);
	//refi_clks = (ref_ms*mem_freq*1000)/rowcnt;
	refi_clks = (refi_ns*mem_freq)/1000;
	for(refi_unit=0; refi_unit <=7; refi_unit++){
		for(refi=0; refi<=15; refi++){
bfc027e0:	8fa20024 	lw	v0,36(sp)
bfc027e4:	24420001 	addiu	v0,v0,1
bfc027e8:	afa20024 	sw	v0,36(sp)
bfc027ec:	8fa20024 	lw	v0,36(sp)
bfc027f0:	2c420010 	sltiu	v0,v0,16
bfc027f4:	1440ffd7 	bnez	v0,bfc02754 <_DTR_suggestion+0x5c4>
bfc027f8:	00000000 	nop
	/* get row count */
	//rowcnt = 2048 << ((REG(DCR) & DCR_ROWCNT_MASK) >> DCR_ROWCNT_FD_S);
	//_memctl_debug_printf("rowcnt(%d)\n", rowcnt);
	//refi_clks = (ref_ms*mem_freq*1000)/rowcnt;
	refi_clks = (refi_ns*mem_freq)/1000;
	for(refi_unit=0; refi_unit <=7; refi_unit++){
bfc027fc:	8fa20028 	lw	v0,40(sp)
bfc02800:	24420001 	addiu	v0,v0,1
bfc02804:	afa20028 	sw	v0,40(sp)
bfc02808:	8fa20028 	lw	v0,40(sp)
bfc0280c:	2c420008 	sltiu	v0,v0,8
bfc02810:	1440ffcd 	bnez	v0,bfc02748 <_DTR_suggestion+0x5b8>
bfc02814:	00000000 	nop
				goto count_dtr;
			}
		}
	}

	if(refi_unit > 7)/* error, not found.*/
bfc02818:	8fa20028 	lw	v0,40(sp)
bfc0281c:	2c420008 	sltiu	v0,v0,8
bfc02820:	1040003d 	beqz	v0,bfc02918 <_DTR_suggestion+0x788>
bfc02824:	00000000 	nop
bfc02828:	0bf00a0d 	j	bfc02834 <_DTR_suggestion+0x6a4>
bfc0282c:	00000000 	nop
					refi=14;
				}
				#endif

				
				goto count_dtr;
bfc02830:	00000000 	nop

	if(refi_unit > 7)/* error, not found.*/
		return 0;

count_dtr:
	sug_dtr[0] = ((cas << DTR0_CAS_FD_S)&DTR0_CAS_MASK) | ((wr << DTR0_WR_FD_S)&DTR0_WR_MASK) |\
bfc02834:	8fa2001c 	lw	v0,28(sp)
bfc02838:	00021f00 	sll	v1,v0,0x1c
bfc0283c:	8fa2003c 	lw	v0,60(sp)
bfc02840:	00022600 	sll	a0,v0,0x18
bfc02844:	3c020f00 	lui	v0,0xf00
bfc02848:	00821024 	and	v0,a0,v0
bfc0284c:	00621825 	or	v1,v1,v0
		     ((rtp << DTR0_RTP_FD_S)&DTR0_RTP_MASK) | ((wtr << DTR0_WTR_FD_S)&DTR0_WTR_MASK) |\
bfc02850:	8fa20034 	lw	v0,52(sp)
bfc02854:	00022400 	sll	a0,v0,0x10
bfc02858:	3c02000f 	lui	v0,0xf
bfc0285c:	00821024 	and	v0,a0,v0
bfc02860:	00621825 	or	v1,v1,v0
bfc02864:	8fa20038 	lw	v0,56(sp)
bfc02868:	00021300 	sll	v0,v0,0xc
bfc0286c:	3042ffff 	andi	v0,v0,0xffff
bfc02870:	00621825 	or	v1,v1,v0
		     ((refi << DTR0_REFI_FD_S)&DTR0_REFI_MASK) | ((refi_unit << DTR0_REFI_UNIT_FD_S)&DTR0_REFI_UNIT_MASK);
bfc02874:	8fa20024 	lw	v0,36(sp)
bfc02878:	00021200 	sll	v0,v0,0x8
bfc0287c:	30420f00 	andi	v0,v0,0xf00
bfc02880:	00621825 	or	v1,v1,v0
bfc02884:	8fa20028 	lw	v0,40(sp)
bfc02888:	00021100 	sll	v0,v0,0x4
bfc0288c:	304200ff 	andi	v0,v0,0xff

	if(refi_unit > 7)/* error, not found.*/
		return 0;

count_dtr:
	sug_dtr[0] = ((cas << DTR0_CAS_FD_S)&DTR0_CAS_MASK) | ((wr << DTR0_WR_FD_S)&DTR0_WR_MASK) |\
bfc02890:	00621825 	or	v1,v1,v0
bfc02894:	8fa20058 	lw	v0,88(sp)
bfc02898:	ac430000 	sw	v1,0(v0)
		     ((rtp << DTR0_RTP_FD_S)&DTR0_RTP_MASK) | ((wtr << DTR0_WTR_FD_S)&DTR0_WTR_MASK) |\
		     ((refi << DTR0_REFI_FD_S)&DTR0_REFI_MASK) | ((refi_unit << DTR0_REFI_UNIT_FD_S)&DTR0_REFI_UNIT_MASK);
	sug_dtr[1] = ((rp << DTR1_RP_FD_S)&DTR1_RP_MASK) | ((rcd << DTR1_RCD_FD_S)&DTR1_RCD_MASK) |\
bfc0289c:	8fa20058 	lw	v0,88(sp)
bfc028a0:	24420004 	addiu	v0,v0,4
bfc028a4:	8fa3004c 	lw	v1,76(sp)
bfc028a8:	00032600 	sll	a0,v1,0x18
bfc028ac:	8fa30048 	lw	v1,72(sp)
bfc028b0:	00032c00 	sll	a1,v1,0x10
bfc028b4:	3c0300ff 	lui	v1,0xff
bfc028b8:	00a31824 	and	v1,a1,v1
bfc028bc:	00832025 	or	a0,a0,v1
		     ((rrd << DTR1_RRD_FD_S)&DTR1_RRD_MASK) | ((fawg << DTR1_FAWG_FD_S)&DTR1_FAWG_MASK) ;
bfc028c0:	8fa30030 	lw	v1,48(sp)
bfc028c4:	00031a00 	sll	v1,v1,0x8
bfc028c8:	3063ffff 	andi	v1,v1,0xffff
bfc028cc:	00832025 	or	a0,a0,v1
bfc028d0:	8fa3002c 	lw	v1,44(sp)
bfc028d4:	306300ff 	andi	v1,v1,0xff

count_dtr:
	sug_dtr[0] = ((cas << DTR0_CAS_FD_S)&DTR0_CAS_MASK) | ((wr << DTR0_WR_FD_S)&DTR0_WR_MASK) |\
		     ((rtp << DTR0_RTP_FD_S)&DTR0_RTP_MASK) | ((wtr << DTR0_WTR_FD_S)&DTR0_WTR_MASK) |\
		     ((refi << DTR0_REFI_FD_S)&DTR0_REFI_MASK) | ((refi_unit << DTR0_REFI_UNIT_FD_S)&DTR0_REFI_UNIT_MASK);
	sug_dtr[1] = ((rp << DTR1_RP_FD_S)&DTR1_RP_MASK) | ((rcd << DTR1_RCD_FD_S)&DTR1_RCD_MASK) |\
bfc028d8:	00831825 	or	v1,a0,v1
bfc028dc:	ac430000 	sw	v1,0(v0)
		     ((rrd << DTR1_RRD_FD_S)&DTR1_RRD_MASK) | ((fawg << DTR1_FAWG_FD_S)&DTR1_FAWG_MASK) ;
	sug_dtr[2] = ((rfc << DTR2_RFC_FD_S)&DTR2_RFC_MASK) | ((ras << DTR2_RAS_FD_S)&DTR2_RAS_MASK);
bfc028e0:	8fa20058 	lw	v0,88(sp)
bfc028e4:	24420008 	addiu	v0,v0,8
bfc028e8:	8fa30040 	lw	v1,64(sp)
bfc028ec:	00032500 	sll	a0,v1,0x14
bfc028f0:	8fa30044 	lw	v1,68(sp)
bfc028f4:	00032b00 	sll	a1,v1,0xc
bfc028f8:	3c030003 	lui	v1,0x3
bfc028fc:	3463f000 	ori	v1,v1,0xf000
bfc02900:	00a31824 	and	v1,a1,v1
bfc02904:	00831825 	or	v1,a0,v1
bfc02908:	ac430000 	sw	v1,0(v0)
		| ((refi_unit << DTR_REFI_UNIT_FD_S)&DTR_REFI_UNIT_MASK);


	

	return;
bfc0290c:	00000000 	nop
bfc02910:	0bf00a47 	j	bfc0291c <_DTR_suggestion+0x78c>
bfc02914:	00000000 	nop
			}
		}
	}

	if(refi_unit > 7)/* error, not found.*/
		return 0;
bfc02918:	00000000 	nop


	

	return;
}
bfc0291c:	8fbf0054 	lw	ra,84(sp)
bfc02920:	27bd0058 	addiu	sp,sp,88
bfc02924:	03e00008 	jr	ra
bfc02928:	00000000 	nop

bfc0292c <memctlc_DDR2_config_DTR>:


void memctlc_DDR2_config_DTR(void)
{
bfc0292c:	27bdff88 	addiu	sp,sp,-120
bfc02930:	afbf0074 	sw	ra,116(sp)
	unsigned int sug_dtr[3];
	unsigned int dram_freq_mhz;
	unsigned int std_rfc_ns, cas_10_ns, tcwl, wr, cas, wtr;


	dtr0 = (volatile unsigned int *)DTR0;
bfc02934:	3c02b800 	lui	v0,0xb800
bfc02938:	34421008 	ori	v0,v0,0x1008
bfc0293c:	afa2005c 	sw	v0,92(sp)
	dtr1 = (volatile unsigned int *)DTR1;
bfc02940:	3c02b800 	lui	v0,0xb800
bfc02944:	3442100c 	ori	v0,v0,0x100c
bfc02948:	afa20058 	sw	v0,88(sp)
	dtr2 = (volatile unsigned int *)DTR2;
bfc0294c:	3c02b800 	lui	v0,0xb800
bfc02950:	34421010 	ori	v0,v0,0x1010
bfc02954:	afa20054 	sw	v0,84(sp)

	

	#if 1
	std_rfc_ns = DDR2_STD_RFC_NS;
bfc02958:	24020148 	li	v0,328
bfc0295c:	afa2004c 	sw	v0,76(sp)
	std_rfc_ns = _rfc_ns;
	#endif

	

	dram_freq_mhz = board_DRAM_freq_mhz();
bfc02960:	0ff0260d 	jal	bfc09834 <board_DRAM_freq_mhz>
bfc02964:	00000000 	nop
bfc02968:	afa20050 	sw	v0,80(sp)

	if(dram_freq_mhz >= DDR2_CAS6_MAX_MHZ){
bfc0296c:	8fa20050 	lw	v0,80(sp)
bfc02970:	2c420215 	sltiu	v0,v0,533
bfc02974:	1440000b 	bnez	v0,bfc029a4 <memctlc_DDR2_config_DTR+0x78>
bfc02978:	00000000 	nop
		cas_10_ns = (7 * 1000 * 10)/dram_freq_mhz;
bfc0297c:	3c020001 	lui	v0,0x1
bfc02980:	34431170 	ori	v1,v0,0x1170
bfc02984:	8fa20050 	lw	v0,80(sp)
bfc02988:	0062001b 	divu	zero,v1,v0
bfc0298c:	004001f4 	teq	v0,zero,0x7
bfc02990:	00001810 	mfhi	v1
bfc02994:	00001012 	mflo	v0
bfc02998:	afa20048 	sw	v0,72(sp)
bfc0299c:	0bf00aa4 	j	bfc02a90 <memctlc_DDR2_config_DTR+0x164>
bfc029a0:	00000000 	nop
	}else if(dram_freq_mhz >= DDR2_CAS5_MAX_MHZ){
bfc029a4:	8fa20050 	lw	v0,80(sp)
bfc029a8:	2c420190 	sltiu	v0,v0,400
bfc029ac:	1440000a 	bnez	v0,bfc029d8 <memctlc_DDR2_config_DTR+0xac>
bfc029b0:	00000000 	nop
		cas_10_ns = (6 * 1000 * 10)/dram_freq_mhz;
bfc029b4:	3403ea60 	li	v1,0xea60
bfc029b8:	8fa20050 	lw	v0,80(sp)
bfc029bc:	0062001b 	divu	zero,v1,v0
bfc029c0:	004001f4 	teq	v0,zero,0x7
bfc029c4:	00001810 	mfhi	v1
bfc029c8:	00001012 	mflo	v0
bfc029cc:	afa20048 	sw	v0,72(sp)
bfc029d0:	0bf00aa4 	j	bfc02a90 <memctlc_DDR2_config_DTR+0x164>
bfc029d4:	00000000 	nop
	}else if(dram_freq_mhz >= DDR2_CAS4_MAX_MHZ){
bfc029d8:	8fa20050 	lw	v0,80(sp)
bfc029dc:	2c42010a 	sltiu	v0,v0,266
bfc029e0:	1440000a 	bnez	v0,bfc02a0c <memctlc_DDR2_config_DTR+0xe0>
bfc029e4:	00000000 	nop
		cas_10_ns = (5 * 1000 * 10)/dram_freq_mhz;
bfc029e8:	3403c350 	li	v1,0xc350
bfc029ec:	8fa20050 	lw	v0,80(sp)
bfc029f0:	0062001b 	divu	zero,v1,v0
bfc029f4:	004001f4 	teq	v0,zero,0x7
bfc029f8:	00001810 	mfhi	v1
bfc029fc:	00001012 	mflo	v0
bfc02a00:	afa20048 	sw	v0,72(sp)
bfc02a04:	0bf00aa4 	j	bfc02a90 <memctlc_DDR2_config_DTR+0x164>
bfc02a08:	00000000 	nop
	}else if(dram_freq_mhz >= DDR2_CAS3_MAX_MHZ){
bfc02a0c:	8fa20050 	lw	v0,80(sp)
bfc02a10:	2c4200c8 	sltiu	v0,v0,200
bfc02a14:	1440000a 	bnez	v0,bfc02a40 <memctlc_DDR2_config_DTR+0x114>
bfc02a18:	00000000 	nop
		cas_10_ns = (4 * 1000* 10)/dram_freq_mhz;
bfc02a1c:	34039c40 	li	v1,0x9c40
bfc02a20:	8fa20050 	lw	v0,80(sp)
bfc02a24:	0062001b 	divu	zero,v1,v0
bfc02a28:	004001f4 	teq	v0,zero,0x7
bfc02a2c:	00001810 	mfhi	v1
bfc02a30:	00001012 	mflo	v0
bfc02a34:	afa20048 	sw	v0,72(sp)
bfc02a38:	0bf00aa4 	j	bfc02a90 <memctlc_DDR2_config_DTR+0x164>
bfc02a3c:	00000000 	nop
	}else if(dram_freq_mhz >= DDR2_CAS2_MAX_MHZ){
bfc02a40:	8fa20050 	lw	v0,80(sp)
bfc02a44:	2c42008f 	sltiu	v0,v0,143
bfc02a48:	1440000a 	bnez	v0,bfc02a74 <memctlc_DDR2_config_DTR+0x148>
bfc02a4c:	00000000 	nop
		cas_10_ns = (3 * 1000 * 10)/dram_freq_mhz;
bfc02a50:	24037530 	li	v1,30000
bfc02a54:	8fa20050 	lw	v0,80(sp)
bfc02a58:	0062001b 	divu	zero,v1,v0
bfc02a5c:	004001f4 	teq	v0,zero,0x7
bfc02a60:	00001810 	mfhi	v1
bfc02a64:	00001012 	mflo	v0
bfc02a68:	afa20048 	sw	v0,72(sp)
bfc02a6c:	0bf00aa4 	j	bfc02a90 <memctlc_DDR2_config_DTR+0x164>
bfc02a70:	00000000 	nop
	}else{
		cas_10_ns = (2 * 1000 * 10)/dram_freq_mhz;
bfc02a74:	24034e20 	li	v1,20000
bfc02a78:	8fa20050 	lw	v0,80(sp)
bfc02a7c:	0062001b 	divu	zero,v1,v0
bfc02a80:	004001f4 	teq	v0,zero,0x7
bfc02a84:	00001810 	mfhi	v1
bfc02a88:	00001012 	mflo	v0
bfc02a8c:	afa20048 	sw	v0,72(sp)
	}

        _DTR_suggestion(sug_dtr, DDR2_STD_REFI_NS, DDR2_STD_RP_NS, \
bfc02a90:	27a20060 	addiu	v0,sp,96
bfc02a94:	2403002d 	li	v1,45
bfc02a98:	afa30010 	sw	v1,16(sp)
bfc02a9c:	8fa3004c 	lw	v1,76(sp)
bfc02aa0:	afa30014 	sw	v1,20(sp)
bfc02aa4:	2403000f 	li	v1,15
bfc02aa8:	afa30018 	sw	v1,24(sp)
bfc02aac:	2403000a 	li	v1,10
bfc02ab0:	afa3001c 	sw	v1,28(sp)
bfc02ab4:	24030032 	li	v1,50
bfc02ab8:	afa30020 	sw	v1,32(sp)
bfc02abc:	24030008 	li	v1,8
bfc02ac0:	afa30024 	sw	v1,36(sp)
bfc02ac4:	24030008 	li	v1,8
bfc02ac8:	afa30028 	sw	v1,40(sp)
bfc02acc:	8fa30048 	lw	v1,72(sp)
bfc02ad0:	afa3002c 	sw	v1,44(sp)
bfc02ad4:	8fa30050 	lw	v1,80(sp)
bfc02ad8:	afa30030 	sw	v1,48(sp)
bfc02adc:	00402021 	move	a0,v0
bfc02ae0:	24051e78 	li	a1,7800
bfc02ae4:	2406000f 	li	a2,15
bfc02ae8:	2407000f 	li	a3,15
bfc02aec:	0ff00864 	jal	bfc02190 <_DTR_suggestion>
bfc02af0:	00000000 	nop
                        DDR2_STD_RCD_NS, DDR2_STD_RAS_NS, std_rfc_ns, DDR2_STD_WR_NS,\
                        DDR2_STD_RRD_NS, DDR2_STD_FAWG_NS, DDR2_STD_WTR_NS, DDR2_STD_RTP_NS,\
                        cas_10_ns, dram_freq_mhz);

	cas = ((sug_dtr[0] & DTR0_CAS_MASK) >> DTR0_CAS_FD_S);
bfc02af4:	8fa20060 	lw	v0,96(sp)
bfc02af8:	00021702 	srl	v0,v0,0x1c
bfc02afc:	afa2003c 	sw	v0,60(sp)
	if(cas < 2){
bfc02b00:	8fa2003c 	lw	v0,60(sp)
bfc02b04:	2c420002 	sltiu	v0,v0,2
bfc02b08:	1040000b 	beqz	v0,bfc02b38 <memctlc_DDR2_config_DTR+0x20c>
bfc02b0c:	00000000 	nop
		cas = 2;
bfc02b10:	24020002 	li	v0,2
bfc02b14:	afa2003c 	sw	v0,60(sp)
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_CAS_MASK)) | (cas << DTR0_CAS_FD_S);
bfc02b18:	8fa30060 	lw	v1,96(sp)
bfc02b1c:	3c020fff 	lui	v0,0xfff
bfc02b20:	3442ffff 	ori	v0,v0,0xffff
bfc02b24:	00621824 	and	v1,v1,v0
bfc02b28:	8fa2003c 	lw	v0,60(sp)
bfc02b2c:	00021700 	sll	v0,v0,0x1c
bfc02b30:	00621025 	or	v0,v1,v0
bfc02b34:	afa20060 	sw	v0,96(sp)
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_CWL_MASK)) | (tcwl << DTR0_CWL_FD_S);
	}else{
		_memctl_debug_printf("\tWorning: wrong tCWL computation\n");
	}
	#else //new DDR2-1066 setting
	tcwl = cas - 1;
bfc02b38:	8fa2003c 	lw	v0,60(sp)
bfc02b3c:	2442ffff 	addiu	v0,v0,-1
bfc02b40:	afa20044 	sw	v0,68(sp)
	if(tcwl < 8){ //CL=7 is DDR2's max value
bfc02b44:	8fa20044 	lw	v0,68(sp)
bfc02b48:	2c420008 	sltiu	v0,v0,8
bfc02b4c:	1040000b 	beqz	v0,bfc02b7c <memctlc_DDR2_config_DTR+0x250>
bfc02b50:	00000000 	nop
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_CWL_MASK)) | (tcwl << DTR0_CWL_FD_S);
bfc02b54:	8fa30060 	lw	v1,96(sp)
bfc02b58:	3c02ff0f 	lui	v0,0xff0f
bfc02b5c:	3442ffff 	ori	v0,v0,0xffff
bfc02b60:	00621824 	and	v1,v1,v0
bfc02b64:	8fa20044 	lw	v0,68(sp)
bfc02b68:	00021500 	sll	v0,v0,0x14
bfc02b6c:	00621025 	or	v0,v1,v0
bfc02b70:	afa20060 	sw	v0,96(sp)
bfc02b74:	0bf00ae3 	j	bfc02b8c <memctlc_DDR2_config_DTR+0x260>
bfc02b78:	00000000 	nop
	}else{
		printf("\tWarning: wrong tCWL computation\n");
bfc02b7c:	3c02bfc1 	lui	v0,0xbfc1
bfc02b80:	2444ad6c 	addiu	a0,v0,-21140
bfc02b84:	0ff003ac 	jal	bfc00eb0 <printf>
bfc02b88:	00000000 	nop
	if(wr > 7){
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_WR_MASK)) | (5 << DTR0_WR_FD_S);
	}
	#else
	/* DDR2 Write recovery maximum == 8 for DDR2-1066 */
	wr = ((sug_dtr[0] & DTR0_WR_MASK) >> DTR0_WR_FD_S);
bfc02b8c:	8fa30060 	lw	v1,96(sp)
bfc02b90:	3c020f00 	lui	v0,0xf00
bfc02b94:	00621024 	and	v0,v1,v0
bfc02b98:	00021602 	srl	v0,v0,0x18
bfc02b9c:	afa20040 	sw	v0,64(sp)
	if(wr >= 8){
bfc02ba0:	8fa20040 	lw	v0,64(sp)
bfc02ba4:	2c420008 	sltiu	v0,v0,8
bfc02ba8:	1440000c 	bnez	v0,bfc02bdc <memctlc_DDR2_config_DTR+0x2b0>
bfc02bac:	00000000 	nop
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_WR_MASK)) | ((wr-1) << DTR0_WR_FD_S);
bfc02bb0:	8fa30060 	lw	v1,96(sp)
bfc02bb4:	3c02f0ff 	lui	v0,0xf0ff
bfc02bb8:	3442ffff 	ori	v0,v0,0xffff
bfc02bbc:	00621824 	and	v1,v1,v0
bfc02bc0:	8fa20040 	lw	v0,64(sp)
bfc02bc4:	2442ffff 	addiu	v0,v0,-1
bfc02bc8:	00021600 	sll	v0,v0,0x18
bfc02bcc:	00621025 	or	v0,v1,v0
bfc02bd0:	afa20060 	sw	v0,96(sp)
bfc02bd4:	0bf00b00 	j	bfc02c00 <memctlc_DDR2_config_DTR+0x2d4>
bfc02bd8:	00000000 	nop
	}
	else{
		_memctl_debug_printf("\ttWR(%d) \n",wr);
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_WR_MASK)) | ((wr-1) << DTR0_WR_FD_S);
bfc02bdc:	8fa30060 	lw	v1,96(sp)
bfc02be0:	3c02f0ff 	lui	v0,0xf0ff
bfc02be4:	3442ffff 	ori	v0,v0,0xffff
bfc02be8:	00621824 	and	v1,v1,v0
bfc02bec:	8fa20040 	lw	v0,64(sp)
bfc02bf0:	2442ffff 	addiu	v0,v0,-1
bfc02bf4:	00021600 	sll	v0,v0,0x18
bfc02bf8:	00621025 	or	v0,v1,v0
bfc02bfc:	afa20060 	sw	v0,96(sp)
	}
	#endif

	/* DDR2 Write to read delay cycle at least 2 clock cycles */
	wtr = ((sug_dtr[0] & DTR0_WTR_MASK) >> DTR0_WTR_FD_S);
bfc02c00:	8fa20060 	lw	v0,96(sp)
bfc02c04:	3042f000 	andi	v0,v0,0xf000
bfc02c08:	00021302 	srl	v0,v0,0xc
bfc02c0c:	afa20038 	sw	v0,56(sp)
	if(wtr < 1){
bfc02c10:	8fa20038 	lw	v0,56(sp)
bfc02c14:	1440000b 	bnez	v0,bfc02c44 <memctlc_DDR2_config_DTR+0x318>
bfc02c18:	00000000 	nop
		wtr = 1;
bfc02c1c:	24020001 	li	v0,1
bfc02c20:	afa20038 	sw	v0,56(sp)
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_WTR_MASK)) | (wtr << DTR0_WTR_FD_S);
bfc02c24:	8fa30060 	lw	v1,96(sp)
bfc02c28:	3c02ffff 	lui	v0,0xffff
bfc02c2c:	34420fff 	ori	v0,v0,0xfff
bfc02c30:	00621824 	and	v1,v1,v0
bfc02c34:	8fa20038 	lw	v0,56(sp)
bfc02c38:	00021300 	sll	v0,v0,0xc
bfc02c3c:	00621025 	or	v0,v1,v0
bfc02c40:	afa20060 	sw	v0,96(sp)
	}


	*dtr0 = sug_dtr[0];
bfc02c44:	8fa30060 	lw	v1,96(sp)
bfc02c48:	8fa2005c 	lw	v0,92(sp)
bfc02c4c:	ac430000 	sw	v1,0(v0)
	*dtr1 = sug_dtr[1];
bfc02c50:	8fa30064 	lw	v1,100(sp)
bfc02c54:	8fa20058 	lw	v0,88(sp)
bfc02c58:	ac430000 	sw	v1,0(v0)
	*dtr2 = sug_dtr[2];
bfc02c5c:	8fa30068 	lw	v1,104(sp)
bfc02c60:	8fa20054 	lw	v0,84(sp)
bfc02c64:	ac430000 	sw	v1,0(v0)

	return;


}
bfc02c68:	8fbf0074 	lw	ra,116(sp)
bfc02c6c:	27bd0078 	addiu	sp,sp,120
bfc02c70:	03e00008 	jr	ra
bfc02c74:	00000000 	nop

bfc02c78 <memctlc_DDR3_config_DTR>:


void memctlc_DDR3_config_DTR(void)
{
bfc02c78:	27bdff80 	addiu	sp,sp,-128
bfc02c7c:	afbf007c 	sw	ra,124(sp)
	unsigned int dram_freq_mhz;
	unsigned int std_rfc_ns, cas_10_ns, tcwl;
	unsigned int rrd, wr, cas, wtr, rtp;


	dtr0 = (volatile unsigned int *)DTR0;
bfc02c80:	3c02b800 	lui	v0,0xb800
bfc02c84:	34421008 	ori	v0,v0,0x1008
bfc02c88:	afa20064 	sw	v0,100(sp)
	dtr1 = (volatile unsigned int *)DTR1;
bfc02c8c:	3c02b800 	lui	v0,0xb800
bfc02c90:	3442100c 	ori	v0,v0,0x100c
bfc02c94:	afa20060 	sw	v0,96(sp)
	dtr2 = (volatile unsigned int *)DTR2;
bfc02c98:	3c02b800 	lui	v0,0xb800
bfc02c9c:	34421010 	ori	v0,v0,0x1010
bfc02ca0:	afa2005c 	sw	v0,92(sp)

	#if 1
	std_rfc_ns = DDR3_STD_RFC_NS;
bfc02ca4:	24020148 	li	v0,328
bfc02ca8:	afa20054 	sw	v0,84(sp)
	
	std_rfc_ns = _rfc_ns;
	#endif


	dram_freq_mhz = board_DRAM_freq_mhz();
bfc02cac:	0ff0260d 	jal	bfc09834 <board_DRAM_freq_mhz>
bfc02cb0:	00000000 	nop
bfc02cb4:	afa20058 	sw	v0,88(sp)

	if(dram_freq_mhz >= DDR3_CAS10_MAX_MHZ){
bfc02cb8:	8fa20058 	lw	v0,88(sp)
bfc02cbc:	2c42029a 	sltiu	v0,v0,666
bfc02cc0:	1440000b 	bnez	v0,bfc02cf0 <memctlc_DDR3_config_DTR+0x78>
bfc02cc4:	00000000 	nop
		cas_10_ns = (11 * 1000 * 10)/dram_freq_mhz;
bfc02cc8:	3c020001 	lui	v0,0x1
bfc02ccc:	3443adb0 	ori	v1,v0,0xadb0
bfc02cd0:	8fa20058 	lw	v0,88(sp)
bfc02cd4:	0062001b 	divu	zero,v1,v0
bfc02cd8:	004001f4 	teq	v0,zero,0x7
bfc02cdc:	00001810 	mfhi	v1
bfc02ce0:	00001012 	mflo	v0
bfc02ce4:	afa20050 	sw	v0,80(sp)
bfc02ce8:	0bf00b88 	j	bfc02e20 <memctlc_DDR3_config_DTR+0x1a8>
bfc02cec:	00000000 	nop
	}else if(dram_freq_mhz >= DDR3_CAS9_MAX_MHZ){
bfc02cf0:	8fa20058 	lw	v0,88(sp)
bfc02cf4:	2c42029a 	sltiu	v0,v0,666
bfc02cf8:	1440000b 	bnez	v0,bfc02d28 <memctlc_DDR3_config_DTR+0xb0>
bfc02cfc:	00000000 	nop
		cas_10_ns = (10 * 1000 * 10)/dram_freq_mhz;
bfc02d00:	3c020001 	lui	v0,0x1
bfc02d04:	344386a0 	ori	v1,v0,0x86a0
bfc02d08:	8fa20058 	lw	v0,88(sp)
bfc02d0c:	0062001b 	divu	zero,v1,v0
bfc02d10:	004001f4 	teq	v0,zero,0x7
bfc02d14:	00001810 	mfhi	v1
bfc02d18:	00001012 	mflo	v0
bfc02d1c:	afa20050 	sw	v0,80(sp)
bfc02d20:	0bf00b88 	j	bfc02e20 <memctlc_DDR3_config_DTR+0x1a8>
bfc02d24:	00000000 	nop
	}else if(dram_freq_mhz >= DDR3_CAS8_MAX_MHZ){
bfc02d28:	8fa20058 	lw	v0,88(sp)
bfc02d2c:	2c420215 	sltiu	v0,v0,533
bfc02d30:	1440000b 	bnez	v0,bfc02d60 <memctlc_DDR3_config_DTR+0xe8>
bfc02d34:	00000000 	nop
		cas_10_ns = (9 * 1000* 10)/dram_freq_mhz;
bfc02d38:	3c020001 	lui	v0,0x1
bfc02d3c:	34435f90 	ori	v1,v0,0x5f90
bfc02d40:	8fa20058 	lw	v0,88(sp)
bfc02d44:	0062001b 	divu	zero,v1,v0
bfc02d48:	004001f4 	teq	v0,zero,0x7
bfc02d4c:	00001810 	mfhi	v1
bfc02d50:	00001012 	mflo	v0
bfc02d54:	afa20050 	sw	v0,80(sp)
bfc02d58:	0bf00b88 	j	bfc02e20 <memctlc_DDR3_config_DTR+0x1a8>
bfc02d5c:	00000000 	nop
	}else if(dram_freq_mhz >= DDR3_CAS7_MAX_MHZ){
bfc02d60:	8fa20058 	lw	v0,88(sp)
bfc02d64:	2c420215 	sltiu	v0,v0,533
bfc02d68:	1440000b 	bnez	v0,bfc02d98 <memctlc_DDR3_config_DTR+0x120>
bfc02d6c:	00000000 	nop
		cas_10_ns = (8 * 1000 * 10)/dram_freq_mhz;
bfc02d70:	3c020001 	lui	v0,0x1
bfc02d74:	34433880 	ori	v1,v0,0x3880
bfc02d78:	8fa20058 	lw	v0,88(sp)
bfc02d7c:	0062001b 	divu	zero,v1,v0
bfc02d80:	004001f4 	teq	v0,zero,0x7
bfc02d84:	00001810 	mfhi	v1
bfc02d88:	00001012 	mflo	v0
bfc02d8c:	afa20050 	sw	v0,80(sp)
bfc02d90:	0bf00b88 	j	bfc02e20 <memctlc_DDR3_config_DTR+0x1a8>
bfc02d94:	00000000 	nop
	}else if(dram_freq_mhz >= DDR3_CAS6_MAX_MHZ){
bfc02d98:	8fa20058 	lw	v0,88(sp)
bfc02d9c:	2c420190 	sltiu	v0,v0,400
bfc02da0:	1440000b 	bnez	v0,bfc02dd0 <memctlc_DDR3_config_DTR+0x158>
bfc02da4:	00000000 	nop
		cas_10_ns = (7 * 1000 * 10)/dram_freq_mhz;
bfc02da8:	3c020001 	lui	v0,0x1
bfc02dac:	34431170 	ori	v1,v0,0x1170
bfc02db0:	8fa20058 	lw	v0,88(sp)
bfc02db4:	0062001b 	divu	zero,v1,v0
bfc02db8:	004001f4 	teq	v0,zero,0x7
bfc02dbc:	00001810 	mfhi	v1
bfc02dc0:	00001012 	mflo	v0
bfc02dc4:	afa20050 	sw	v0,80(sp)
bfc02dc8:	0bf00b88 	j	bfc02e20 <memctlc_DDR3_config_DTR+0x1a8>
bfc02dcc:	00000000 	nop
	}else if(dram_freq_mhz >= DDR3_CAS5_MAX_MHZ){
bfc02dd0:	8fa20058 	lw	v0,88(sp)
bfc02dd4:	2c420190 	sltiu	v0,v0,400
bfc02dd8:	1440000a 	bnez	v0,bfc02e04 <memctlc_DDR3_config_DTR+0x18c>
bfc02ddc:	00000000 	nop
		cas_10_ns = (6 * 1000 * 10)/dram_freq_mhz;
bfc02de0:	3403ea60 	li	v1,0xea60
bfc02de4:	8fa20058 	lw	v0,88(sp)
bfc02de8:	0062001b 	divu	zero,v1,v0
bfc02dec:	004001f4 	teq	v0,zero,0x7
bfc02df0:	00001810 	mfhi	v1
bfc02df4:	00001012 	mflo	v0
bfc02df8:	afa20050 	sw	v0,80(sp)
bfc02dfc:	0bf00b88 	j	bfc02e20 <memctlc_DDR3_config_DTR+0x1a8>
bfc02e00:	00000000 	nop
	}else{
		cas_10_ns = (5 * 1000 * 10)/dram_freq_mhz;
bfc02e04:	3403c350 	li	v1,0xc350
bfc02e08:	8fa20058 	lw	v0,88(sp)
bfc02e0c:	0062001b 	divu	zero,v1,v0
bfc02e10:	004001f4 	teq	v0,zero,0x7
bfc02e14:	00001810 	mfhi	v1
bfc02e18:	00001012 	mflo	v0
bfc02e1c:	afa20050 	sw	v0,80(sp)
	}

        _DTR_suggestion(sug_dtr, DDR3_STD_REFI_NS, DDR3_STD_RP_NS, \
bfc02e20:	27a20068 	addiu	v0,sp,104
bfc02e24:	2403002d 	li	v1,45
bfc02e28:	afa30010 	sw	v1,16(sp)
bfc02e2c:	8fa30054 	lw	v1,84(sp)
bfc02e30:	afa30014 	sw	v1,20(sp)
bfc02e34:	2403000f 	li	v1,15
bfc02e38:	afa30018 	sw	v1,24(sp)
bfc02e3c:	2403000a 	li	v1,10
bfc02e40:	afa3001c 	sw	v1,28(sp)
bfc02e44:	24030032 	li	v1,50
bfc02e48:	afa30020 	sw	v1,32(sp)
bfc02e4c:	24030008 	li	v1,8
bfc02e50:	afa30024 	sw	v1,36(sp)
bfc02e54:	24030008 	li	v1,8
bfc02e58:	afa30028 	sw	v1,40(sp)
bfc02e5c:	8fa30050 	lw	v1,80(sp)
bfc02e60:	afa3002c 	sw	v1,44(sp)
bfc02e64:	8fa30058 	lw	v1,88(sp)
bfc02e68:	afa30030 	sw	v1,48(sp)
bfc02e6c:	00402021 	move	a0,v0
bfc02e70:	24051e78 	li	a1,7800
bfc02e74:	2406000f 	li	a2,15
bfc02e78:	2407000f 	li	a3,15
bfc02e7c:	0ff00864 	jal	bfc02190 <_DTR_suggestion>
bfc02e80:	00000000 	nop
                        DDR3_STD_RCD_NS, DDR3_STD_RAS_NS, std_rfc_ns, DDR2_STD_WR_NS,\
                        DDR3_STD_RRD_NS, DDR3_STD_FAWG_NS, DDR3_STD_WTR_NS, DDR3_STD_RTP_NS,\
                        cas_10_ns, dram_freq_mhz);

	cas = ((sug_dtr[0] & DTR0_CAS_MASK) >> DTR0_CAS_FD_S);
bfc02e84:	8fa20068 	lw	v0,104(sp)
bfc02e88:	00021702 	srl	v0,v0,0x1c
bfc02e8c:	afa20040 	sw	v0,64(sp)
	if(cas < 4){
bfc02e90:	8fa20040 	lw	v0,64(sp)
bfc02e94:	2c420004 	sltiu	v0,v0,4
bfc02e98:	1040000b 	beqz	v0,bfc02ec8 <memctlc_DDR3_config_DTR+0x250>
bfc02e9c:	00000000 	nop
		cas = 4;
bfc02ea0:	24020004 	li	v0,4
bfc02ea4:	afa20040 	sw	v0,64(sp)
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_CAS_MASK)) | (cas << DTR0_CAS_FD_S);
bfc02ea8:	8fa30068 	lw	v1,104(sp)
bfc02eac:	3c020fff 	lui	v0,0xfff
bfc02eb0:	3442ffff 	ori	v0,v0,0xffff
bfc02eb4:	00621824 	and	v1,v1,v0
bfc02eb8:	8fa20040 	lw	v0,64(sp)
bfc02ebc:	00021700 	sll	v0,v0,0x1c
bfc02ec0:	00621025 	or	v0,v1,v0
bfc02ec4:	afa20068 	sw	v0,104(sp)
	}

	/* DDR3 write cas */
	if(dram_freq_mhz >= DDR3_CWL8_MAX_MHZ){
bfc02ec8:	8fa20058 	lw	v0,88(sp)
bfc02ecc:	2c420320 	sltiu	v0,v0,800
bfc02ed0:	14400005 	bnez	v0,bfc02ee8 <memctlc_DDR3_config_DTR+0x270>
bfc02ed4:	00000000 	nop
		tcwl = 7; //8		
bfc02ed8:	24020007 	li	v0,7
bfc02edc:	afa2004c 	sw	v0,76(sp)
bfc02ee0:	0bf00bdc 	j	bfc02f70 <memctlc_DDR3_config_DTR+0x2f8>
bfc02ee4:	00000000 	nop
	}
	else if(dram_freq_mhz >= DDR3_CWL7_MAX_MHZ){
bfc02ee8:	8fa20058 	lw	v0,88(sp)
bfc02eec:	2c42029a 	sltiu	v0,v0,666
bfc02ef0:	14400005 	bnez	v0,bfc02f08 <memctlc_DDR3_config_DTR+0x290>
bfc02ef4:	00000000 	nop
		tcwl = 7; //8		
bfc02ef8:	24020007 	li	v0,7
bfc02efc:	afa2004c 	sw	v0,76(sp)
bfc02f00:	0bf00bdc 	j	bfc02f70 <memctlc_DDR3_config_DTR+0x2f8>
bfc02f04:	00000000 	nop
	}
	else if(dram_freq_mhz >= 550){
bfc02f08:	8fa20058 	lw	v0,88(sp)
bfc02f0c:	2c420226 	sltiu	v0,v0,550
bfc02f10:	14400005 	bnez	v0,bfc02f28 <memctlc_DDR3_config_DTR+0x2b0>
bfc02f14:	00000000 	nop
		tcwl = 6; //7		
bfc02f18:	24020006 	li	v0,6
bfc02f1c:	afa2004c 	sw	v0,76(sp)
bfc02f20:	0bf00bdc 	j	bfc02f70 <memctlc_DDR3_config_DTR+0x2f8>
bfc02f24:	00000000 	nop
	}else if(dram_freq_mhz >= DDR3_CWL6_MAX_MHZ){
bfc02f28:	8fa20058 	lw	v0,88(sp)
bfc02f2c:	2c420215 	sltiu	v0,v0,533
bfc02f30:	14400005 	bnez	v0,bfc02f48 <memctlc_DDR3_config_DTR+0x2d0>
bfc02f34:	00000000 	nop
		tcwl = 5; //6
bfc02f38:	24020005 	li	v0,5
bfc02f3c:	afa2004c 	sw	v0,76(sp)
bfc02f40:	0bf00bdc 	j	bfc02f70 <memctlc_DDR3_config_DTR+0x2f8>
bfc02f44:	00000000 	nop
		//tcwl = 6;//7
	}else if(dram_freq_mhz >= DDR3_CWL5_MAX_MHZ){
bfc02f48:	8fa20058 	lw	v0,88(sp)
bfc02f4c:	2c420190 	sltiu	v0,v0,400
bfc02f50:	14400005 	bnez	v0,bfc02f68 <memctlc_DDR3_config_DTR+0x2f0>
bfc02f54:	00000000 	nop
		tcwl = 5;
bfc02f58:	24020005 	li	v0,5
bfc02f5c:	afa2004c 	sw	v0,76(sp)
bfc02f60:	0bf00bdc 	j	bfc02f70 <memctlc_DDR3_config_DTR+0x2f8>
bfc02f64:	00000000 	nop
	}else{
		tcwl = 4;
bfc02f68:	24020004 	li	v0,4
bfc02f6c:	afa2004c 	sw	v0,76(sp)
	}

	sug_dtr[0] = (sug_dtr[0] & (~DTR0_CWL_MASK)) | (tcwl << DTR0_CWL_FD_S);
bfc02f70:	8fa30068 	lw	v1,104(sp)
bfc02f74:	3c02ff0f 	lui	v0,0xff0f
bfc02f78:	3442ffff 	ori	v0,v0,0xffff
bfc02f7c:	00621824 	and	v1,v1,v0
bfc02f80:	8fa2004c 	lw	v0,76(sp)
bfc02f84:	00021500 	sll	v0,v0,0x14
bfc02f88:	00621025 	or	v0,v1,v0
bfc02f8c:	afa20068 	sw	v0,104(sp)

	/* DDR3 Write recovery maximum == 12 , min == 5 */
	wr = ((sug_dtr[0] & DTR0_WR_MASK) >> DTR0_WR_FD_S);
bfc02f90:	8fa30068 	lw	v1,104(sp)
bfc02f94:	3c020f00 	lui	v0,0xf00
bfc02f98:	00621024 	and	v0,v1,v0
bfc02f9c:	00021602 	srl	v0,v0,0x18
bfc02fa0:	afa20044 	sw	v0,68(sp)
	if(wr > 11){
bfc02fa4:	8fa20044 	lw	v0,68(sp)
bfc02fa8:	2c42000c 	sltiu	v0,v0,12
bfc02fac:	1440000a 	bnez	v0,bfc02fd8 <memctlc_DDR3_config_DTR+0x360>
bfc02fb0:	00000000 	nop
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_WR_MASK)) | (11 << DTR0_WR_FD_S);
bfc02fb4:	8fa30068 	lw	v1,104(sp)
bfc02fb8:	3c02f0ff 	lui	v0,0xf0ff
bfc02fbc:	3442ffff 	ori	v0,v0,0xffff
bfc02fc0:	00621824 	and	v1,v1,v0
bfc02fc4:	3c020b00 	lui	v0,0xb00
bfc02fc8:	00621025 	or	v0,v1,v0
bfc02fcc:	afa20068 	sw	v0,104(sp)
bfc02fd0:	0bf00c01 	j	bfc03004 <memctlc_DDR3_config_DTR+0x38c>
bfc02fd4:	00000000 	nop
	}else if(wr < 4){
bfc02fd8:	8fa20044 	lw	v0,68(sp)
bfc02fdc:	2c420004 	sltiu	v0,v0,4
bfc02fe0:	10400008 	beqz	v0,bfc03004 <memctlc_DDR3_config_DTR+0x38c>
bfc02fe4:	00000000 	nop
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_WR_MASK)) | (4 << DTR0_WR_FD_S);
bfc02fe8:	8fa30068 	lw	v1,104(sp)
bfc02fec:	3c02f0ff 	lui	v0,0xf0ff
bfc02ff0:	3442ffff 	ori	v0,v0,0xffff
bfc02ff4:	00621824 	and	v1,v1,v0
bfc02ff8:	3c020400 	lui	v0,0x400
bfc02ffc:	00621025 	or	v0,v1,v0
bfc03000:	afa20068 	sw	v0,104(sp)
	}else{}

	/* DDR3 Write to read delay cycle at least 4 clock cycles */
	wtr = ((sug_dtr[0] & DTR0_WTR_MASK) >> DTR0_WTR_FD_S);
bfc03004:	8fa20068 	lw	v0,104(sp)
bfc03008:	3042f000 	andi	v0,v0,0xf000
bfc0300c:	00021302 	srl	v0,v0,0xc
bfc03010:	afa2003c 	sw	v0,60(sp)
	if(wtr < 3){
bfc03014:	8fa2003c 	lw	v0,60(sp)
bfc03018:	2c420003 	sltiu	v0,v0,3
bfc0301c:	10400007 	beqz	v0,bfc0303c <memctlc_DDR3_config_DTR+0x3c4>
bfc03020:	00000000 	nop
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_WTR_MASK)) | (3 << DTR0_WTR_FD_S);
bfc03024:	8fa30068 	lw	v1,104(sp)
bfc03028:	3c02ffff 	lui	v0,0xffff
bfc0302c:	34420fff 	ori	v0,v0,0xfff
bfc03030:	00621024 	and	v0,v1,v0
bfc03034:	34423000 	ori	v0,v0,0x3000
bfc03038:	afa20068 	sw	v0,104(sp)
	}

	/* DDR3 RTP delay cycle at least 4 clock cycles */
	rtp = ((sug_dtr[0] & DTR0_RTP_MASK) >> DTR0_RTP_FD_S);
bfc0303c:	8fa30068 	lw	v1,104(sp)
bfc03040:	3c02000f 	lui	v0,0xf
bfc03044:	00621024 	and	v0,v1,v0
bfc03048:	00021402 	srl	v0,v0,0x10
bfc0304c:	afa20038 	sw	v0,56(sp)
	if(rtp < 3){
bfc03050:	8fa20038 	lw	v0,56(sp)
bfc03054:	2c420003 	sltiu	v0,v0,3
bfc03058:	10400008 	beqz	v0,bfc0307c <memctlc_DDR3_config_DTR+0x404>
bfc0305c:	00000000 	nop
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_RTP_MASK)) | (3 << DTR0_RTP_FD_S);
bfc03060:	8fa30068 	lw	v1,104(sp)
bfc03064:	3c02fff0 	lui	v0,0xfff0
bfc03068:	3442ffff 	ori	v0,v0,0xffff
bfc0306c:	00621824 	and	v1,v1,v0
bfc03070:	3c020003 	lui	v0,0x3
bfc03074:	00621025 	or	v0,v1,v0
bfc03078:	afa20068 	sw	v0,104(sp)
	}

	/* DDR3 RRD delay cycle at least 4 clock cycles */
	rrd = ((sug_dtr[1] & DTR1_RRD_MASK) >> DTR1_RRD_FD_S);
bfc0307c:	8fa2006c 	lw	v0,108(sp)
bfc03080:	3042ff00 	andi	v0,v0,0xff00
bfc03084:	00021202 	srl	v0,v0,0x8
bfc03088:	afa20048 	sw	v0,72(sp)
	if(rrd < 3){
bfc0308c:	8fa20048 	lw	v0,72(sp)
bfc03090:	2c420003 	sltiu	v0,v0,3
bfc03094:	10400007 	beqz	v0,bfc030b4 <memctlc_DDR3_config_DTR+0x43c>
bfc03098:	00000000 	nop
		sug_dtr[1] = (sug_dtr[1] & (~DTR1_RRD_MASK)) | (3 << DTR1_RRD_FD_S);
bfc0309c:	8fa3006c 	lw	v1,108(sp)
bfc030a0:	3c02ffff 	lui	v0,0xffff
bfc030a4:	344200ff 	ori	v0,v0,0xff
bfc030a8:	00621024 	and	v0,v1,v0
bfc030ac:	34420300 	ori	v0,v0,0x300
bfc030b0:	afa2006c 	sw	v0,108(sp)
	}

	*dtr0 = sug_dtr[0];
bfc030b4:	8fa30068 	lw	v1,104(sp)
bfc030b8:	8fa20064 	lw	v0,100(sp)
bfc030bc:	ac430000 	sw	v1,0(v0)
	*dtr1 = sug_dtr[1];
bfc030c0:	8fa3006c 	lw	v1,108(sp)
bfc030c4:	8fa20060 	lw	v0,96(sp)
bfc030c8:	ac430000 	sw	v1,0(v0)
	*dtr2 = sug_dtr[2];
bfc030cc:	8fa30070 	lw	v1,112(sp)
bfc030d0:	8fa2005c 	lw	v0,92(sp)
bfc030d4:	ac430000 	sw	v1,0(v0)
//check dram OK?
	if((sug_dtr[0]!= *dtr0)||(*dtr1 != sug_dtr[1]) || (*dtr2 != sug_dtr[2]))  //Added by Jason
bfc030d8:	8fa30068 	lw	v1,104(sp)
bfc030dc:	8fa20064 	lw	v0,100(sp)
bfc030e0:	8c420000 	lw	v0,0(v0)
bfc030e4:	1462000b 	bne	v1,v0,bfc03114 <memctlc_DDR3_config_DTR+0x49c>
bfc030e8:	00000000 	nop
bfc030ec:	8fa20060 	lw	v0,96(sp)
bfc030f0:	8c430000 	lw	v1,0(v0)
bfc030f4:	8fa2006c 	lw	v0,108(sp)
bfc030f8:	14620006 	bne	v1,v0,bfc03114 <memctlc_DDR3_config_DTR+0x49c>
bfc030fc:	00000000 	nop
bfc03100:	8fa2005c 	lw	v0,92(sp)
bfc03104:	8c430000 	lw	v1,0(v0)
bfc03108:	8fa20070 	lw	v0,112(sp)
bfc0310c:	10620004 	beq	v1,v0,bfc03120 <memctlc_DDR3_config_DTR+0x4a8>
bfc03110:	00000000 	nop
	{
		REG32(0xb800311c)=0;
bfc03114:	3c02b800 	lui	v0,0xb800
bfc03118:	3442311c 	ori	v0,v0,0x311c
bfc0311c:	ac400000 	sw	zero,0(v0)
	}

	return;

}
bfc03120:	8fbf007c 	lw	ra,124(sp)
bfc03124:	27bd0080 	addiu	sp,sp,128
bfc03128:	03e00008 	jr	ra
bfc0312c:	00000000 	nop

bfc03130 <memctlc_config_DTR>:


void memctlc_config_DTR(void)
{
bfc03130:	27bdffe8 	addiu	sp,sp,-24
bfc03134:	afbf0014 	sw	ra,20(sp)
	*dtr2 = CONFIG_DRAM_DTR2;
#else
	//if(memctlc_is_DDR()){
		//_memctl_debug_printf("\nmemctlc_check_DTR():DRAM Type: DDR1\n");
	//}else if(memctlc_is_DDR2()){
	if(memctlc_is_DDR2()){
bfc03138:	0ff00cbd 	jal	bfc032f4 <memctlc_is_DDR2>
bfc0313c:	00000000 	nop
bfc03140:	10400005 	beqz	v0,bfc03158 <memctlc_config_DTR+0x28>
bfc03144:	00000000 	nop
		_memctl_debug_printf("\nmemctlc_check_DTR():DRAM Type: DDR2\n");
		memctlc_DDR2_config_DTR();
bfc03148:	0ff00a4b 	jal	bfc0292c <memctlc_DDR2_config_DTR>
bfc0314c:	00000000 	nop
bfc03150:	0bf00c58 	j	bfc03160 <memctlc_config_DTR+0x30>
bfc03154:	00000000 	nop
		
	}else{
		_memctl_debug_printf("\nmemctlc_check_DTR():DRAM Type: DDR3\n");
		memctlc_DDR3_config_DTR();
bfc03158:	0ff00b1e 	jal	bfc02c78 <memctlc_DDR3_config_DTR>
bfc0315c:	00000000 	nop
	}
	

#endif
	return;
}
bfc03160:	8fbf0014 	lw	ra,20(sp)
bfc03164:	27bd0018 	addiu	sp,sp,24
bfc03168:	03e00008 	jr	ra
bfc0316c:	00000000 	nop

bfc03170 <memctlc_check_ZQ>:
 * 	None
 * Return:
 *  	None
 */
void memctlc_check_ZQ(void)
{
bfc03170:	27bdfff8 	addiu	sp,sp,-8
	volatile unsigned int *zq_cali_reg;
	volatile unsigned int *zq_cali_status_reg;


	zq_cali_reg = (volatile unsigned int *)0xB8001094;
bfc03174:	3c02b800 	lui	v0,0xb800
bfc03178:	34421094 	ori	v0,v0,0x1094
bfc0317c:	afa20004 	sw	v0,4(sp)
	zq_cali_status_reg = (volatile unsigned int *)0xB8001098;
bfc03180:	3c02b800 	lui	v0,0xb800
bfc03184:	34421098 	ori	v0,v0,0x1098
bfc03188:	afa20000 	sw	v0,0(sp)
	_memctl_debug_printf("\tZQ Program(0x%x): 0x%x\n", zq_cali_reg, *zq_cali_reg);
	_memctl_debug_printf("\tZQ Status (0x%x): 0x%x\n", zq_cali_status_reg, *zq_cali_status_reg);
	_memctl_debug_printf("\tHS0_control2 (0x%x): 0x%x\n", 0xb80000a4, REG32( 0xb80000a4));
	_memctl_debug_printf("\tHS0_control3 (0x%x): 0x%x\n", 0xb80000a8, REG32( 0xb80000a8));

	if(*zq_cali_status_reg & 0x20000000){
bfc0318c:	8fa20000 	lw	v0,0(sp)
bfc03190:	8c420000 	lw	v0,0(v0)
		_memctl_debug_printf("\tZQ calibration Fail!\n");
	}
	else{
		_memctl_debug_printf("\tZQ calibration Pass\n");
	}
}
bfc03194:	27bd0008 	addiu	sp,sp,8
bfc03198:	03e00008 	jr	ra
bfc0319c:	00000000 	nop

bfc031a0 <_get_DRAM_csnum>:
 * 	None
 * Return:
 *	DRAM total byte number.
 */
unsigned int _get_DRAM_csnum(void)
{
bfc031a0:	27bdfff8 	addiu	sp,sp,-8
    unsigned int dcr;

    dcr = *((unsigned int *)(DCR));
bfc031a4:	3c02b800 	lui	v0,0xb800
bfc031a8:	34421004 	ori	v0,v0,0x1004
bfc031ac:	8c420000 	lw	v0,0(v0)
bfc031b0:	afa20000 	sw	v0,0(sp)

    return (((dcr>>15)&1) + 1);
bfc031b4:	8fa20000 	lw	v0,0(sp)
bfc031b8:	000213c2 	srl	v0,v0,0xf
bfc031bc:	30420001 	andi	v0,v0,0x1
bfc031c0:	24420001 	addiu	v0,v0,1

}
bfc031c4:	27bd0008 	addiu	sp,sp,8
bfc031c8:	03e00008 	jr	ra
bfc031cc:	00000000 	nop

bfc031d0 <memctlc_dram_size>:
 * 	None
 * Return:
 *	DRAM total byte number.
 */
unsigned int memctlc_dram_size(void)
{
bfc031d0:	27bdfff8 	addiu	sp,sp,-8
    unsigned int dcr;
    int total_bit = 0;
bfc031d4:	afa00000 	sw	zero,0(sp)


    dcr = *((unsigned int *)(DCR));
bfc031d8:	3c02b800 	lui	v0,0xb800
bfc031dc:	34421004 	ori	v0,v0,0x1004
bfc031e0:	8c420000 	lw	v0,0(v0)
bfc031e4:	afa20004 	sw	v0,4(sp)
    total_bit = 0;
bfc031e8:	afa00000 	sw	zero,0(sp)
    total_bit += ((dcr>>24)&0x3); //bus width
bfc031ec:	8fa20004 	lw	v0,4(sp)
bfc031f0:	00021602 	srl	v0,v0,0x18
bfc031f4:	30430003 	andi	v1,v0,0x3
bfc031f8:	8fa20000 	lw	v0,0(sp)
bfc031fc:	00621021 	addu	v0,v1,v0
bfc03200:	afa20000 	sw	v0,0(sp)
   // total_bit += ((dcr>>20)&0x3)+11; //row count
    total_bit += ((dcr>>20)&0xf)+11; //row count
bfc03204:	8fa20004 	lw	v0,4(sp)
bfc03208:	00021502 	srl	v0,v0,0x14
bfc0320c:	3043000f 	andi	v1,v0,0xf
bfc03210:	8fa20000 	lw	v0,0(sp)
bfc03214:	00621021 	addu	v0,v1,v0
bfc03218:	2442000b 	addiu	v0,v0,11
bfc0321c:	afa20000 	sw	v0,0(sp)
    
   // total_bit += ((dcr>>16)&0x7)+8 ; //col count
    total_bit += ((dcr>>16)&0xf)+8 ; //col count
bfc03220:	8fa20004 	lw	v0,4(sp)
bfc03224:	00021402 	srl	v0,v0,0x10
bfc03228:	3043000f 	andi	v1,v0,0xf
bfc0322c:	8fa20000 	lw	v0,0(sp)
bfc03230:	00621021 	addu	v0,v1,v0
bfc03234:	24420008 	addiu	v0,v0,8
bfc03238:	afa20000 	sw	v0,0(sp)

	
    total_bit += ((dcr>>28)&0x3)+1;  //bank count
bfc0323c:	8fa20004 	lw	v0,4(sp)
bfc03240:	00021702 	srl	v0,v0,0x1c
bfc03244:	30430003 	andi	v1,v0,0x3
bfc03248:	8fa20000 	lw	v0,0(sp)
bfc0324c:	00621021 	addu	v0,v1,v0
bfc03250:	24420001 	addiu	v0,v0,1
bfc03254:	afa20000 	sw	v0,0(sp)
    total_bit += (dcr>>15)&1;        //Dram Chip Select
bfc03258:	8fa20004 	lw	v0,4(sp)
bfc0325c:	000213c2 	srl	v0,v0,0xf
bfc03260:	30430001 	andi	v1,v0,0x1
bfc03264:	8fa20000 	lw	v0,0(sp)
bfc03268:	00621021 	addu	v0,v1,v0
bfc0326c:	afa20000 	sw	v0,0(sp)

    return ((1<<total_bit));
bfc03270:	24030001 	li	v1,1
bfc03274:	8fa20000 	lw	v0,0(sp)
bfc03278:	00431004 	sllv	v0,v1,v0


    //return(1<<total_bit);
}
bfc0327c:	27bd0008 	addiu	sp,sp,8
bfc03280:	03e00008 	jr	ra
bfc03284:	00000000 	nop

bfc03288 <memctlc_is_DDR>:
 *  	1  -DRAM type is DDR SDRAM
 *	0  -DRAM type isn't DDR SDRAM
 */
unsigned int memctlc_is_DDR(void)
{
	if(MCR_DRAMTYPE_DDR == (REG(MCR) & MCR_DRAMTYPE_MASK))
bfc03288:	3c02b800 	lui	v0,0xb800
bfc0328c:	34421000 	ori	v0,v0,0x1000
bfc03290:	8c430000 	lw	v1,0(v0)
bfc03294:	3c02f000 	lui	v0,0xf000
bfc03298:	00621024 	and	v0,v1,v0
bfc0329c:	14400004 	bnez	v0,bfc032b0 <memctlc_is_DDR+0x28>
bfc032a0:	00000000 	nop
		return 1;
bfc032a4:	24020001 	li	v0,1
bfc032a8:	0bf00cad 	j	bfc032b4 <memctlc_is_DDR+0x2c>
bfc032ac:	00000000 	nop
	else
		return 0;
bfc032b0:	00001021 	move	v0,zero
}
bfc032b4:	03e00008 	jr	ra
bfc032b8:	00000000 	nop

bfc032bc <memctlc_is_DDR3>:
 *  	1  -DRAM type is SDR SDRAM
 *	0  -DRAM type isn't SDR SDRAM
 */
unsigned int memctlc_is_DDR3(void)
{
	if(MCR_DRAMTYPE_DDR3 == (REG(MCR) & MCR_DRAMTYPE_MASK))
bfc032bc:	3c02b800 	lui	v0,0xb800
bfc032c0:	34421000 	ori	v0,v0,0x1000
bfc032c4:	8c430000 	lw	v1,0(v0)
bfc032c8:	3c02f000 	lui	v0,0xf000
bfc032cc:	00621824 	and	v1,v1,v0
bfc032d0:	3c022000 	lui	v0,0x2000
bfc032d4:	14620004 	bne	v1,v0,bfc032e8 <memctlc_is_DDR3+0x2c>
bfc032d8:	00000000 	nop
		return 1;
bfc032dc:	24020001 	li	v0,1
bfc032e0:	0bf00cbb 	j	bfc032ec <memctlc_is_DDR3+0x30>
bfc032e4:	00000000 	nop
	else
		return 0;
bfc032e8:	00001021 	move	v0,zero
}
bfc032ec:	03e00008 	jr	ra
bfc032f0:	00000000 	nop

bfc032f4 <memctlc_is_DDR2>:
 *  	1  -DRAM type is DDR2 SDRAM
 *	0  -DRAM type isn't DDR2 SDRAM
 */
unsigned int memctlc_is_DDR2(void)
{
	if(MCR_DRAMTYPE_DDR2 == (REG(MCR) & MCR_DRAMTYPE_MASK))
bfc032f4:	3c02b800 	lui	v0,0xb800
bfc032f8:	34421000 	ori	v0,v0,0x1000
bfc032fc:	8c430000 	lw	v1,0(v0)
bfc03300:	3c02f000 	lui	v0,0xf000
bfc03304:	00621824 	and	v1,v1,v0
bfc03308:	3c021000 	lui	v0,0x1000
bfc0330c:	14620004 	bne	v1,v0,bfc03320 <memctlc_is_DDR2+0x2c>
bfc03310:	00000000 	nop
		return 1;
bfc03314:	24020001 	li	v0,1
bfc03318:	0bf00cc9 	j	bfc03324 <memctlc_is_DDR2+0x30>
bfc0331c:	00000000 	nop
	else
		return 0;
bfc03320:	00001021 	move	v0,zero
}
bfc03324:	03e00008 	jr	ra
bfc03328:	00000000 	nop

bfc0332c <_DTR_refresh_freq_mhz>:
 * Return:
 *  	0	- refi_ns is too small or refresh cycles is too large.
 *	Others	- Min. legal DRAM freq. with the current refresh cycles setting.
 */
unsigned int _DTR_refresh_freq_mhz(unsigned int refi_ns)
{
bfc0332c:	27bdffd0 	addiu	sp,sp,-48
bfc03330:	afbf002c 	sw	ra,44(sp)
bfc03334:	afa40030 	sw	a0,48(sp)
	unsigned int refi, refi_unit,refi_ns_result,dram_clk;
	unsigned int rowcnt;
	unsigned int clk_ns;
	

	refi      = 1 + ((REG(DTR0) & DTR0_REFI_MASK) >> DTR0_REFI_FD_S);
bfc03338:	3c02b800 	lui	v0,0xb800
bfc0333c:	34421008 	ori	v0,v0,0x1008
bfc03340:	8c420000 	lw	v0,0(v0)
bfc03344:	30420f00 	andi	v0,v0,0xf00
bfc03348:	00021202 	srl	v0,v0,0x8
bfc0334c:	24420001 	addiu	v0,v0,1
bfc03350:	afa20024 	sw	v0,36(sp)
	refi_unit = 32 << (((REG(DTR0) & DTR0_REFI_UNIT_MASK) >> DTR0_REFI_UNIT_FD_S));
bfc03354:	3c02b800 	lui	v0,0xb800
bfc03358:	34421008 	ori	v0,v0,0x1008
bfc0335c:	8c420000 	lw	v0,0(v0)
bfc03360:	304200f0 	andi	v0,v0,0xf0
bfc03364:	00021102 	srl	v0,v0,0x4
bfc03368:	24030020 	li	v1,32
bfc0336c:	00431004 	sllv	v0,v1,v0
bfc03370:	afa20020 	sw	v0,32(sp)

//	rowcnt    = 2048 << ((REG(DCR) & DCR_ROWCNT_MASK) >> DCR_ROWCNT_FD_S);
//	clk_ns = (ms_period * 1000000) / (refi*refi_unit*rowcnt);
	clk_ns = refi_ns / (refi*refi_unit);
bfc03374:	8fa30024 	lw	v1,36(sp)
bfc03378:	8fa20020 	lw	v0,32(sp)
bfc0337c:	70621802 	mul	v1,v1,v0
bfc03380:	8fa20030 	lw	v0,48(sp)
bfc03384:	0043001b 	divu	zero,v0,v1
bfc03388:	006001f4 	teq	v1,zero,0x7
bfc0338c:	00001810 	mfhi	v1
bfc03390:	00001012 	mflo	v0
bfc03394:	afa20010 	sw	v0,16(sp)


	#if 1		
		dram_clk=1000*100/board_DRAM_freq_mhz();
bfc03398:	0ff0260d 	jal	bfc09834 <board_DRAM_freq_mhz>
bfc0339c:	00000000 	nop
bfc033a0:	00401821 	move	v1,v0
bfc033a4:	3c020001 	lui	v0,0x1
bfc033a8:	344286a0 	ori	v0,v0,0x86a0
bfc033ac:	0043001b 	divu	zero,v0,v1
bfc033b0:	006001f4 	teq	v1,zero,0x7
bfc033b4:	00001810 	mfhi	v1
bfc033b8:	00001012 	mflo	v0
bfc033bc:	afa20018 	sw	v0,24(sp)
		refi_ns_result=(refi*refi_unit*dram_clk)/100;
bfc033c0:	8fa30024 	lw	v1,36(sp)
bfc033c4:	8fa20020 	lw	v0,32(sp)
bfc033c8:	70621802 	mul	v1,v1,v0
bfc033cc:	8fa20018 	lw	v0,24(sp)
bfc033d0:	70621802 	mul	v1,v1,v0
bfc033d4:	3c0251eb 	lui	v0,0x51eb
bfc033d8:	3442851f 	ori	v0,v0,0x851f
bfc033dc:	00620019 	multu	v1,v0
bfc033e0:	00001010 	mfhi	v0
bfc033e4:	00021142 	srl	v0,v0,0x5
bfc033e8:	afa2001c 	sw	v0,28(sp)

		if(refi_ns_result>=7800)
bfc033ec:	8fa2001c 	lw	v0,28(sp)
bfc033f0:	2c421e78 	sltiu	v0,v0,7800
bfc033f4:	14400014 	bnez	v0,bfc03448 <_DTR_refresh_freq_mhz+0x11c>
bfc033f8:	00000000 	nop
		{
		printf("\nWarning: Refresh time Over DRAM Spec 7800ns ! ");
bfc033fc:	3c02bfc1 	lui	v0,0xbfc1
bfc03400:	2444ad90 	addiu	a0,v0,-21104
bfc03404:	0ff003ac 	jal	bfc00eb0 <printf>
bfc03408:	00000000 	nop
		printf("\nrefi=%d units  ", refi);
bfc0340c:	3c02bfc1 	lui	v0,0xbfc1
bfc03410:	2444adc0 	addiu	a0,v0,-21056
bfc03414:	8fa50024 	lw	a1,36(sp)
bfc03418:	0ff003ac 	jal	bfc00eb0 <printf>
bfc0341c:	00000000 	nop
		printf("\nrefi_unit=%d DRAM_CLK  ", refi_unit);
bfc03420:	3c02bfc1 	lui	v0,0xbfc1
bfc03424:	2444add4 	addiu	a0,v0,-21036
bfc03428:	8fa50020 	lw	a1,32(sp)
bfc0342c:	0ff003ac 	jal	bfc00eb0 <printf>
bfc03430:	00000000 	nop
		printf("\nrefresh period setting=%d ns  ", refi_ns_result);
bfc03434:	3c02bfc1 	lui	v0,0xbfc1
bfc03438:	2444adf0 	addiu	a0,v0,-21008
bfc0343c:	8fa5001c 	lw	a1,28(sp)
bfc03440:	0ff003ac 	jal	bfc00eb0 <printf>
bfc03444:	00000000 	nop
			_memctl_debug_printf("\nrefresh period setting=%d ns  ", refi_ns_result);
			#endif
		}
	#endif
	
	if(clk_ns > 0){
bfc03448:	8fa20010 	lw	v0,16(sp)
bfc0344c:	10400013 	beqz	v0,bfc0349c <_DTR_refresh_freq_mhz+0x170>
bfc03450:	00000000 	nop
		//return (unsigned int)((refi*refi_unit*rowcnt)/(ms_period * 1000));
		return (unsigned int)((refi*refi_unit*1000)/refi_ns);
bfc03454:	8fa30024 	lw	v1,36(sp)
bfc03458:	8fa20020 	lw	v0,32(sp)
bfc0345c:	70622002 	mul	a0,v1,v0
bfc03460:	00801821 	move	v1,a0
bfc03464:	00031080 	sll	v0,v1,0x2
bfc03468:	00401821 	move	v1,v0
bfc0346c:	00031140 	sll	v0,v1,0x5
bfc03470:	00431023 	subu	v0,v0,v1
bfc03474:	00441021 	addu	v0,v0,a0
bfc03478:	000210c0 	sll	v0,v0,0x3
bfc0347c:	00401821 	move	v1,v0
bfc03480:	8fa20030 	lw	v0,48(sp)
bfc03484:	0062001b 	divu	zero,v1,v0
bfc03488:	004001f4 	teq	v0,zero,0x7
bfc0348c:	00001810 	mfhi	v1
bfc03490:	00001012 	mflo	v0
bfc03494:	0bf00d28 	j	bfc034a0 <_DTR_refresh_freq_mhz+0x174>
bfc03498:	00000000 	nop
	}
	else {
		_memctl_debug_printf("#Warnnig: unstable refresh period setting (%d x %d). ", refi, refi_unit);
		return 0;
bfc0349c:	00001021 	move	v0,zero
	}
}
bfc034a0:	8fbf002c 	lw	ra,44(sp)
bfc034a4:	27bd0030 	addiu	sp,sp,48
bfc034a8:	03e00008 	jr	ra
bfc034ac:	00000000 	nop

bfc034b0 <_DTR_wtr_frq_mhz>:
 * 	None
 * Return:
 *	Max. legal DRAM freq. with the current DTR(WTR) setting.
 */
unsigned int _DTR_wtr_frq_mhz(unsigned int wtr_ns)
{
bfc034b0:	27bdfff8 	addiu	sp,sp,-8
bfc034b4:	afa40008 	sw	a0,8(sp)
	unsigned int wtr;

	/* get tRP value */
	wtr = 1 + ((REG(DTR0) & DTR0_WTR_MASK) >> DTR0_WTR_FD_S);
bfc034b8:	3c02b800 	lui	v0,0xb800
bfc034bc:	34421008 	ori	v0,v0,0x1008
bfc034c0:	8c420000 	lw	v0,0(v0)
bfc034c4:	3042f000 	andi	v0,v0,0xf000
bfc034c8:	00021302 	srl	v0,v0,0xc
bfc034cc:	24420001 	addiu	v0,v0,1
bfc034d0:	afa20000 	sw	v0,0(sp)

	return ((1000*wtr)/wtr_ns); /* return number of MHz */
bfc034d4:	8fa40000 	lw	a0,0(sp)
bfc034d8:	00801821 	move	v1,a0
bfc034dc:	00031080 	sll	v0,v1,0x2
bfc034e0:	00401821 	move	v1,v0
bfc034e4:	00031140 	sll	v0,v1,0x5
bfc034e8:	00431023 	subu	v0,v0,v1
bfc034ec:	00441021 	addu	v0,v0,a0
bfc034f0:	000210c0 	sll	v0,v0,0x3
bfc034f4:	00401821 	move	v1,v0
bfc034f8:	8fa20008 	lw	v0,8(sp)
bfc034fc:	0062001b 	divu	zero,v1,v0
bfc03500:	004001f4 	teq	v0,zero,0x7
bfc03504:	00001810 	mfhi	v1
bfc03508:	00001012 	mflo	v0
}
bfc0350c:	27bd0008 	addiu	sp,sp,8
bfc03510:	03e00008 	jr	ra
bfc03514:	00000000 	nop

bfc03518 <_DTR_rtp_frq_mhz>:
 * 	None
 * Return:
 *	Max. legal DRAM freq. with the current DTR(rp) setting.
 */
unsigned int _DTR_rtp_frq_mhz(unsigned int rtp_ns)
{
bfc03518:	27bdfff8 	addiu	sp,sp,-8
bfc0351c:	afa40008 	sw	a0,8(sp)
	unsigned int rtp;

	/* get tRP value */
	rtp = 1 + ((REG(DTR0) & DTR0_RTP_MASK) >> DTR0_RTP_FD_S);
bfc03520:	3c02b800 	lui	v0,0xb800
bfc03524:	34421008 	ori	v0,v0,0x1008
bfc03528:	8c430000 	lw	v1,0(v0)
bfc0352c:	3c02000f 	lui	v0,0xf
bfc03530:	00621024 	and	v0,v1,v0
bfc03534:	00021402 	srl	v0,v0,0x10
bfc03538:	24420001 	addiu	v0,v0,1
bfc0353c:	afa20000 	sw	v0,0(sp)

	return ((1000*rtp)/rtp_ns); /* return number of MHz */
bfc03540:	8fa40000 	lw	a0,0(sp)
bfc03544:	00801821 	move	v1,a0
bfc03548:	00031080 	sll	v0,v1,0x2
bfc0354c:	00401821 	move	v1,v0
bfc03550:	00031140 	sll	v0,v1,0x5
bfc03554:	00431023 	subu	v0,v0,v1
bfc03558:	00441021 	addu	v0,v0,a0
bfc0355c:	000210c0 	sll	v0,v0,0x3
bfc03560:	00401821 	move	v1,v0
bfc03564:	8fa20008 	lw	v0,8(sp)
bfc03568:	0062001b 	divu	zero,v1,v0
bfc0356c:	004001f4 	teq	v0,zero,0x7
bfc03570:	00001810 	mfhi	v1
bfc03574:	00001012 	mflo	v0
}
bfc03578:	27bd0008 	addiu	sp,sp,8
bfc0357c:	03e00008 	jr	ra
bfc03580:	00000000 	nop

bfc03584 <_DTR_rp_frq_mhz>:
 * 	None
 * Return:
 *	Max. legal DRAM freq. with the current DTR(rp) setting.
 */
unsigned int _DTR_rp_frq_mhz(unsigned int rp_ns)
{
bfc03584:	27bdfff8 	addiu	sp,sp,-8
bfc03588:	afa40008 	sw	a0,8(sp)
	unsigned int rp;

	/* get tRP value */
	rp = 1 + ((REG(DTR1) & DTR1_RP_MASK) >> DTR1_RP_FD_S);
bfc0358c:	3c02b800 	lui	v0,0xb800
bfc03590:	3442100c 	ori	v0,v0,0x100c
bfc03594:	8c420000 	lw	v0,0(v0)
bfc03598:	00021602 	srl	v0,v0,0x18
bfc0359c:	24420001 	addiu	v0,v0,1
bfc035a0:	afa20000 	sw	v0,0(sp)
	_memctl_debug_printf("\trp(%d): ",rp );
	return ((1000*rp)/rp_ns); /* return number of MHz */
bfc035a4:	8fa40000 	lw	a0,0(sp)
bfc035a8:	00801821 	move	v1,a0
bfc035ac:	00031080 	sll	v0,v1,0x2
bfc035b0:	00401821 	move	v1,v0
bfc035b4:	00031140 	sll	v0,v1,0x5
bfc035b8:	00431023 	subu	v0,v0,v1
bfc035bc:	00441021 	addu	v0,v0,a0
bfc035c0:	000210c0 	sll	v0,v0,0x3
bfc035c4:	00401821 	move	v1,v0
bfc035c8:	8fa20008 	lw	v0,8(sp)
bfc035cc:	0062001b 	divu	zero,v1,v0
bfc035d0:	004001f4 	teq	v0,zero,0x7
bfc035d4:	00001810 	mfhi	v1
bfc035d8:	00001012 	mflo	v0
}
bfc035dc:	27bd0008 	addiu	sp,sp,8
bfc035e0:	03e00008 	jr	ra
bfc035e4:	00000000 	nop

bfc035e8 <_DTR_rrd_frq_mhz>:
 * 	None
 * Return:
 *	Max. legal DRAM freq. with the current DTR(rrd) setting.
 */
unsigned int _DTR_rrd_frq_mhz(unsigned int rrd_ns)
{
bfc035e8:	27bdfff8 	addiu	sp,sp,-8
bfc035ec:	afa40008 	sw	a0,8(sp)
	unsigned int rrd;

	/* get tRCD value */
	rrd = 1 + ((REG(DTR1) & DTR1_RRD_MASK) >> DTR1_RRD_FD_S);
bfc035f0:	3c02b800 	lui	v0,0xb800
bfc035f4:	3442100c 	ori	v0,v0,0x100c
bfc035f8:	8c420000 	lw	v0,0(v0)
bfc035fc:	3042ff00 	andi	v0,v0,0xff00
bfc03600:	00021202 	srl	v0,v0,0x8
bfc03604:	24420001 	addiu	v0,v0,1
bfc03608:	afa20000 	sw	v0,0(sp)
	_memctl_debug_printf("\trrd(%d): ",rrd);
	return ((1000*rrd)/rrd_ns); /* return number of MHz */
bfc0360c:	8fa40000 	lw	a0,0(sp)
bfc03610:	00801821 	move	v1,a0
bfc03614:	00031080 	sll	v0,v1,0x2
bfc03618:	00401821 	move	v1,v0
bfc0361c:	00031140 	sll	v0,v1,0x5
bfc03620:	00431023 	subu	v0,v0,v1
bfc03624:	00441021 	addu	v0,v0,a0
bfc03628:	000210c0 	sll	v0,v0,0x3
bfc0362c:	00401821 	move	v1,v0
bfc03630:	8fa20008 	lw	v0,8(sp)
bfc03634:	0062001b 	divu	zero,v1,v0
bfc03638:	004001f4 	teq	v0,zero,0x7
bfc0363c:	00001810 	mfhi	v1
bfc03640:	00001012 	mflo	v0
}
bfc03644:	27bd0008 	addiu	sp,sp,8
bfc03648:	03e00008 	jr	ra
bfc0364c:	00000000 	nop

bfc03650 <_DTR_fawg_frq_mhz>:
 * 	None
 * Return:
 *	Max. legal DRAM freq. with the current DTR(fawg) setting.
 */
unsigned int _DTR_fawg_frq_mhz(unsigned int fawg_ns)
{
bfc03650:	27bdfff8 	addiu	sp,sp,-8
bfc03654:	afa40008 	sw	a0,8(sp)
	unsigned int fawg;

	/* get tRCD value */
	fawg = 1 + ((REG(DTR1) & DTR1_FAWG_MASK) >> DTR1_FAWG_FD_S);
bfc03658:	3c02b800 	lui	v0,0xb800
bfc0365c:	3442100c 	ori	v0,v0,0x100c
bfc03660:	8c420000 	lw	v0,0(v0)
bfc03664:	304200ff 	andi	v0,v0,0xff
bfc03668:	24420001 	addiu	v0,v0,1
bfc0366c:	afa20000 	sw	v0,0(sp)
	_memctl_debug_printf("\tfawg(%d): ",fawg);
	return ((1000*fawg)/fawg_ns); /* return number of MHz */
bfc03670:	8fa40000 	lw	a0,0(sp)
bfc03674:	00801821 	move	v1,a0
bfc03678:	00031080 	sll	v0,v1,0x2
bfc0367c:	00401821 	move	v1,v0
bfc03680:	00031140 	sll	v0,v1,0x5
bfc03684:	00431023 	subu	v0,v0,v1
bfc03688:	00441021 	addu	v0,v0,a0
bfc0368c:	000210c0 	sll	v0,v0,0x3
bfc03690:	00401821 	move	v1,v0
bfc03694:	8fa20008 	lw	v0,8(sp)
bfc03698:	0062001b 	divu	zero,v1,v0
bfc0369c:	004001f4 	teq	v0,zero,0x7
bfc036a0:	00001810 	mfhi	v1
bfc036a4:	00001012 	mflo	v0
}
bfc036a8:	27bd0008 	addiu	sp,sp,8
bfc036ac:	03e00008 	jr	ra
bfc036b0:	00000000 	nop

bfc036b4 <_DTR_rcd_frq_mhz>:
 * 	None
 * Return:
 *	Max. legal DRAM freq. with the current DTR(rcd) setting.
 */
unsigned int _DTR_rcd_frq_mhz(unsigned int rcd_ns)
{
bfc036b4:	27bdfff8 	addiu	sp,sp,-8
bfc036b8:	afa40008 	sw	a0,8(sp)
	unsigned int rcd;

	/* get tRCD value */
	rcd = 1 + ((REG(DTR1) & DTR1_RCD_MASK) >> DTR1_RCD_FD_S);
bfc036bc:	3c02b800 	lui	v0,0xb800
bfc036c0:	3442100c 	ori	v0,v0,0x100c
bfc036c4:	8c430000 	lw	v1,0(v0)
bfc036c8:	3c0200ff 	lui	v0,0xff
bfc036cc:	00621024 	and	v0,v1,v0
bfc036d0:	00021402 	srl	v0,v0,0x10
bfc036d4:	24420001 	addiu	v0,v0,1
bfc036d8:	afa20000 	sw	v0,0(sp)
	_memctl_debug_printf("\trcd(%d): ",rcd );
	return ((1000*rcd)/rcd_ns); /* return number of MHz */
bfc036dc:	8fa40000 	lw	a0,0(sp)
bfc036e0:	00801821 	move	v1,a0
bfc036e4:	00031080 	sll	v0,v1,0x2
bfc036e8:	00401821 	move	v1,v0
bfc036ec:	00031140 	sll	v0,v1,0x5
bfc036f0:	00431023 	subu	v0,v0,v1
bfc036f4:	00441021 	addu	v0,v0,a0
bfc036f8:	000210c0 	sll	v0,v0,0x3
bfc036fc:	00401821 	move	v1,v0
bfc03700:	8fa20008 	lw	v0,8(sp)
bfc03704:	0062001b 	divu	zero,v1,v0
bfc03708:	004001f4 	teq	v0,zero,0x7
bfc0370c:	00001810 	mfhi	v1
bfc03710:	00001012 	mflo	v0
}
bfc03714:	27bd0008 	addiu	sp,sp,8
bfc03718:	03e00008 	jr	ra
bfc0371c:	00000000 	nop

bfc03720 <_DTR_ras_frq_mhz>:
 * 	None
 * Return:
 *	Max. legal DRAM freq. with the current DTR(ras) setting.
 */
unsigned int _DTR_ras_frq_mhz(unsigned int ras_ns)
{
bfc03720:	27bdfff8 	addiu	sp,sp,-8
bfc03724:	afa40008 	sw	a0,8(sp)
	unsigned int ras;

	/* get tRAS value */
	ras = 1 + ((REG(DTR2) & DTR2_RAS_MASK) >> DTR2_RAS_FD_S);
bfc03728:	3c02b800 	lui	v0,0xb800
bfc0372c:	34421010 	ori	v0,v0,0x1010
bfc03730:	8c430000 	lw	v1,0(v0)
bfc03734:	3c020003 	lui	v0,0x3
bfc03738:	3442f000 	ori	v0,v0,0xf000
bfc0373c:	00621024 	and	v0,v1,v0
bfc03740:	00021302 	srl	v0,v0,0xc
bfc03744:	24420001 	addiu	v0,v0,1
bfc03748:	afa20000 	sw	v0,0(sp)
	_memctl_debug_printf("\tras(%d): ",ras);
	return ((1000*ras)/ras_ns); /* return number of MHz */
bfc0374c:	8fa40000 	lw	a0,0(sp)
bfc03750:	00801821 	move	v1,a0
bfc03754:	00031080 	sll	v0,v1,0x2
bfc03758:	00401821 	move	v1,v0
bfc0375c:	00031140 	sll	v0,v1,0x5
bfc03760:	00431023 	subu	v0,v0,v1
bfc03764:	00441021 	addu	v0,v0,a0
bfc03768:	000210c0 	sll	v0,v0,0x3
bfc0376c:	00401821 	move	v1,v0
bfc03770:	8fa20008 	lw	v0,8(sp)
bfc03774:	0062001b 	divu	zero,v1,v0
bfc03778:	004001f4 	teq	v0,zero,0x7
bfc0377c:	00001810 	mfhi	v1
bfc03780:	00001012 	mflo	v0

}
bfc03784:	27bd0008 	addiu	sp,sp,8
bfc03788:	03e00008 	jr	ra
bfc0378c:	00000000 	nop

bfc03790 <_DTR_rfc_frq_mhz>:
 * 	None
 * Return:
 *	Max. legal DRAM freq. with the current DTR(rfc) setting.
 */
unsigned int _DTR_rfc_frq_mhz(unsigned int rfc_ns)
{
bfc03790:	27bdfff8 	addiu	sp,sp,-8
bfc03794:	afa40008 	sw	a0,8(sp)
	unsigned int rfc;

	/* get tRFC value */
	rfc = 1 + ((REG(DTR2) & DTR2_RFC_MASK) >> DTR2_RFC_FD_S);
bfc03798:	3c02b800 	lui	v0,0xb800
bfc0379c:	34421010 	ori	v0,v0,0x1010
bfc037a0:	8c420000 	lw	v0,0(v0)
bfc037a4:	00021502 	srl	v0,v0,0x14
bfc037a8:	24420001 	addiu	v0,v0,1
bfc037ac:	afa20000 	sw	v0,0(sp)
	_memctl_debug_printf("\trfc(%d): ",rfc);
	return ((1000*rfc)/rfc_ns); /* return number of MHz */
bfc037b0:	8fa40000 	lw	a0,0(sp)
bfc037b4:	00801821 	move	v1,a0
bfc037b8:	00031080 	sll	v0,v1,0x2
bfc037bc:	00401821 	move	v1,v0
bfc037c0:	00031140 	sll	v0,v1,0x5
bfc037c4:	00431023 	subu	v0,v0,v1
bfc037c8:	00441021 	addu	v0,v0,a0
bfc037cc:	000210c0 	sll	v0,v0,0x3
bfc037d0:	00401821 	move	v1,v0
bfc037d4:	8fa20008 	lw	v0,8(sp)
bfc037d8:	0062001b 	divu	zero,v1,v0
bfc037dc:	004001f4 	teq	v0,zero,0x7
bfc037e0:	00001810 	mfhi	v1
bfc037e4:	00001012 	mflo	v0
}
bfc037e8:	27bd0008 	addiu	sp,sp,8
bfc037ec:	03e00008 	jr	ra
bfc037f0:	00000000 	nop

bfc037f4 <_DTR_wr_frq_mhz>:
 *	Max. legal DRAM freq. with the current DTR(wr) setting.
 * Note:
 *	Require add 2 more DRAM clock cycles in the current design.
 */
unsigned int _DTR_wr_frq_mhz(unsigned int wr_ns)
{
bfc037f4:	27bdfff8 	addiu	sp,sp,-8
bfc037f8:	afa40008 	sw	a0,8(sp)
	unsigned int wr;

	/* get tWR value */
	wr = 1 + ((REG(DTR0) & DTR0_WR_MASK) >> DTR0_WR_FD_S);
bfc037fc:	3c02b800 	lui	v0,0xb800
bfc03800:	34421008 	ori	v0,v0,0x1008
bfc03804:	8c430000 	lw	v1,0(v0)
bfc03808:	3c020f00 	lui	v0,0xf00
bfc0380c:	00621024 	and	v0,v1,v0
bfc03810:	00021602 	srl	v0,v0,0x18
bfc03814:	24420001 	addiu	v0,v0,1
bfc03818:	afa20000 	sw	v0,0(sp)
		_memctl_debug_printf("\t#Warnning: wr < 2 too small.\n");
		return 0;
	}
	else
#endif
	return ((1000*wr)/wr_ns); /* return number of MHz */
bfc0381c:	8fa40000 	lw	a0,0(sp)
bfc03820:	00801821 	move	v1,a0
bfc03824:	00031080 	sll	v0,v1,0x2
bfc03828:	00401821 	move	v1,v0
bfc0382c:	00031140 	sll	v0,v1,0x5
bfc03830:	00431023 	subu	v0,v0,v1
bfc03834:	00441021 	addu	v0,v0,a0
bfc03838:	000210c0 	sll	v0,v0,0x3
bfc0383c:	00401821 	move	v1,v0
bfc03840:	8fa20008 	lw	v0,8(sp)
bfc03844:	0062001b 	divu	zero,v1,v0
bfc03848:	004001f4 	teq	v0,zero,0x7
bfc0384c:	00001810 	mfhi	v1
bfc03850:	00001012 	mflo	v0
}
bfc03854:	27bd0008 	addiu	sp,sp,8
bfc03858:	03e00008 	jr	ra
bfc0385c:	00000000 	nop

bfc03860 <_DTR_DDR3_MRS_setting>:
 *	None
 * Note:
 *	None
 */
void _DTR_DDR3_MRS_setting(unsigned int *sug_dtr, unsigned int *mr)
{
bfc03860:	27bdffe0 	addiu	sp,sp,-32
bfc03864:	afa40020 	sw	a0,32(sp)
bfc03868:	afa50024 	sw	a1,36(sp)
	unsigned int cas, wr, cwl, rtt_wr, rtt_nom, drv_str, dic_value;
	/* Default value of Mode registers */
	mr[0] = DMCR_MRS_MODE_MR | DDR3_MR_BURST_8 | DDR3_MR_READ_BURST_NIBBLE | \
bfc0386c:	8fa20024 	lw	v0,36(sp)
bfc03870:	3c030010 	lui	v1,0x10
bfc03874:	34631000 	ori	v1,v1,0x1000
bfc03878:	ac430000 	sw	v1,0(v0)
		DDR3_MR_TM_NOR | DDR3_MR_DLL_RESET_NO | DDR3_MR_PD_FAST |\
		DMCR_MR_MODE_EN ;

	#if 1 //350MHZ OK
	rtt_nom=120;//for RTL8198C default
bfc0387c:	24020078 	li	v0,120
bfc03880:	afa20008 	sw	v0,8(sp)
	//ocd_value=40;//for RTL8198C default
	dic_value=34;//for RTL8198C default , DRAM OCD
bfc03884:	24020022 	li	v0,34
bfc03888:	afa20000 	sw	v0,0(sp)

	rtt_wr =60;
bfc0388c:	2402003c 	li	v0,60
bfc03890:	afa2000c 	sw	v0,12(sp)
	//_memctl_debug_printf("memctlc_ddr3_dll_reset: Set dic_value(OCD)=%d)\n", dic_value);
	//_memctl_debug_printf("memctlc_ddr3_dll_reset: Set rtt_wr_value=%d)\n", rtt_wr);


	if(1){
		if(rtt_nom != 0){
bfc03894:	8fa20008 	lw	v0,8(sp)
bfc03898:	1040002f 	beqz	v0,bfc03958 <_DTR_DDR3_MRS_setting+0xf8>
bfc0389c:	00000000 	nop
	   	      switch (rtt_nom){
bfc038a0:	8fa20008 	lw	v0,8(sp)
bfc038a4:	24030028 	li	v1,40
bfc038a8:	1043001a 	beq	v0,v1,bfc03914 <_DTR_DDR3_MRS_setting+0xb4>
bfc038ac:	00000000 	nop
bfc038b0:	2c430029 	sltiu	v1,v0,41
bfc038b4:	10600009 	beqz	v1,bfc038dc <_DTR_DDR3_MRS_setting+0x7c>
bfc038b8:	00000000 	nop
bfc038bc:	24030014 	li	v1,20
bfc038c0:	1043001c 	beq	v0,v1,bfc03934 <_DTR_DDR3_MRS_setting+0xd4>
bfc038c4:	00000000 	nop
bfc038c8:	2403001e 	li	v1,30
bfc038cc:	10430015 	beq	v0,v1,bfc03924 <_DTR_DDR3_MRS_setting+0xc4>
bfc038d0:	00000000 	nop
bfc038d4:	0bf00e52 	j	bfc03948 <_DTR_DDR3_MRS_setting+0xe8>
bfc038d8:	00000000 	nop
bfc038dc:	2403003c 	li	v1,60
bfc038e0:	10430008 	beq	v0,v1,bfc03904 <_DTR_DDR3_MRS_setting+0xa4>
bfc038e4:	00000000 	nop
bfc038e8:	24030078 	li	v1,120
bfc038ec:	14430016 	bne	v0,v1,bfc03948 <_DTR_DDR3_MRS_setting+0xe8>
bfc038f0:	00000000 	nop
			case 120: /* div 2 */
				rtt_nom = DDR3_EMR1_RTT_NOM_RZQ_DIV2;
bfc038f4:	24020040 	li	v0,64
bfc038f8:	afa20008 	sw	v0,8(sp)
				break;
bfc038fc:	0bf00e57 	j	bfc0395c <_DTR_DDR3_MRS_setting+0xfc>
bfc03900:	00000000 	nop
			case 60: /* div 4*/
				rtt_nom = DDR3_EMR1_RTT_NOM_RZQ_DIV4;
bfc03904:	24020004 	li	v0,4
bfc03908:	afa20008 	sw	v0,8(sp)
				break;
bfc0390c:	0bf00e57 	j	bfc0395c <_DTR_DDR3_MRS_setting+0xfc>
bfc03910:	00000000 	nop
			case 40: /* div 6 */
				rtt_nom = DDR3_EMR1_RTT_NOM_RZQ_DIV6;
bfc03914:	24020044 	li	v0,68
bfc03918:	afa20008 	sw	v0,8(sp)
				break;
bfc0391c:	0bf00e57 	j	bfc0395c <_DTR_DDR3_MRS_setting+0xfc>
bfc03920:	00000000 	nop
			case 30: /* div 8 */
				rtt_nom = DDR3_EMR1_RTT_NOM_RZQ_DIV8;
bfc03924:	24020204 	li	v0,516
bfc03928:	afa20008 	sw	v0,8(sp)
				break;
bfc0392c:	0bf00e57 	j	bfc0395c <_DTR_DDR3_MRS_setting+0xfc>
bfc03930:	00000000 	nop
			case 20: /* div 12 */
				rtt_nom = DDR3_EMR1_RTT_NOM_RZQ_DIV12;
bfc03934:	24020200 	li	v0,512
bfc03938:	afa20008 	sw	v0,8(sp)
				break;
bfc0393c:	00000000 	nop
bfc03940:	0bf00e57 	j	bfc0395c <_DTR_DDR3_MRS_setting+0xfc>
bfc03944:	00000000 	nop
			default: /* div 2 */
				rtt_nom = DDR3_EMR1_RTT_NOM_RZQ_DIV2;
bfc03948:	24020040 	li	v0,64
bfc0394c:	afa20008 	sw	v0,8(sp)
bfc03950:	0bf00e57 	j	bfc0395c <_DTR_DDR3_MRS_setting+0xfc>
bfc03954:	00000000 	nop
				break;
			}
		}else{
			rtt_nom = DDR3_EMR1_RTT_NOM_DIS;
bfc03958:	afa00008 	sw	zero,8(sp)
	}else{
		rtt_nom = DDR3_EMR1_RTT_NOM_RZQ_DIV2;
	}

	if(1){
		switch (dic_value){
bfc0395c:	8fa30000 	lw	v1,0(sp)
bfc03960:	24020001 	li	v0,1
bfc03964:	14620004 	bne	v1,v0,bfc03978 <_DTR_DDR3_MRS_setting+0x118>
bfc03968:	00000000 	nop
			case 1: /* RZQ/6 */
				dic_value = DDR3_EMR1_DIC_RZQ_DIV6;
bfc0396c:	afa00000 	sw	zero,0(sp)
				break;
bfc03970:	0bf00e60 	j	bfc03980 <_DTR_DDR3_MRS_setting+0x120>
bfc03974:	00000000 	nop
			default: /* RZQ/7 */
				dic_value = DDR3_EMR1_DIC_RZQ_DIV7;
bfc03978:	24020002 	li	v0,2
bfc0397c:	afa20000 	sw	v0,0(sp)
	}else{
		dic_value = DDR3_EMR1_DIC_RZQ_DIV6;
	}


	mr[1] = DDR3_EMR1_DLL_EN | dic_value |\
bfc03980:	8fa20024 	lw	v0,36(sp)
bfc03984:	24420004 	addiu	v0,v0,4
		rtt_nom | DDR3_EMR1_ADD_0 | DDR3_EMR1_WRITE_LEVEL_DIS | \
		DDR3_EMR1_TDQS_DIS | DDR3_EMR1_QOFF_EN |\
bfc03988:	8fa40000 	lw	a0,0(sp)
bfc0398c:	8fa30008 	lw	v1,8(sp)
bfc03990:	00832025 	or	a0,a0,v1
	}else{
		dic_value = DDR3_EMR1_DIC_RZQ_DIV6;
	}


	mr[1] = DDR3_EMR1_DLL_EN | dic_value |\
bfc03994:	3c030011 	lui	v1,0x11
bfc03998:	00831825 	or	v1,a0,v1
bfc0399c:	ac430000 	sw	v1,0(v0)
		rtt_nom | DDR3_EMR1_ADD_0 | DDR3_EMR1_WRITE_LEVEL_DIS | \
		DDR3_EMR1_TDQS_DIS | DDR3_EMR1_QOFF_EN |\
		DMCR_MR_MODE_EN | DMCR_MRS_MODE_EMR1;

	if(1){
		if(rtt_wr != 0){
bfc039a0:	8fa2000c 	lw	v0,12(sp)
bfc039a4:	10400015 	beqz	v0,bfc039fc <_DTR_DDR3_MRS_setting+0x19c>
bfc039a8:	00000000 	nop
	   	      switch (rtt_wr){
bfc039ac:	8fa2000c 	lw	v0,12(sp)
bfc039b0:	2403003c 	li	v1,60
bfc039b4:	10430008 	beq	v0,v1,bfc039d8 <_DTR_DDR3_MRS_setting+0x178>
bfc039b8:	00000000 	nop
bfc039bc:	24030078 	li	v1,120
bfc039c0:	1443000a 	bne	v0,v1,bfc039ec <_DTR_DDR3_MRS_setting+0x18c>
bfc039c4:	00000000 	nop
			case 120: /* div 2 */
				rtt_wr = DDR3_EMR2_RTT_WR_RZQ_DIV2;
bfc039c8:	24020400 	li	v0,1024
bfc039cc:	afa2000c 	sw	v0,12(sp)
				break;
bfc039d0:	0bf00e80 	j	bfc03a00 <_DTR_DDR3_MRS_setting+0x1a0>
bfc039d4:	00000000 	nop
			case 60: /* div 4*/
				rtt_wr = DDR3_EMR2_RTT_WR_RZQ_DIV4;
bfc039d8:	24020200 	li	v0,512
bfc039dc:	afa2000c 	sw	v0,12(sp)
				break;
bfc039e0:	00000000 	nop
bfc039e4:	0bf00e80 	j	bfc03a00 <_DTR_DDR3_MRS_setting+0x1a0>
bfc039e8:	00000000 	nop
			default: /* div 2 */
				rtt_wr = DDR3_EMR2_RTT_WR_RZQ_DIV2;
bfc039ec:	24020400 	li	v0,1024
bfc039f0:	afa2000c 	sw	v0,12(sp)
bfc039f4:	0bf00e80 	j	bfc03a00 <_DTR_DDR3_MRS_setting+0x1a0>
bfc039f8:	00000000 	nop
				break;
			}
		}else{
			rtt_wr = DDR3_EMR2_RTT_WR_DIS;
bfc039fc:	afa0000c 	sw	zero,12(sp)
	}else{
		rtt_wr = DDR3_EMR2_RTT_WR_RZQ_DIV2;
	}


	mr[2] = DDR3_EMR2_PASR_FULL | DDR3_EMR2_ASR_DIS | DDR3_EMR2_SRT_NOR |\
bfc03a00:	8fa20024 	lw	v0,36(sp)
bfc03a04:	24420008 	addiu	v0,v0,8
bfc03a08:	8fa4000c 	lw	a0,12(sp)
bfc03a0c:	3c030012 	lui	v1,0x12
bfc03a10:	00831825 	or	v1,a0,v1
bfc03a14:	ac430000 	sw	v1,0(v0)
		rtt_wr | DMCR_MR_MODE_EN | DMCR_MRS_MODE_EMR2;

	mr[3] = DDR3_EMR3_MPR_OP_NOR | DDR3_EMR3_MPR_LOC_PRE_PAT |\
bfc03a18:	8fa20024 	lw	v0,36(sp)
bfc03a1c:	2442000c 	addiu	v0,v0,12
bfc03a20:	3c030013 	lui	v1,0x13
bfc03a24:	ac430000 	sw	v1,0(v0)
		DMCR_MR_MODE_EN | DMCR_MRS_MODE_EMR3;

	/* Extract CAS and WR in DTR0 */
	cas = (sug_dtr[0] & DTR0_CAS_MASK) >> DTR0_CAS_FD_S;
bfc03a28:	8fa20020 	lw	v0,32(sp)
bfc03a2c:	8c420000 	lw	v0,0(v0)
bfc03a30:	00021702 	srl	v0,v0,0x1c
bfc03a34:	afa20018 	sw	v0,24(sp)
	wr = (sug_dtr[0] & DTR0_WR_MASK) >> DTR0_WR_FD_S;
bfc03a38:	8fa20020 	lw	v0,32(sp)
bfc03a3c:	8c430000 	lw	v1,0(v0)
bfc03a40:	3c020f00 	lui	v0,0xf00
bfc03a44:	00621024 	and	v0,v1,v0
bfc03a48:	00021602 	srl	v0,v0,0x18
bfc03a4c:	afa20014 	sw	v0,20(sp)
	cwl = (sug_dtr[0] & DTR0_CWL_MASK) >> DTR0_CWL_FD_S;
bfc03a50:	8fa20020 	lw	v0,32(sp)
bfc03a54:	8c430000 	lw	v1,0(v0)
bfc03a58:	3c0200f0 	lui	v0,0xf0
bfc03a5c:	00621024 	and	v0,v1,v0
bfc03a60:	00021502 	srl	v0,v0,0x14
bfc03a64:	afa20010 	sw	v0,16(sp)
	switch (cas){
bfc03a68:	8fa20018 	lw	v0,24(sp)
bfc03a6c:	2442fffc 	addiu	v0,v0,-4
bfc03a70:	2c430007 	sltiu	v1,v0,7
bfc03a74:	10600039 	beqz	v1,bfc03b5c <_DTR_DDR3_MRS_setting+0x2fc>
bfc03a78:	00000000 	nop
bfc03a7c:	00021880 	sll	v1,v0,0x2
bfc03a80:	3c02bfc1 	lui	v0,0xbfc1
bfc03a84:	2442ae10 	addiu	v0,v0,-20976
bfc03a88:	00621021 	addu	v0,v1,v0
bfc03a8c:	8c420000 	lw	v0,0(v0)
bfc03a90:	00400008 	jr	v0
bfc03a94:	00000000 	nop
		case 4:
			mr[0] = mr[0] | DDR3_MR_CAS_5;
bfc03a98:	8fa20024 	lw	v0,36(sp)
bfc03a9c:	8c420000 	lw	v0,0(v0)
bfc03aa0:	34430010 	ori	v1,v0,0x10
bfc03aa4:	8fa20024 	lw	v0,36(sp)
bfc03aa8:	ac430000 	sw	v1,0(v0)
			break;
bfc03aac:	0bf00edc 	j	bfc03b70 <_DTR_DDR3_MRS_setting+0x310>
bfc03ab0:	00000000 	nop
		case 5:
			mr[0] = mr[0] | DDR3_MR_CAS_6;
bfc03ab4:	8fa20024 	lw	v0,36(sp)
bfc03ab8:	8c420000 	lw	v0,0(v0)
bfc03abc:	34430020 	ori	v1,v0,0x20
bfc03ac0:	8fa20024 	lw	v0,36(sp)
bfc03ac4:	ac430000 	sw	v1,0(v0)
			break;
bfc03ac8:	0bf00edc 	j	bfc03b70 <_DTR_DDR3_MRS_setting+0x310>
bfc03acc:	00000000 	nop
		case 6:
			mr[0] = mr[0] | DDR3_MR_CAS_7;
bfc03ad0:	8fa20024 	lw	v0,36(sp)
bfc03ad4:	8c420000 	lw	v0,0(v0)
bfc03ad8:	34430030 	ori	v1,v0,0x30
bfc03adc:	8fa20024 	lw	v0,36(sp)
bfc03ae0:	ac430000 	sw	v1,0(v0)
			break;
bfc03ae4:	0bf00edc 	j	bfc03b70 <_DTR_DDR3_MRS_setting+0x310>
bfc03ae8:	00000000 	nop
		case 7:
			mr[0] = mr[0] | DDR3_MR_CAS_8;
bfc03aec:	8fa20024 	lw	v0,36(sp)
bfc03af0:	8c420000 	lw	v0,0(v0)
bfc03af4:	34430040 	ori	v1,v0,0x40
bfc03af8:	8fa20024 	lw	v0,36(sp)
bfc03afc:	ac430000 	sw	v1,0(v0)
			break;
bfc03b00:	0bf00edc 	j	bfc03b70 <_DTR_DDR3_MRS_setting+0x310>
bfc03b04:	00000000 	nop
		case 8:
			mr[0] = mr[0] | DDR3_MR_CAS_9;
bfc03b08:	8fa20024 	lw	v0,36(sp)
bfc03b0c:	8c420000 	lw	v0,0(v0)
bfc03b10:	34430050 	ori	v1,v0,0x50
bfc03b14:	8fa20024 	lw	v0,36(sp)
bfc03b18:	ac430000 	sw	v1,0(v0)
			break;
bfc03b1c:	0bf00edc 	j	bfc03b70 <_DTR_DDR3_MRS_setting+0x310>
bfc03b20:	00000000 	nop
		case 9:
			mr[0] = mr[0] | DDR3_MR_CAS_10;
bfc03b24:	8fa20024 	lw	v0,36(sp)
bfc03b28:	8c420000 	lw	v0,0(v0)
bfc03b2c:	34430060 	ori	v1,v0,0x60
bfc03b30:	8fa20024 	lw	v0,36(sp)
bfc03b34:	ac430000 	sw	v1,0(v0)
			break;
bfc03b38:	0bf00edc 	j	bfc03b70 <_DTR_DDR3_MRS_setting+0x310>
bfc03b3c:	00000000 	nop
		case 10:
			mr[0] = mr[0] | DDR3_MR_CAS_11;
bfc03b40:	8fa20024 	lw	v0,36(sp)
bfc03b44:	8c420000 	lw	v0,0(v0)
bfc03b48:	34430070 	ori	v1,v0,0x70
bfc03b4c:	8fa20024 	lw	v0,36(sp)
bfc03b50:	ac430000 	sw	v1,0(v0)
			break;
bfc03b54:	0bf00edc 	j	bfc03b70 <_DTR_DDR3_MRS_setting+0x310>
bfc03b58:	00000000 	nop
		default:
			/* shall be error */
			mr[0] = mr[0] | DDR3_MR_CAS_6;
bfc03b5c:	8fa20024 	lw	v0,36(sp)
bfc03b60:	8c420000 	lw	v0,0(v0)
bfc03b64:	34430020 	ori	v1,v0,0x20
bfc03b68:	8fa20024 	lw	v0,36(sp)
bfc03b6c:	ac430000 	sw	v1,0(v0)
			break;
	}

	switch (wr){
bfc03b70:	8fa20014 	lw	v0,20(sp)
bfc03b74:	2442fffc 	addiu	v0,v0,-4
bfc03b78:	2c430008 	sltiu	v1,v0,8
bfc03b7c:	10600039 	beqz	v1,bfc03c64 <_DTR_DDR3_MRS_setting+0x404>
bfc03b80:	00000000 	nop
bfc03b84:	00021880 	sll	v1,v0,0x2
bfc03b88:	3c02bfc1 	lui	v0,0xbfc1
bfc03b8c:	2442ae2c 	addiu	v0,v0,-20948
bfc03b90:	00621021 	addu	v0,v1,v0
bfc03b94:	8c420000 	lw	v0,0(v0)
bfc03b98:	00400008 	jr	v0
bfc03b9c:	00000000 	nop
		case 4:
			mr[0] = mr[0] | DDR3_MR_WR_5;
bfc03ba0:	8fa20024 	lw	v0,36(sp)
bfc03ba4:	8c420000 	lw	v0,0(v0)
bfc03ba8:	34430200 	ori	v1,v0,0x200
bfc03bac:	8fa20024 	lw	v0,36(sp)
bfc03bb0:	ac430000 	sw	v1,0(v0)
			break;
bfc03bb4:	0bf00f1e 	j	bfc03c78 <_DTR_DDR3_MRS_setting+0x418>
bfc03bb8:	00000000 	nop
		case 5:
			mr[0] = mr[0] | DDR3_MR_WR_6;
bfc03bbc:	8fa20024 	lw	v0,36(sp)
bfc03bc0:	8c420000 	lw	v0,0(v0)
bfc03bc4:	34430400 	ori	v1,v0,0x400
bfc03bc8:	8fa20024 	lw	v0,36(sp)
bfc03bcc:	ac430000 	sw	v1,0(v0)
			break;
bfc03bd0:	0bf00f1e 	j	bfc03c78 <_DTR_DDR3_MRS_setting+0x418>
bfc03bd4:	00000000 	nop
		case 6:
			mr[0] = mr[0] | DDR3_MR_WR_7;
bfc03bd8:	8fa20024 	lw	v0,36(sp)
bfc03bdc:	8c420000 	lw	v0,0(v0)
bfc03be0:	34430600 	ori	v1,v0,0x600
bfc03be4:	8fa20024 	lw	v0,36(sp)
bfc03be8:	ac430000 	sw	v1,0(v0)
			break;
bfc03bec:	0bf00f1e 	j	bfc03c78 <_DTR_DDR3_MRS_setting+0x418>
bfc03bf0:	00000000 	nop
		case 7:
			mr[0] = mr[0] | DDR3_MR_WR_8;
bfc03bf4:	8fa20024 	lw	v0,36(sp)
bfc03bf8:	8c420000 	lw	v0,0(v0)
bfc03bfc:	34430800 	ori	v1,v0,0x800
bfc03c00:	8fa20024 	lw	v0,36(sp)
bfc03c04:	ac430000 	sw	v1,0(v0)
			break;
bfc03c08:	0bf00f1e 	j	bfc03c78 <_DTR_DDR3_MRS_setting+0x418>
bfc03c0c:	00000000 	nop
		case 8:
			mr[0] = mr[0] | DDR3_MR_WR_9;
bfc03c10:	8fa20024 	lw	v0,36(sp)
bfc03c14:	8c420000 	lw	v0,0(v0)
bfc03c18:	34430a00 	ori	v1,v0,0xa00
bfc03c1c:	8fa20024 	lw	v0,36(sp)
bfc03c20:	ac430000 	sw	v1,0(v0)
			break;
bfc03c24:	0bf00f1e 	j	bfc03c78 <_DTR_DDR3_MRS_setting+0x418>
bfc03c28:	00000000 	nop
		case 9:
			mr[0] = mr[0] | DDR3_MR_WR_10;
bfc03c2c:	8fa20024 	lw	v0,36(sp)
bfc03c30:	8c420000 	lw	v0,0(v0)
bfc03c34:	34430c00 	ori	v1,v0,0xc00
bfc03c38:	8fa20024 	lw	v0,36(sp)
bfc03c3c:	ac430000 	sw	v1,0(v0)
			break;
bfc03c40:	0bf00f1e 	j	bfc03c78 <_DTR_DDR3_MRS_setting+0x418>
bfc03c44:	00000000 	nop
		case 11:
			mr[0] = mr[0] | DDR3_MR_WR_12;
bfc03c48:	8fa20024 	lw	v0,36(sp)
bfc03c4c:	8c420000 	lw	v0,0(v0)
bfc03c50:	34430e00 	ori	v1,v0,0xe00
bfc03c54:	8fa20024 	lw	v0,36(sp)
bfc03c58:	ac430000 	sw	v1,0(v0)
			break;
bfc03c5c:	0bf00f1e 	j	bfc03c78 <_DTR_DDR3_MRS_setting+0x418>
bfc03c60:	00000000 	nop
		default:
			/* shall be error */
			mr[0] = mr[0] | DDR3_MR_WR_6;
bfc03c64:	8fa20024 	lw	v0,36(sp)
bfc03c68:	8c420000 	lw	v0,0(v0)
bfc03c6c:	34430400 	ori	v1,v0,0x400
bfc03c70:	8fa20024 	lw	v0,36(sp)
bfc03c74:	ac430000 	sw	v1,0(v0)
			break;
	}

	switch (cwl){
bfc03c78:	8fa20010 	lw	v0,16(sp)
bfc03c7c:	24030005 	li	v1,5
bfc03c80:	10430019 	beq	v0,v1,bfc03ce8 <_DTR_DDR3_MRS_setting+0x488>
bfc03c84:	00000000 	nop
bfc03c88:	2c430006 	sltiu	v1,v0,6
bfc03c8c:	10600006 	beqz	v1,bfc03ca8 <_DTR_DDR3_MRS_setting+0x448>
bfc03c90:	00000000 	nop
bfc03c94:	24030004 	li	v1,4
bfc03c98:	1043000b 	beq	v0,v1,bfc03cc8 <_DTR_DDR3_MRS_setting+0x468>
bfc03c9c:	00000000 	nop
bfc03ca0:	0bf00f55 	j	bfc03d54 <_DTR_DDR3_MRS_setting+0x4f4>
bfc03ca4:	00000000 	nop
bfc03ca8:	24030006 	li	v1,6
bfc03cac:	10430017 	beq	v0,v1,bfc03d0c <_DTR_DDR3_MRS_setting+0x4ac>
bfc03cb0:	00000000 	nop
bfc03cb4:	24030007 	li	v1,7
bfc03cb8:	1043001d 	beq	v0,v1,bfc03d30 <_DTR_DDR3_MRS_setting+0x4d0>
bfc03cbc:	00000000 	nop
bfc03cc0:	0bf00f55 	j	bfc03d54 <_DTR_DDR3_MRS_setting+0x4f4>
bfc03cc4:	00000000 	nop
		case 4:
			mr[2] = mr[2] | DDR3_EMR2_CWL_5;
bfc03cc8:	8fa20024 	lw	v0,36(sp)
bfc03ccc:	24420008 	addiu	v0,v0,8
bfc03cd0:	8fa30024 	lw	v1,36(sp)
bfc03cd4:	24630008 	addiu	v1,v1,8
bfc03cd8:	8c630000 	lw	v1,0(v1)
bfc03cdc:	ac430000 	sw	v1,0(v0)
			break;
bfc03ce0:	0bf00f5c 	j	bfc03d70 <_DTR_DDR3_MRS_setting+0x510>
bfc03ce4:	00000000 	nop
		case 5:
			mr[2] = mr[2] | DDR3_EMR2_CWL_6;
bfc03ce8:	8fa20024 	lw	v0,36(sp)
bfc03cec:	24420008 	addiu	v0,v0,8
bfc03cf0:	8fa30024 	lw	v1,36(sp)
bfc03cf4:	24630008 	addiu	v1,v1,8
bfc03cf8:	8c630000 	lw	v1,0(v1)
bfc03cfc:	34630008 	ori	v1,v1,0x8
bfc03d00:	ac430000 	sw	v1,0(v0)
			break;
bfc03d04:	0bf00f5c 	j	bfc03d70 <_DTR_DDR3_MRS_setting+0x510>
bfc03d08:	00000000 	nop
		case 6:
			mr[2] = mr[2] | DDR3_EMR2_CWL_7;
bfc03d0c:	8fa20024 	lw	v0,36(sp)
bfc03d10:	24420008 	addiu	v0,v0,8
bfc03d14:	8fa30024 	lw	v1,36(sp)
bfc03d18:	24630008 	addiu	v1,v1,8
bfc03d1c:	8c630000 	lw	v1,0(v1)
bfc03d20:	34630010 	ori	v1,v1,0x10
bfc03d24:	ac430000 	sw	v1,0(v0)
			break;
bfc03d28:	0bf00f5c 	j	bfc03d70 <_DTR_DDR3_MRS_setting+0x510>
bfc03d2c:	00000000 	nop
		case 7:
			mr[2] = mr[2] | DDR3_EMR2_CWL_8;
bfc03d30:	8fa20024 	lw	v0,36(sp)
bfc03d34:	24420008 	addiu	v0,v0,8
bfc03d38:	8fa30024 	lw	v1,36(sp)
bfc03d3c:	24630008 	addiu	v1,v1,8
bfc03d40:	8c630000 	lw	v1,0(v1)
bfc03d44:	34630018 	ori	v1,v1,0x18
bfc03d48:	ac430000 	sw	v1,0(v0)
			break;
bfc03d4c:	0bf00f5c 	j	bfc03d70 <_DTR_DDR3_MRS_setting+0x510>
bfc03d50:	00000000 	nop
		default:
			/* shall be error */
			mr[2] = mr[2] | DDR3_EMR2_CWL_6;
bfc03d54:	8fa20024 	lw	v0,36(sp)
bfc03d58:	24420008 	addiu	v0,v0,8
bfc03d5c:	8fa30024 	lw	v1,36(sp)
bfc03d60:	24630008 	addiu	v1,v1,8
bfc03d64:	8c630000 	lw	v1,0(v1)
bfc03d68:	34630008 	ori	v1,v1,0x8
bfc03d6c:	ac430000 	sw	v1,0(v0)
			break;
	}

	return;
}
bfc03d70:	27bd0020 	addiu	sp,sp,32
bfc03d74:	03e00008 	jr	ra
bfc03d78:	00000000 	nop

bfc03d7c <_DTR_DDR2_MRS_setting>:
 *	None
 * Note:
 *	None
 */
void _DTR_DDR2_MRS_setting(unsigned int *sug_dtr, unsigned int *mr)
{
bfc03d7c:	27bdfff8 	addiu	sp,sp,-8
bfc03d80:	afa40008 	sw	a0,8(sp)
bfc03d84:	afa5000c 	sw	a1,12(sp)
	unsigned int cas, wr;
	/* Default value of Mode registers */
	mr[0] = DMCR_MRS_MODE_MR | DDR2_MR_BURST_4 | DDR2_MR_BURST_SEQ | \
bfc03d88:	8fa2000c 	lw	v0,12(sp)
bfc03d8c:	3c030010 	lui	v1,0x10
bfc03d90:	34630002 	ori	v1,v1,0x2
bfc03d94:	ac430000 	sw	v1,0(v0)
		DDR2_MR_TM_NOR | DDR2_MR_DLL_RESET_NO | DDR2_MR_PD_FAST |\
		DMCR_MR_MODE_EN ;

	mr[1] = DDR2_EMR1_DLL_EN | DDR2_EMR1_DIC_FULL |\
bfc03d98:	8fa2000c 	lw	v0,12(sp)
bfc03d9c:	24420004 	addiu	v0,v0,4
bfc03da0:	3c030011 	lui	v1,0x11
bfc03da4:	ac430000 	sw	v1,0(v0)
		DDR2_EMR1_RTT_DIS | DDR2_EMR1_ADD_0 | DDR2_EMR1_OCD_EX | \
		DDR2_EMR1_QOFF_EN | DDR2_EMR1_NDQS_EN | DDR2_EMR1_RDQS_DIS |\
		DMCR_MR_MODE_EN | DMCR_MRS_MODE_EMR1;
	mr[2] = DDR2_EMR2_HTREF_DIS | DDR2_EMR2_DCC_DIS | DDR2_EMR2_PASELF_FULL |\
bfc03da8:	8fa2000c 	lw	v0,12(sp)
bfc03dac:	24420008 	addiu	v0,v0,8
bfc03db0:	3c030012 	lui	v1,0x12
bfc03db4:	ac430000 	sw	v1,0(v0)
		DMCR_MR_MODE_EN | DMCR_MRS_MODE_EMR2;

	mr[3] = DMCR_MR_MODE_EN | DMCR_MRS_MODE_EMR3;
bfc03db8:	8fa2000c 	lw	v0,12(sp)
bfc03dbc:	2442000c 	addiu	v0,v0,12
bfc03dc0:	3c030013 	lui	v1,0x13
bfc03dc4:	ac430000 	sw	v1,0(v0)

	/* Extract CAS and WR in DTR0 */
	cas = (sug_dtr[0] & DTR0_CAS_MASK) >> DTR0_CAS_FD_S;
bfc03dc8:	8fa20008 	lw	v0,8(sp)
bfc03dcc:	8c420000 	lw	v0,0(v0)
bfc03dd0:	00021702 	srl	v0,v0,0x1c
bfc03dd4:	afa20004 	sw	v0,4(sp)
	wr = (sug_dtr[0] & DTR0_WR_MASK) >> DTR0_WR_FD_S;
bfc03dd8:	8fa20008 	lw	v0,8(sp)
bfc03ddc:	8c430000 	lw	v1,0(v0)
bfc03de0:	3c020f00 	lui	v0,0xf00
bfc03de4:	00621024 	and	v0,v1,v0
bfc03de8:	00021602 	srl	v0,v0,0x18
bfc03dec:	afa20000 	sw	v0,0(sp)
	switch (cas){
bfc03df0:	8fa20004 	lw	v0,4(sp)
bfc03df4:	2c420006 	sltiu	v0,v0,6
bfc03df8:	1040002c 	beqz	v0,bfc03eac <_DTR_DDR2_MRS_setting+0x130>
bfc03dfc:	00000000 	nop
bfc03e00:	8fa20004 	lw	v0,4(sp)
bfc03e04:	00021880 	sll	v1,v0,0x2
bfc03e08:	3c02bfc1 	lui	v0,0xbfc1
bfc03e0c:	2442ae4c 	addiu	v0,v0,-20916
bfc03e10:	00621021 	addu	v0,v1,v0
bfc03e14:	8c420000 	lw	v0,0(v0)
bfc03e18:	00400008 	jr	v0
bfc03e1c:	00000000 	nop
		case 1:
			mr[0] = mr[0] | DDR2_MR_CAS_2;
bfc03e20:	8fa2000c 	lw	v0,12(sp)
bfc03e24:	8c420000 	lw	v0,0(v0)
bfc03e28:	34430020 	ori	v1,v0,0x20
bfc03e2c:	8fa2000c 	lw	v0,12(sp)
bfc03e30:	ac430000 	sw	v1,0(v0)
			break;
bfc03e34:	0bf00fb0 	j	bfc03ec0 <_DTR_DDR2_MRS_setting+0x144>
bfc03e38:	00000000 	nop
		case 2:
			mr[0] = mr[0] | DDR2_MR_CAS_3;
bfc03e3c:	8fa2000c 	lw	v0,12(sp)
bfc03e40:	8c420000 	lw	v0,0(v0)
bfc03e44:	34430030 	ori	v1,v0,0x30
bfc03e48:	8fa2000c 	lw	v0,12(sp)
bfc03e4c:	ac430000 	sw	v1,0(v0)
			break;
bfc03e50:	0bf00fb0 	j	bfc03ec0 <_DTR_DDR2_MRS_setting+0x144>
bfc03e54:	00000000 	nop
		case 3:
			mr[0] = mr[0] | DDR2_MR_CAS_4;
bfc03e58:	8fa2000c 	lw	v0,12(sp)
bfc03e5c:	8c420000 	lw	v0,0(v0)
bfc03e60:	34430040 	ori	v1,v0,0x40
bfc03e64:	8fa2000c 	lw	v0,12(sp)
bfc03e68:	ac430000 	sw	v1,0(v0)
			break;
bfc03e6c:	0bf00fb0 	j	bfc03ec0 <_DTR_DDR2_MRS_setting+0x144>
bfc03e70:	00000000 	nop
		case 4:
			mr[0] = mr[0] | DDR2_MR_CAS_5;
bfc03e74:	8fa2000c 	lw	v0,12(sp)
bfc03e78:	8c420000 	lw	v0,0(v0)
bfc03e7c:	34430050 	ori	v1,v0,0x50
bfc03e80:	8fa2000c 	lw	v0,12(sp)
bfc03e84:	ac430000 	sw	v1,0(v0)
			break;
bfc03e88:	0bf00fb0 	j	bfc03ec0 <_DTR_DDR2_MRS_setting+0x144>
bfc03e8c:	00000000 	nop
		case 5:
			mr[0] = mr[0] | DDR2_MR_CAS_6;
bfc03e90:	8fa2000c 	lw	v0,12(sp)
bfc03e94:	8c420000 	lw	v0,0(v0)
bfc03e98:	34430060 	ori	v1,v0,0x60
bfc03e9c:	8fa2000c 	lw	v0,12(sp)
bfc03ea0:	ac430000 	sw	v1,0(v0)
			break;
bfc03ea4:	0bf00fb0 	j	bfc03ec0 <_DTR_DDR2_MRS_setting+0x144>
bfc03ea8:	00000000 	nop
		default:
			mr[0] = mr[0] | DDR2_MR_CAS_6;
bfc03eac:	8fa2000c 	lw	v0,12(sp)
bfc03eb0:	8c420000 	lw	v0,0(v0)
bfc03eb4:	34430060 	ori	v1,v0,0x60
bfc03eb8:	8fa2000c 	lw	v0,12(sp)
bfc03ebc:	ac430000 	sw	v1,0(v0)
			break;
			
	}

	switch (wr){
bfc03ec0:	8fa20000 	lw	v0,0(sp)
bfc03ec4:	2c420007 	sltiu	v0,v0,7
bfc03ec8:	10400033 	beqz	v0,bfc03f98 <_DTR_DDR2_MRS_setting+0x21c>
bfc03ecc:	00000000 	nop
bfc03ed0:	8fa20000 	lw	v0,0(sp)
bfc03ed4:	00021880 	sll	v1,v0,0x2
bfc03ed8:	3c02bfc1 	lui	v0,0xbfc1
bfc03edc:	2442ae64 	addiu	v0,v0,-20892
bfc03ee0:	00621021 	addu	v0,v1,v0
bfc03ee4:	8c420000 	lw	v0,0(v0)
bfc03ee8:	00400008 	jr	v0
bfc03eec:	00000000 	nop
		case 1:
			mr[0] = mr[0] | DDR2_MR_WR_2;
bfc03ef0:	8fa2000c 	lw	v0,12(sp)
bfc03ef4:	8c420000 	lw	v0,0(v0)
bfc03ef8:	34430200 	ori	v1,v0,0x200
bfc03efc:	8fa2000c 	lw	v0,12(sp)
bfc03f00:	ac430000 	sw	v1,0(v0)
			break;
bfc03f04:	0bf00feb 	j	bfc03fac <_DTR_DDR2_MRS_setting+0x230>
bfc03f08:	00000000 	nop
		case 2:
			mr[0] = mr[0] | DDR2_MR_WR_3;
bfc03f0c:	8fa2000c 	lw	v0,12(sp)
bfc03f10:	8c420000 	lw	v0,0(v0)
bfc03f14:	34430400 	ori	v1,v0,0x400
bfc03f18:	8fa2000c 	lw	v0,12(sp)
bfc03f1c:	ac430000 	sw	v1,0(v0)
			break;
bfc03f20:	0bf00feb 	j	bfc03fac <_DTR_DDR2_MRS_setting+0x230>
bfc03f24:	00000000 	nop
		case 3:
			mr[0] = mr[0] | DDR2_MR_WR_4;
bfc03f28:	8fa2000c 	lw	v0,12(sp)
bfc03f2c:	8c420000 	lw	v0,0(v0)
bfc03f30:	34430600 	ori	v1,v0,0x600
bfc03f34:	8fa2000c 	lw	v0,12(sp)
bfc03f38:	ac430000 	sw	v1,0(v0)
			break;
bfc03f3c:	0bf00feb 	j	bfc03fac <_DTR_DDR2_MRS_setting+0x230>
bfc03f40:	00000000 	nop
		case 4:
			mr[0] = mr[0] | DDR2_MR_WR_5;
bfc03f44:	8fa2000c 	lw	v0,12(sp)
bfc03f48:	8c420000 	lw	v0,0(v0)
bfc03f4c:	34430800 	ori	v1,v0,0x800
bfc03f50:	8fa2000c 	lw	v0,12(sp)
bfc03f54:	ac430000 	sw	v1,0(v0)
			break;
bfc03f58:	0bf00feb 	j	bfc03fac <_DTR_DDR2_MRS_setting+0x230>
bfc03f5c:	00000000 	nop
		case 5:
			mr[0] = mr[0] | DDR2_MR_WR_6;
bfc03f60:	8fa2000c 	lw	v0,12(sp)
bfc03f64:	8c420000 	lw	v0,0(v0)
bfc03f68:	34430a00 	ori	v1,v0,0xa00
bfc03f6c:	8fa2000c 	lw	v0,12(sp)
bfc03f70:	ac430000 	sw	v1,0(v0)
			break;
bfc03f74:	0bf00feb 	j	bfc03fac <_DTR_DDR2_MRS_setting+0x230>
bfc03f78:	00000000 	nop
		case 6:
			mr[0] = mr[0] | DDR2_MR_WR_7;
bfc03f7c:	8fa2000c 	lw	v0,12(sp)
bfc03f80:	8c420000 	lw	v0,0(v0)
bfc03f84:	34430c00 	ori	v1,v0,0xc00
bfc03f88:	8fa2000c 	lw	v0,12(sp)
bfc03f8c:	ac430000 	sw	v1,0(v0)
			break;
bfc03f90:	0bf00feb 	j	bfc03fac <_DTR_DDR2_MRS_setting+0x230>
bfc03f94:	00000000 	nop
		default:
			mr[0] = mr[0] | DDR2_MR_WR_7;
bfc03f98:	8fa2000c 	lw	v0,12(sp)
bfc03f9c:	8c420000 	lw	v0,0(v0)
bfc03fa0:	34430c00 	ori	v1,v0,0xc00
bfc03fa4:	8fa2000c 	lw	v0,12(sp)
bfc03fa8:	ac430000 	sw	v1,0(v0)
			break;
	}

	return;
}
bfc03fac:	27bd0008 	addiu	sp,sp,8
bfc03fb0:	03e00008 	jr	ra
bfc03fb4:	00000000 	nop

bfc03fb8 <_DTR_DDR1_MRS_setting>:
 *	None
 * Note:
 *	None
 */
void _DTR_DDR1_MRS_setting(unsigned int *sug_dtr, unsigned int *mr)
{
bfc03fb8:	27bdfff8 	addiu	sp,sp,-8
bfc03fbc:	afa40008 	sw	a0,8(sp)
bfc03fc0:	afa5000c 	sw	a1,12(sp)
	unsigned int cas, buswidth;
	/* Default value of Mode registers */
	mr[0] = DMCR_MRS_MODE_MR | DDR1_MR_BURST_SEQ | DDR1_MR_OP_NOR |\
bfc03fc4:	8fa2000c 	lw	v0,12(sp)
bfc03fc8:	3c030010 	lui	v1,0x10
bfc03fcc:	ac430000 	sw	v1,0(v0)
		DMCR_MR_MODE_EN ;

	mr[1] = DMCR_MRS_MODE_EMR1 | DDR1_EMR1_DLL_EN | DDR1_EMR1_DRV_NOR |\
bfc03fd0:	8fa2000c 	lw	v0,12(sp)
bfc03fd4:	24420004 	addiu	v0,v0,4
bfc03fd8:	3c030011 	lui	v1,0x11
bfc03fdc:	ac430000 	sw	v1,0(v0)
		DMCR_MR_MODE_EN;

	/* Extract CAS and WR in DTR0 */
	cas = (REG(DTR0) & DTR0_CAS_MASK) >> DTR0_CAS_FD_S;
bfc03fe0:	3c02b800 	lui	v0,0xb800
bfc03fe4:	34421008 	ori	v0,v0,0x1008
bfc03fe8:	8c420000 	lw	v0,0(v0)
bfc03fec:	00021702 	srl	v0,v0,0x1c
bfc03ff0:	afa20004 	sw	v0,4(sp)
	buswidth = (REG(DCR) & DCR_DBUSWID_MASK) >> DCR_DBUSWID_FD_S;
bfc03ff4:	3c02b800 	lui	v0,0xb800
bfc03ff8:	34421004 	ori	v0,v0,0x1004
bfc03ffc:	8c430000 	lw	v1,0(v0)
bfc04000:	3c020f00 	lui	v0,0xf00
bfc04004:	00621024 	and	v0,v1,v0
bfc04008:	00021602 	srl	v0,v0,0x18
bfc0400c:	afa20000 	sw	v0,0(sp)
	switch (cas){
bfc04010:	8fa20004 	lw	v0,4(sp)
bfc04014:	24030001 	li	v1,1
bfc04018:	10430010 	beq	v0,v1,bfc0405c <_DTR_DDR1_MRS_setting+0xa4>
bfc0401c:	00000000 	nop
bfc04020:	2c430001 	sltiu	v1,v0,1
bfc04024:	14600006 	bnez	v1,bfc04040 <_DTR_DDR1_MRS_setting+0x88>
bfc04028:	00000000 	nop
bfc0402c:	24030002 	li	v1,2
bfc04030:	10430011 	beq	v0,v1,bfc04078 <_DTR_DDR1_MRS_setting+0xc0>
bfc04034:	00000000 	nop
bfc04038:	0bf01025 	j	bfc04094 <_DTR_DDR1_MRS_setting+0xdc>
bfc0403c:	00000000 	nop
		case 0:
			mr[0] = mr[0] | DDR1_MR_CAS_25;
bfc04040:	8fa2000c 	lw	v0,12(sp)
bfc04044:	8c420000 	lw	v0,0(v0)
bfc04048:	34430060 	ori	v1,v0,0x60
bfc0404c:	8fa2000c 	lw	v0,12(sp)
bfc04050:	ac430000 	sw	v1,0(v0)
			break;
bfc04054:	0bf0102a 	j	bfc040a8 <_DTR_DDR1_MRS_setting+0xf0>
bfc04058:	00000000 	nop
		case 1:
			mr[0] = mr[0] | DDR1_MR_CAS_2;
bfc0405c:	8fa2000c 	lw	v0,12(sp)
bfc04060:	8c420000 	lw	v0,0(v0)
bfc04064:	34430020 	ori	v1,v0,0x20
bfc04068:	8fa2000c 	lw	v0,12(sp)
bfc0406c:	ac430000 	sw	v1,0(v0)
			break;
bfc04070:	0bf0102a 	j	bfc040a8 <_DTR_DDR1_MRS_setting+0xf0>
bfc04074:	00000000 	nop
		case 2:
			mr[0] = mr[0] | DDR1_MR_CAS_3;
bfc04078:	8fa2000c 	lw	v0,12(sp)
bfc0407c:	8c420000 	lw	v0,0(v0)
bfc04080:	34430030 	ori	v1,v0,0x30
bfc04084:	8fa2000c 	lw	v0,12(sp)
bfc04088:	ac430000 	sw	v1,0(v0)
			break;
bfc0408c:	0bf0102a 	j	bfc040a8 <_DTR_DDR1_MRS_setting+0xf0>
bfc04090:	00000000 	nop
		default:
			mr[0] = mr[0] | DDR1_MR_CAS_3;
bfc04094:	8fa2000c 	lw	v0,12(sp)
bfc04098:	8c420000 	lw	v0,0(v0)
bfc0409c:	34430030 	ori	v1,v0,0x30
bfc040a0:	8fa2000c 	lw	v0,12(sp)
bfc040a4:	ac430000 	sw	v1,0(v0)
			break;
			
	}

	switch (buswidth){
bfc040a8:	8fa20000 	lw	v0,0(sp)
bfc040ac:	10400006 	beqz	v0,bfc040c8 <_DTR_DDR1_MRS_setting+0x110>
bfc040b0:	00000000 	nop
bfc040b4:	24030001 	li	v1,1
bfc040b8:	1043000a 	beq	v0,v1,bfc040e4 <_DTR_DDR1_MRS_setting+0x12c>
bfc040bc:	00000000 	nop
bfc040c0:	0bf01040 	j	bfc04100 <_DTR_DDR1_MRS_setting+0x148>
bfc040c4:	00000000 	nop
		case 0:
			mr[0] = mr[0] | DDR1_MR_BURST_4;
bfc040c8:	8fa2000c 	lw	v0,12(sp)
bfc040cc:	8c420000 	lw	v0,0(v0)
bfc040d0:	34430002 	ori	v1,v0,0x2
bfc040d4:	8fa2000c 	lw	v0,12(sp)
bfc040d8:	ac430000 	sw	v1,0(v0)
			break;
bfc040dc:	0bf01045 	j	bfc04114 <_DTR_DDR1_MRS_setting+0x15c>
bfc040e0:	00000000 	nop
		case 1:
			mr[0] = mr[0] | DDR1_MR_BURST_2;
bfc040e4:	8fa2000c 	lw	v0,12(sp)
bfc040e8:	8c420000 	lw	v0,0(v0)
bfc040ec:	34430001 	ori	v1,v0,0x1
bfc040f0:	8fa2000c 	lw	v0,12(sp)
bfc040f4:	ac430000 	sw	v1,0(v0)
			break;
bfc040f8:	0bf01045 	j	bfc04114 <_DTR_DDR1_MRS_setting+0x15c>
bfc040fc:	00000000 	nop
		default:
			mr[0] = mr[0] | DDR1_MR_BURST_2;
bfc04100:	8fa2000c 	lw	v0,12(sp)
bfc04104:	8c420000 	lw	v0,0(v0)
bfc04108:	34430001 	ori	v1,v0,0x1
bfc0410c:	8fa2000c 	lw	v0,12(sp)
bfc04110:	ac430000 	sw	v1,0(v0)
			break;
	}

	return;
}
bfc04114:	27bd0008 	addiu	sp,sp,8
bfc04118:	03e00008 	jr	ra
bfc0411c:	00000000 	nop

bfc04120 <_DTR_wr>:
 * 	None
 * Return:
 *	Clock cycles of WR.
 */
unsigned int _DTR_wr(void)
{
bfc04120:	27bdfff8 	addiu	sp,sp,-8
	unsigned int wr;

	wr = ((REG(DTR0) & DTR0_WR_MASK) >> DTR0_WR_FD_S);
bfc04124:	3c02b800 	lui	v0,0xb800
bfc04128:	34421008 	ori	v0,v0,0x1008
bfc0412c:	8c430000 	lw	v1,0(v0)
bfc04130:	3c020f00 	lui	v0,0xf00
bfc04134:	00621024 	and	v0,v1,v0
bfc04138:	00021602 	srl	v0,v0,0x18
bfc0413c:	afa20000 	sw	v0,0(sp)

	return wr+1;
bfc04140:	8fa20000 	lw	v0,0(sp)
bfc04144:	24420001 	addiu	v0,v0,1
}
bfc04148:	27bd0008 	addiu	sp,sp,8
bfc0414c:	03e00008 	jr	ra
bfc04150:	00000000 	nop

bfc04154 <_DTR_rrd>:
 * 	None
 * Return:
 *	Clock cycles of RRD.
 */
unsigned int _DTR_rrd(void)
{
bfc04154:	27bdfff8 	addiu	sp,sp,-8
	unsigned int rrd;

	rrd = ((REG(DTR1) & DTR1_RRD_MASK) >> DTR1_RRD_FD_S);
bfc04158:	3c02b800 	lui	v0,0xb800
bfc0415c:	3442100c 	ori	v0,v0,0x100c
bfc04160:	8c420000 	lw	v0,0(v0)
bfc04164:	3042ff00 	andi	v0,v0,0xff00
bfc04168:	00021202 	srl	v0,v0,0x8
bfc0416c:	afa20000 	sw	v0,0(sp)

	return rrd+1;
bfc04170:	8fa20000 	lw	v0,0(sp)
bfc04174:	24420001 	addiu	v0,v0,1
}
bfc04178:	27bd0008 	addiu	sp,sp,8
bfc0417c:	03e00008 	jr	ra
bfc04180:	00000000 	nop

bfc04184 <_DTR_rtp>:
 * 	None
 * Return:
 *	Clock cycles of RTP latency
 */
unsigned int _DTR_rtp(void)
{
bfc04184:	27bdfff8 	addiu	sp,sp,-8
	unsigned int rtp;

	rtp = ((REG(DTR0) & DTR0_RTP_MASK) >> DTR0_RTP_FD_S);
bfc04188:	3c02b800 	lui	v0,0xb800
bfc0418c:	34421008 	ori	v0,v0,0x1008
bfc04190:	8c430000 	lw	v1,0(v0)
bfc04194:	3c02000f 	lui	v0,0xf
bfc04198:	00621024 	and	v0,v1,v0
bfc0419c:	00021402 	srl	v0,v0,0x10
bfc041a0:	afa20000 	sw	v0,0(sp)

	return rtp+1;
bfc041a4:	8fa20000 	lw	v0,0(sp)
bfc041a8:	24420001 	addiu	v0,v0,1
}
bfc041ac:	27bd0008 	addiu	sp,sp,8
bfc041b0:	03e00008 	jr	ra
bfc041b4:	00000000 	nop

bfc041b8 <_DTR_wtr>:
 * 	None
 * Return:
 *	Clock cycles of WTR latency
 */
unsigned int _DTR_wtr(void)
{
bfc041b8:	27bdfff8 	addiu	sp,sp,-8
	unsigned int wtr;

	wtr = ((REG(DTR0) & DTR0_WTR_MASK) >> DTR0_WTR_FD_S);
bfc041bc:	3c02b800 	lui	v0,0xb800
bfc041c0:	34421008 	ori	v0,v0,0x1008
bfc041c4:	8c420000 	lw	v0,0(v0)
bfc041c8:	3042f000 	andi	v0,v0,0xf000
bfc041cc:	00021302 	srl	v0,v0,0xc
bfc041d0:	afa20000 	sw	v0,0(sp)

	return wtr+1;
bfc041d4:	8fa20000 	lw	v0,0(sp)
bfc041d8:	24420001 	addiu	v0,v0,1
}
bfc041dc:	27bd0008 	addiu	sp,sp,8
bfc041e0:	03e00008 	jr	ra
bfc041e4:	00000000 	nop

bfc041e8 <_DTR_cwl>:
 * 	None
 * Return:
 *	Write Cas latency.
 */
unsigned int _DTR_cwl(void)
{
bfc041e8:	27bdfff8 	addiu	sp,sp,-8
	unsigned int cwl;

	cwl = ((REG(DTR0) & DTR0_CWL_MASK) >> DTR0_CWL_FD_S);
bfc041ec:	3c02b800 	lui	v0,0xb800
bfc041f0:	34421008 	ori	v0,v0,0x1008
bfc041f4:	8c430000 	lw	v1,0(v0)
bfc041f8:	3c0200f0 	lui	v0,0xf0
bfc041fc:	00621024 	and	v0,v1,v0
bfc04200:	00021502 	srl	v0,v0,0x14
bfc04204:	afa20000 	sw	v0,0(sp)

	return cwl+1;
bfc04208:	8fa20000 	lw	v0,0(sp)
bfc0420c:	24420001 	addiu	v0,v0,1
}
bfc04210:	27bd0008 	addiu	sp,sp,8
bfc04214:	03e00008 	jr	ra
bfc04218:	00000000 	nop

bfc0421c <_DTR_two_cas>:
 * 	None
 * Return:
 *	Cas latency x 2. (Why x2? We have 2.5 cas latency setting.)
 */
unsigned int _DTR_two_cas(void)
{
bfc0421c:	27bdfff8 	addiu	sp,sp,-8
	unsigned int cas;

	cas = ((REG(DTR0) & DTR0_CAS_MASK) >> DTR0_CAS_FD_S);
bfc04220:	3c02b800 	lui	v0,0xb800
bfc04224:	34421008 	ori	v0,v0,0x1008
bfc04228:	8c420000 	lw	v0,0(v0)
bfc0422c:	00021702 	srl	v0,v0,0x1c
bfc04230:	afa20000 	sw	v0,0(sp)

	switch (cas) {
bfc04234:	8fa20000 	lw	v0,0(sp)
bfc04238:	14400004 	bnez	v0,bfc0424c <_DTR_two_cas+0x30>
bfc0423c:	00000000 	nop
		case 0:
			return 5; /* 2.5 x 2 */
bfc04240:	24020005 	li	v0,5
bfc04244:	0bf01096 	j	bfc04258 <_DTR_two_cas+0x3c>
bfc04248:	00000000 	nop
		default:
			return (cas+1)*2;
bfc0424c:	8fa20000 	lw	v0,0(sp)
bfc04250:	24420001 	addiu	v0,v0,1
bfc04254:	00021040 	sll	v0,v0,0x1
	}
}
bfc04258:	27bd0008 	addiu	sp,sp,8
bfc0425c:	03e00008 	jr	ra
bfc04260:	00000000 	nop

bfc04264 <_DCR_get_buswidth>:
 * 	None
 * Return:
 *	the number of bit of the bus width setting in DCR(dbuswid)
 */
unsigned int _DCR_get_buswidth(void)
{
bfc04264:	27bdfff8 	addiu	sp,sp,-8
	unsigned int buswidth;

	buswidth = ((REG(DCR) & DCR_DBUSWID_MASK) >> DCR_DBUSWID_FD_S);
bfc04268:	3c02b800 	lui	v0,0xb800
bfc0426c:	34421004 	ori	v0,v0,0x1004
bfc04270:	8c430000 	lw	v1,0(v0)
bfc04274:	3c020f00 	lui	v0,0xf00
bfc04278:	00621024 	and	v0,v1,v0
bfc0427c:	00021602 	srl	v0,v0,0x18
bfc04280:	afa20000 	sw	v0,0(sp)

	switch (buswidth) {
bfc04284:	8fa20000 	lw	v0,0(sp)
bfc04288:	24030001 	li	v1,1
bfc0428c:	1043000c 	beq	v0,v1,bfc042c0 <_DCR_get_buswidth+0x5c>
bfc04290:	00000000 	nop
bfc04294:	2c430001 	sltiu	v1,v0,1
bfc04298:	14600006 	bnez	v1,bfc042b4 <_DCR_get_buswidth+0x50>
bfc0429c:	00000000 	nop
bfc042a0:	24030002 	li	v1,2
bfc042a4:	10430009 	beq	v0,v1,bfc042cc <_DCR_get_buswidth+0x68>
bfc042a8:	00000000 	nop
bfc042ac:	0bf010b6 	j	bfc042d8 <_DCR_get_buswidth+0x74>
bfc042b0:	00000000 	nop
		case 0:
			return (8);
bfc042b4:	24020008 	li	v0,8
bfc042b8:	0bf010b7 	j	bfc042dc <_DCR_get_buswidth+0x78>
bfc042bc:	00000000 	nop
		case 1:
			return (16);
bfc042c0:	24020010 	li	v0,16
bfc042c4:	0bf010b7 	j	bfc042dc <_DCR_get_buswidth+0x78>
bfc042c8:	00000000 	nop
		case 2:
			return (32); 
bfc042cc:	24020020 	li	v0,32
bfc042d0:	0bf010b7 	j	bfc042dc <_DCR_get_buswidth+0x78>
bfc042d4:	00000000 	nop
		default:
			_memctl_debug_printf("#Error: error bus width setting (11)\n");
			return 0;
bfc042d8:	00001021 	move	v0,zero
	}

}
bfc042dc:	27bd0008 	addiu	sp,sp,8
bfc042e0:	03e00008 	jr	ra
bfc042e4:	00000000 	nop

bfc042e8 <_DCR_get_chipsel>:
 * 	None
 * Return:
 *	the number of chips of the chip number setting in DCR(dchipsel)
 */
unsigned int _DCR_get_chipsel(void)
{
bfc042e8:	27bdfff8 	addiu	sp,sp,-8
	unsigned int chipsel;

	chipsel = ((REG(DCR) & DCR_DCHIPSEL_MASK) >> DCR_DCHIPSEL_FD_S);
bfc042ec:	3c02b800 	lui	v0,0xb800
bfc042f0:	34421004 	ori	v0,v0,0x1004
bfc042f4:	8c420000 	lw	v0,0(v0)
bfc042f8:	30428000 	andi	v0,v0,0x8000
bfc042fc:	000213c2 	srl	v0,v0,0xf
bfc04300:	afa20000 	sw	v0,0(sp)

	if(chipsel)
bfc04304:	8fa20000 	lw	v0,0(sp)
bfc04308:	10400004 	beqz	v0,bfc0431c <_DCR_get_chipsel+0x34>
bfc0430c:	00000000 	nop
		return 2;
bfc04310:	24020002 	li	v0,2
bfc04314:	0bf010c8 	j	bfc04320 <_DCR_get_chipsel+0x38>
bfc04318:	00000000 	nop
	else
		return 1;
bfc0431c:	24020001 	li	v0,1
}
bfc04320:	27bd0008 	addiu	sp,sp,8
bfc04324:	03e00008 	jr	ra
bfc04328:	00000000 	nop

bfc0432c <_DCR_get_rowcnt>:
 * 	None
 * Return:
 *	the number of row count of the row count setting in DCR(rowcnt)
 */
unsigned int _DCR_get_rowcnt(void)
{
bfc0432c:	27bdfff8 	addiu	sp,sp,-8
	unsigned int rowcnt;

	rowcnt = ((REG(DCR) & DCR_ROWCNT_MASK) >> DCR_ROWCNT_FD_S);
bfc04330:	3c02b800 	lui	v0,0xb800
bfc04334:	34421004 	ori	v0,v0,0x1004
bfc04338:	8c430000 	lw	v1,0(v0)
bfc0433c:	3c0200f0 	lui	v0,0xf0
bfc04340:	00621024 	and	v0,v1,v0
bfc04344:	00021502 	srl	v0,v0,0x14
bfc04348:	afa20000 	sw	v0,0(sp)
	
	return (2048 << rowcnt);
bfc0434c:	8fa20000 	lw	v0,0(sp)
bfc04350:	24030800 	li	v1,2048
bfc04354:	00431004 	sllv	v0,v1,v0
}
bfc04358:	27bd0008 	addiu	sp,sp,8
bfc0435c:	03e00008 	jr	ra
bfc04360:	00000000 	nop

bfc04364 <_DCR_get_colcnt>:
 * 	None
 * Return:
 *	the number of columns of the column count setting in DCR(colcnt)
 */
unsigned int _DCR_get_colcnt(void)
{
bfc04364:	27bdfff8 	addiu	sp,sp,-8
	unsigned int colcnt;

	colcnt = ((REG(DCR) & DCR_COLCNT_MASK) >> DCR_COLCNT_FD_S);
bfc04368:	3c02b800 	lui	v0,0xb800
bfc0436c:	34421004 	ori	v0,v0,0x1004
bfc04370:	8c430000 	lw	v1,0(v0)
bfc04374:	3c02000f 	lui	v0,0xf
bfc04378:	00621024 	and	v0,v1,v0
bfc0437c:	00021402 	srl	v0,v0,0x10
bfc04380:	afa20000 	sw	v0,0(sp)

	if(4 < colcnt){
bfc04384:	8fa20000 	lw	v0,0(sp)
bfc04388:	2c420005 	sltiu	v0,v0,5
bfc0438c:	14400004 	bnez	v0,bfc043a0 <_DCR_get_colcnt+0x3c>
bfc04390:	00000000 	nop
		_memctl_debug_printf("#Eror: error colcnt setting. ( > 4)\n");		
		return 0;
bfc04394:	00001021 	move	v0,zero
bfc04398:	0bf010eb 	j	bfc043ac <_DCR_get_colcnt+0x48>
bfc0439c:	00000000 	nop
	}
	else
		return (256 << colcnt);
bfc043a0:	8fa20000 	lw	v0,0(sp)
bfc043a4:	24030100 	li	v1,256
bfc043a8:	00431004 	sllv	v0,v1,v0

}
bfc043ac:	27bd0008 	addiu	sp,sp,8
bfc043b0:	03e00008 	jr	ra
bfc043b4:	00000000 	nop

bfc043b8 <_DCR_get_bankcnt>:
 * 	None
 * Return:
 *	the number of banks of the bank count setting in DCR(bankcnt)
 */
unsigned int _DCR_get_bankcnt(void)
{
bfc043b8:	27bdfff8 	addiu	sp,sp,-8
	unsigned int bankcnt;

	bankcnt = ((REG(DCR) & DCR_BANKCNT_MASK) >> DCR_BANKCNT_FD_S);
bfc043bc:	3c02b800 	lui	v0,0xb800
bfc043c0:	34421004 	ori	v0,v0,0x1004
bfc043c4:	8c420000 	lw	v0,0(v0)
bfc043c8:	00021702 	srl	v0,v0,0x1c
bfc043cc:	afa20000 	sw	v0,0(sp)
	
	switch (bankcnt)
bfc043d0:	8fa20000 	lw	v0,0(sp)
bfc043d4:	24030001 	li	v1,1
bfc043d8:	1043000c 	beq	v0,v1,bfc0440c <_DCR_get_bankcnt+0x54>
bfc043dc:	00000000 	nop
bfc043e0:	2c430001 	sltiu	v1,v0,1
bfc043e4:	14600006 	bnez	v1,bfc04400 <_DCR_get_bankcnt+0x48>
bfc043e8:	00000000 	nop
bfc043ec:	24030002 	li	v1,2
bfc043f0:	10430009 	beq	v0,v1,bfc04418 <_DCR_get_bankcnt+0x60>
bfc043f4:	00000000 	nop
bfc043f8:	0bf01109 	j	bfc04424 <_DCR_get_bankcnt+0x6c>
bfc043fc:	00000000 	nop
	{
		case 0:
			return 2;
bfc04400:	24020002 	li	v0,2
bfc04404:	0bf0110b 	j	bfc0442c <_DCR_get_bankcnt+0x74>
bfc04408:	00000000 	nop
		case 1:
			return 4;
bfc0440c:	24020004 	li	v0,4
bfc04410:	0bf0110b 	j	bfc0442c <_DCR_get_bankcnt+0x74>
bfc04414:	00000000 	nop
		case 2:
			return 8;
bfc04418:	24020008 	li	v0,8
bfc0441c:	0bf0110b 	j	bfc0442c <_DCR_get_bankcnt+0x74>
bfc04420:	00000000 	nop
bfc04424:	0bf0110b 	j	bfc0442c <_DCR_get_bankcnt+0x74>
bfc04428:	00000000 	nop
	}
}
bfc0442c:	27bd0008 	addiu	sp,sp,8
bfc04430:	03e00008 	jr	ra
bfc04434:	00000000 	nop

bfc04438 <memctlc_check_DQS_range>:
 * 	None
 * Return:
 *  	None
 */
void memctlc_check_DQS_range(void)
{
bfc04438:	27bdffd0 	addiu	sp,sp,-48
bfc0443c:	afbf002c 	sw	ra,44(sp)
	unsigned int dqs0_tap, dqs1_tap, cal_mode;
	unsigned int dram_freq_mhz, index;
	
	dqs0_tap = (REG(DDCR) & DDCR_DQS0_TAP_MASK) >> DDCR_DQS0_TAP_FD_S;
bfc04440:	3c02b800 	lui	v0,0xb800
bfc04444:	34421050 	ori	v0,v0,0x1050
bfc04448:	8c430000 	lw	v1,0(v0)
bfc0444c:	3c023e00 	lui	v0,0x3e00
bfc04450:	00621024 	and	v0,v1,v0
bfc04454:	00021642 	srl	v0,v0,0x19
bfc04458:	afa20020 	sw	v0,32(sp)
	dqs1_tap = (REG(DDCR) & DDCR_DQS1_TAP_MASK) >> DDCR_DQS1_TAP_FD_S;
bfc0445c:	3c02b800 	lui	v0,0xb800
bfc04460:	34421050 	ori	v0,v0,0x1050
bfc04464:	8c430000 	lw	v1,0(v0)
bfc04468:	3c0201f0 	lui	v0,0x1f0
bfc0446c:	00621024 	and	v0,v1,v0
bfc04470:	00021502 	srl	v0,v0,0x14
bfc04474:	afa2001c 	sw	v0,28(sp)
	cal_mode = (REG(DDCR) & DDCR_CAL_MODE_MASK) >> DDCR_CAL_MODE_FD_S;
bfc04478:	3c02b800 	lui	v0,0xb800
bfc0447c:	34421050 	ori	v0,v0,0x1050
bfc04480:	8c420000 	lw	v0,0(v0)
bfc04484:	000217c2 	srl	v0,v0,0x1f
bfc04488:	afa20018 	sw	v0,24(sp)
	else
		_memctl_debug_printf("\tCAL_MODE: DLL\n");


	_memctl_debug_printf("\tDQS0_tap = %d, DQS1_tap = %d : ", dqs0_tap, dqs1_tap);
	dram_freq_mhz = board_DRAM_freq_mhz();
bfc0448c:	0ff0260d 	jal	bfc09834 <board_DRAM_freq_mhz>
bfc04490:	00000000 	nop
bfc04494:	afa20014 	sw	v0,20(sp)
	for(index = 0; index < (sizeof(DQS_RANGE)/sizeof(tap_info_t)); index++){
bfc04498:	afa00010 	sw	zero,16(sp)
bfc0449c:	0bf0113f 	j	bfc044fc <memctlc_check_DQS_range+0xc4>
bfc044a0:	00000000 	nop
		if(DQS_RANGE[index].mode == cal_mode){
bfc044a4:	8fa30010 	lw	v1,16(sp)
bfc044a8:	3c02bfc1 	lui	v0,0xbfc1
bfc044ac:	00031900 	sll	v1,v1,0x4
bfc044b0:	2442b628 	addiu	v0,v0,-18904
bfc044b4:	00621021 	addu	v0,v1,v0
bfc044b8:	8c430000 	lw	v1,0(v0)
bfc044bc:	8fa20018 	lw	v0,24(sp)
bfc044c0:	1462000b 	bne	v1,v0,bfc044f0 <memctlc_check_DQS_range+0xb8>
bfc044c4:	00000000 	nop
			if(DQS_RANGE[index].mhz >= dram_freq_mhz)
bfc044c8:	8fa20010 	lw	v0,16(sp)
bfc044cc:	3c03bfc1 	lui	v1,0xbfc1
bfc044d0:	2463b628 	addiu	v1,v1,-18904
bfc044d4:	00021100 	sll	v0,v0,0x4
bfc044d8:	00621021 	addu	v0,v1,v0
bfc044dc:	8c430004 	lw	v1,4(v0)
bfc044e0:	8fa20014 	lw	v0,20(sp)
bfc044e4:	0062102b 	sltu	v0,v1,v0
bfc044e8:	1040000a 	beqz	v0,bfc04514 <memctlc_check_DQS_range+0xdc>
bfc044ec:	00000000 	nop
		_memctl_debug_printf("\tCAL_MODE: DLL\n");


	_memctl_debug_printf("\tDQS0_tap = %d, DQS1_tap = %d : ", dqs0_tap, dqs1_tap);
	dram_freq_mhz = board_DRAM_freq_mhz();
	for(index = 0; index < (sizeof(DQS_RANGE)/sizeof(tap_info_t)); index++){
bfc044f0:	8fa20010 	lw	v0,16(sp)
bfc044f4:	24420001 	addiu	v0,v0,1
bfc044f8:	afa20010 	sw	v0,16(sp)
bfc044fc:	8fa20010 	lw	v0,16(sp)
bfc04500:	2c42000a 	sltiu	v0,v0,10
bfc04504:	1440ffe7 	bnez	v0,bfc044a4 <memctlc_check_DQS_range+0x6c>
bfc04508:	00000000 	nop
bfc0450c:	0bf01146 	j	bfc04518 <memctlc_check_DQS_range+0xe0>
bfc04510:	00000000 	nop
		if(DQS_RANGE[index].mode == cal_mode){
			if(DQS_RANGE[index].mhz >= dram_freq_mhz)
				break;
bfc04514:	00000000 	nop
	}

	if(index >= (sizeof(DQS_RANGE)/sizeof(tap_info_t)))
		_memctl_debug_printf("#Error DRAM frequency %dMHz\n", dram_freq_mhz);

	if(dqs0_tap < DQS_RANGE[index].tap_min || dqs0_tap > DQS_RANGE[index].tap_max \
bfc04518:	8fa30010 	lw	v1,16(sp)
bfc0451c:	3c02bfc1 	lui	v0,0xbfc1
bfc04520:	00031840 	sll	v1,v1,0x1
bfc04524:	24630001 	addiu	v1,v1,1
bfc04528:	000318c0 	sll	v1,v1,0x3
bfc0452c:	2442b628 	addiu	v0,v0,-18904
bfc04530:	00621021 	addu	v0,v1,v0
bfc04534:	8c430000 	lw	v1,0(v0)
bfc04538:	8fa20020 	lw	v0,32(sp)
bfc0453c:	0043102b 	sltu	v0,v0,v1
bfc04540:	1440000d 	bnez	v0,bfc04578 <memctlc_check_DQS_range+0x140>
bfc04544:	00000000 	nop
			|| dqs1_tap < DQS_RANGE[index].tap_min || dqs1_tap > DQS_RANGE[index].tap_max)
bfc04548:	8fa20010 	lw	v0,16(sp)
bfc0454c:	3c03bfc1 	lui	v1,0xbfc1
bfc04550:	00021040 	sll	v0,v0,0x1
bfc04554:	24420001 	addiu	v0,v0,1
bfc04558:	2463b628 	addiu	v1,v1,-18904
bfc0455c:	000210c0 	sll	v0,v0,0x3
bfc04560:	00621021 	addu	v0,v1,v0
bfc04564:	8c430004 	lw	v1,4(v0)
	}

	if(index >= (sizeof(DQS_RANGE)/sizeof(tap_info_t)))
		_memctl_debug_printf("#Error DRAM frequency %dMHz\n", dram_freq_mhz);

	if(dqs0_tap < DQS_RANGE[index].tap_min || dqs0_tap > DQS_RANGE[index].tap_max \
bfc04568:	8fa20020 	lw	v0,32(sp)
bfc0456c:	0062102b 	sltu	v0,v1,v0
bfc04570:	14400001 	bnez	v0,bfc04578 <memctlc_check_DQS_range+0x140>
bfc04574:	00000000 	nop
		_memctl_debug_printf("ok ");

	_memctl_debug_printf("(Reference DQS taps %d ~ %d on %dMHz)\n", DQS_RANGE[index].tap_min, DQS_RANGE[index].tap_max, DQS_RANGE[index].mhz);

	return;
}
bfc04578:	8fbf002c 	lw	ra,44(sp)
bfc0457c:	27bd0030 	addiu	sp,sp,48
bfc04580:	03e00008 	jr	ra
bfc04584:	00000000 	nop

bfc04588 <memctlc_check_90phase_range>:
 * 	None
 * Return:
 *  	None
 */
void memctlc_check_90phase_range(void)
{
bfc04588:	27bdffd8 	addiu	sp,sp,-40
bfc0458c:	afbf0024 	sw	ra,36(sp)
	unsigned int phase_tap, cal_mode;
	unsigned int dram_freq_mhz, index;
	
	phase_tap = (REG(DCDR) & DCDR_PHASE_SHIFT_MASK) >> DCDR_PHASE_SHIFT_FD_S;
bfc04590:	3c02b800 	lui	v0,0xb800
bfc04594:	34421060 	ori	v0,v0,0x1060
bfc04598:	8c430000 	lw	v1,0(v0)
bfc0459c:	3c02003e 	lui	v0,0x3e
bfc045a0:	00621024 	and	v0,v1,v0
bfc045a4:	00021442 	srl	v0,v0,0x11
bfc045a8:	afa2001c 	sw	v0,28(sp)
	cal_mode = (REG(DDCR) & DDCR_CAL_MODE_MASK) >> DDCR_CAL_MODE_FD_S;
bfc045ac:	3c02b800 	lui	v0,0xb800
bfc045b0:	34421050 	ori	v0,v0,0x1050
bfc045b4:	8c420000 	lw	v0,0(v0)
bfc045b8:	000217c2 	srl	v0,v0,0x1f
bfc045bc:	afa20018 	sw	v0,24(sp)

	_memctl_debug_printf("\tphase_shift_90_tap = %d: ", phase_tap);

	dram_freq_mhz = board_DRAM_freq_mhz();
bfc045c0:	0ff0260d 	jal	bfc09834 <board_DRAM_freq_mhz>
bfc045c4:	00000000 	nop
bfc045c8:	afa20014 	sw	v0,20(sp)

	for(index = 0; index < (sizeof(W90_RANGE)/sizeof(tap_info_t)); index++){
bfc045cc:	afa00010 	sw	zero,16(sp)
bfc045d0:	0bf0118c 	j	bfc04630 <memctlc_check_90phase_range+0xa8>
bfc045d4:	00000000 	nop
		if(W90_RANGE[index].mode == cal_mode){
bfc045d8:	8fa30010 	lw	v1,16(sp)
bfc045dc:	3c02bfc1 	lui	v0,0xbfc1
bfc045e0:	00031900 	sll	v1,v1,0x4
bfc045e4:	2442b6c8 	addiu	v0,v0,-18744
bfc045e8:	00621021 	addu	v0,v1,v0
bfc045ec:	8c430000 	lw	v1,0(v0)
bfc045f0:	8fa20018 	lw	v0,24(sp)
bfc045f4:	1462000b 	bne	v1,v0,bfc04624 <memctlc_check_90phase_range+0x9c>
bfc045f8:	00000000 	nop
			if(W90_RANGE[index].mhz >= dram_freq_mhz)
bfc045fc:	8fa20010 	lw	v0,16(sp)
bfc04600:	3c03bfc1 	lui	v1,0xbfc1
bfc04604:	2463b6c8 	addiu	v1,v1,-18744
bfc04608:	00021100 	sll	v0,v0,0x4
bfc0460c:	00621021 	addu	v0,v1,v0
bfc04610:	8c430004 	lw	v1,4(v0)
bfc04614:	8fa20014 	lw	v0,20(sp)
bfc04618:	0062102b 	sltu	v0,v1,v0
bfc0461c:	1040000a 	beqz	v0,bfc04648 <memctlc_check_90phase_range+0xc0>
bfc04620:	00000000 	nop

	_memctl_debug_printf("\tphase_shift_90_tap = %d: ", phase_tap);

	dram_freq_mhz = board_DRAM_freq_mhz();

	for(index = 0; index < (sizeof(W90_RANGE)/sizeof(tap_info_t)); index++){
bfc04624:	8fa20010 	lw	v0,16(sp)
bfc04628:	24420001 	addiu	v0,v0,1
bfc0462c:	afa20010 	sw	v0,16(sp)
bfc04630:	8fa20010 	lw	v0,16(sp)
bfc04634:	2c42000a 	sltiu	v0,v0,10
bfc04638:	1440ffe7 	bnez	v0,bfc045d8 <memctlc_check_90phase_range+0x50>
bfc0463c:	00000000 	nop
bfc04640:	0bf01193 	j	bfc0464c <memctlc_check_90phase_range+0xc4>
bfc04644:	00000000 	nop
		if(W90_RANGE[index].mode == cal_mode){
			if(W90_RANGE[index].mhz >= dram_freq_mhz)
				break;
bfc04648:	00000000 	nop
		_memctl_debug_printf("ok ");

	_memctl_debug_printf("(Reference phase shift 90 taps %d ~ %d on %dMHz)\n", W90_RANGE[index].tap_min, W90_RANGE[index].tap_max, W90_RANGE[index].mhz);

	return;
}
bfc0464c:	8fbf0024 	lw	ra,36(sp)
bfc04650:	27bd0028 	addiu	sp,sp,40
bfc04654:	03e00008 	jr	ra
bfc04658:	00000000 	nop

bfc0465c <memctlc_check_DCR>:
 *	None
 * Note:
 *	- It shows some messages for the result of the checking.
 */
void memctlc_check_DCR(void)
{
bfc0465c:	27bdffc8 	addiu	sp,sp,-56
bfc04660:	afbf0034 	sw	ra,52(sp)

	/* 
	 * Check DCR
	 */
	/* 1. Bus width     */
	buswidth = _DCR_get_buswidth();
bfc04664:	0ff01099 	jal	bfc04264 <_DCR_get_buswidth>
bfc04668:	00000000 	nop
bfc0466c:	afa20024 	sw	v0,36(sp)
	//printf("\tbus width = %dbit\n", buswidth);
	/* 2. Chip select   */
	chipsel = _DCR_get_chipsel();
bfc04670:	0ff010ba 	jal	bfc042e8 <_DCR_get_chipsel>
bfc04674:	00000000 	nop
bfc04678:	afa20020 	sw	v0,32(sp)
	//printf("\tnumber of chips = %d\n", chipsel);
	/* 3. Row count     */
	rowcnt = _DCR_get_rowcnt();
bfc0467c:	0ff010cb 	jal	bfc0432c <_DCR_get_rowcnt>
bfc04680:	00000000 	nop
bfc04684:	afa2001c 	sw	v0,28(sp)
	//printf("\trow count = %d\n", rowcnt);
	/* 4. Column count  */
	colcnt = _DCR_get_colcnt();
bfc04688:	0ff010d9 	jal	bfc04364 <_DCR_get_colcnt>
bfc0468c:	00000000 	nop
bfc04690:	afa20018 	sw	v0,24(sp)
	//printf("\tcolumn count = %d\n", colcnt);
	/* 5. Bank count    */
	bankcnt = _DCR_get_bankcnt();
bfc04694:	0ff010ee 	jal	bfc043b8 <_DCR_get_bankcnt>
bfc04698:	00000000 	nop
bfc0469c:	afa20014 	sw	v0,20(sp)
	//printf("\tbank count = %d\n", bankcnt);

	/* 6. Show total DRAM size */
	dram_total_size = rowcnt*colcnt*(buswidth/8)*chipsel*bankcnt;
bfc046a0:	8fa3001c 	lw	v1,28(sp)
bfc046a4:	8fa20018 	lw	v0,24(sp)
bfc046a8:	70621802 	mul	v1,v1,v0
bfc046ac:	8fa20024 	lw	v0,36(sp)
bfc046b0:	000210c2 	srl	v0,v0,0x3
bfc046b4:	70621802 	mul	v1,v1,v0
bfc046b8:	8fa20020 	lw	v0,32(sp)
bfc046bc:	70621802 	mul	v1,v1,v0
bfc046c0:	8fa20014 	lw	v0,20(sp)
bfc046c4:	70621002 	mul	v0,v1,v0
bfc046c8:	afa20010 	sw	v0,16(sp)
	printf("\tDRAM Size = %d  MB\n", (dram_total_size/1024/1024));
bfc046cc:	8fa20010 	lw	v0,16(sp)
bfc046d0:	00021502 	srl	v0,v0,0x14
bfc046d4:	3c03bfc1 	lui	v1,0xbfc1
bfc046d8:	2464ae80 	addiu	a0,v1,-20864
bfc046dc:	00402821 	move	a1,v0
bfc046e0:	0ff003ac 	jal	bfc00eb0 <printf>
bfc046e4:	00000000 	nop
#if defined(CONFIG_POST_ENABLE)
	REG32(0xb8000f00) = dram_total_size; // write dram total size to a dummy register.
#endif

	return;
}
bfc046e8:	8fbf0034 	lw	ra,52(sp)
bfc046ec:	27bd0038 	addiu	sp,sp,56
bfc046f0:	03e00008 	jr	ra
bfc046f4:	00000000 	nop

bfc046f8 <memctlc_check_DTR_DDR3>:
 *	None
 * Note:
 *	- It shows some messages for the result of the checking.
 */
void memctlc_check_DTR_DDR3()
{
bfc046f8:	27bdff48 	addiu	sp,sp,-184
bfc046fc:	afbf00b4 	sw	ra,180(sp)
bfc04700:	afb000b0 	sw	s0,176(sp)
	unsigned int	sug_dtr[3], sug_mr[4];
	unsigned int	dram_size;
	unsigned int	cas_10_ns, cas, wtr, rtp, rrd, _rfc_ns;


	unsigned int dram_freq_mhz = board_DRAM_freq_mhz();
bfc04704:	0ff0260d 	jal	bfc09834 <board_DRAM_freq_mhz>
bfc04708:	00000000 	nop
bfc0470c:	afa20038 	sw	v0,56(sp)


	/* 
	 * Check DTR
	 */
	std_wr_ns  = DDR3_STD_WR_NS;
bfc04710:	2402000f 	li	v0,15
bfc04714:	afa20070 	sw	v0,112(sp)
	std_rtp_ns  = DDR3_STD_RTP_NS;
bfc04718:	24020008 	li	v0,8
bfc0471c:	afa2007c 	sw	v0,124(sp)
	std_wtr_ns  = DDR3_STD_WTR_NS;
bfc04720:	24020008 	li	v0,8
bfc04724:	afa20068 	sw	v0,104(sp)
	std_refi_ns = DDR3_STD_REFI_NS; /* 7.8us */
bfc04728:	24021e78 	li	v0,7800
bfc0472c:	afa2006c 	sw	v0,108(sp)
	std_rp_ns  = DDR3_STD_RP_NS;
bfc04730:	2402000f 	li	v0,15
bfc04734:	afa20060 	sw	v0,96(sp)
	std_rcd_ns = DDR3_STD_RCD_NS;
bfc04738:	2402000f 	li	v0,15
bfc0473c:	afa2005c 	sw	v0,92(sp)
	std_rrd_ns = DDR3_STD_RRD_NS;
bfc04740:	2402000a 	li	v0,10
bfc04744:	afa20078 	sw	v0,120(sp)
	std_fawg_ns = DDR3_STD_FAWG_NS;
bfc04748:	24020032 	li	v0,50
bfc0474c:	afa20064 	sw	v0,100(sp)
	std_ras_ns = DDR3_STD_RAS_NS;
bfc04750:	2402002d 	li	v0,45
bfc04754:	afa20074 	sw	v0,116(sp)
	
	dram_size = memctlc_dram_size()/_get_DRAM_csnum();
bfc04758:	0ff00c74 	jal	bfc031d0 <memctlc_dram_size>
bfc0475c:	00000000 	nop
bfc04760:	00408021 	move	s0,v0
bfc04764:	0ff00c68 	jal	bfc031a0 <_get_DRAM_csnum>
bfc04768:	00000000 	nop
bfc0476c:	0202001b 	divu	zero,s0,v0
bfc04770:	004001f4 	teq	v0,zero,0x7
bfc04774:	00001810 	mfhi	v1
bfc04778:	00001012 	mflo	v0
bfc0477c:	afa20054 	sw	v0,84(sp)
	switch (dram_size){
bfc04780:	8fa20054 	lw	v0,84(sp)
bfc04784:	3c030800 	lui	v1,0x800
bfc04788:	10430017 	beq	v0,v1,bfc047e8 <memctlc_check_DTR_DDR3+0xf0>
bfc0478c:	00000000 	nop
bfc04790:	3c030800 	lui	v1,0x800
bfc04794:	34630001 	ori	v1,v1,0x1
bfc04798:	0043182b 	sltu	v1,v0,v1
bfc0479c:	10600006 	beqz	v1,bfc047b8 <memctlc_check_DTR_DDR3+0xc0>
bfc047a0:	00000000 	nop
bfc047a4:	3c030400 	lui	v1,0x400
bfc047a8:	1043000b 	beq	v0,v1,bfc047d8 <memctlc_check_DTR_DDR3+0xe0>
bfc047ac:	00000000 	nop
bfc047b0:	0bf01206 	j	bfc04818 <memctlc_check_DTR_DDR3+0x120>
bfc047b4:	00000000 	nop
bfc047b8:	3c031000 	lui	v1,0x1000
bfc047bc:	1043000e 	beq	v0,v1,bfc047f8 <memctlc_check_DTR_DDR3+0x100>
bfc047c0:	00000000 	nop
bfc047c4:	3c032000 	lui	v1,0x2000
bfc047c8:	1043000f 	beq	v0,v1,bfc04808 <memctlc_check_DTR_DDR3+0x110>
bfc047cc:	00000000 	nop
bfc047d0:	0bf01206 	j	bfc04818 <memctlc_check_DTR_DDR3+0x120>
bfc047d4:	00000000 	nop
		case 0x4000000:
			_rfc_ns = DDR3_STD_RFC_64MB_NS;
bfc047d8:	24020073 	li	v0,115
bfc047dc:	afa2003c 	sw	v0,60(sp)
			break;
bfc047e0:	0bf01208 	j	bfc04820 <memctlc_check_DTR_DDR3+0x128>
bfc047e4:	00000000 	nop
		case 0x8000000:
			_rfc_ns = DDR3_STD_RFC_128MB_NS;
bfc047e8:	24020073 	li	v0,115
bfc047ec:	afa2003c 	sw	v0,60(sp)
			break;
bfc047f0:	0bf01208 	j	bfc04820 <memctlc_check_DTR_DDR3+0x128>
bfc047f4:	00000000 	nop
		case 0x10000000:
			_rfc_ns = DDR3_STD_RFC_256MB_NS;
bfc047f8:	240200a5 	li	v0,165
bfc047fc:	afa2003c 	sw	v0,60(sp)
			break;
bfc04800:	0bf01208 	j	bfc04820 <memctlc_check_DTR_DDR3+0x128>
bfc04804:	00000000 	nop
		case 0x20000000:
			_rfc_ns = DDR3_STD_RFC_512MB_NS;
bfc04808:	24020131 	li	v0,305
bfc0480c:	afa2003c 	sw	v0,60(sp)
			break;
bfc04810:	0bf01208 	j	bfc04820 <memctlc_check_DTR_DDR3+0x128>
bfc04814:	00000000 	nop
		default:
			_rfc_ns = DDR3_STD_RFC_1GB_NS;
bfc04818:	24020163 	li	v0,355
bfc0481c:	afa2003c 	sw	v0,60(sp)
			break;
	}

	std_rfc_ns = DDR3_STD_RFC_NS;
bfc04820:	24020148 	li	v0,328
bfc04824:	afa20058 	sw	v0,88(sp)
	_memctl_debug_printf("\tt_rfc = %dns, _rfc_ns(%d)\n", std_rfc_ns, _rfc_ns);
	_memctl_debug_printf("\tt_ras = %dns\n", std_ras_ns);

	_memctl_debug_printf("Checking Current setting: \n");
	/* 1. CAS latency   */
	two_cas = _DTR_two_cas();
bfc04828:	0ff01087 	jal	bfc0421c <_DTR_two_cas>
bfc0482c:	00000000 	nop
bfc04830:	afa20090 	sw	v0,144(sp)
	_memctl_debug_printf("\n\tcas(%d.%d): ", (two_cas/2), ((two_cas*10)/2)%10);
	if(two_cas > 22)
bfc04834:	8fa20090 	lw	v0,144(sp)
bfc04838:	2c420017 	sltiu	v0,v0,23
bfc0483c:	10400068 	beqz	v0,bfc049e0 <memctlc_check_DTR_DDR3+0x2e8>
bfc04840:	00000000 	nop
		_memctl_debug_printf("#Warnning: No CAS > 11 for DDR3 SDRAM\n");
	else if((two_cas == 10) && (DDR3_CAS5_MAX_MHZ < dram_freq_mhz))
bfc04844:	8fa30090 	lw	v1,144(sp)
bfc04848:	2402000a 	li	v0,10
bfc0484c:	1462000c 	bne	v1,v0,bfc04880 <memctlc_check_DTR_DDR3+0x188>
bfc04850:	00000000 	nop
bfc04854:	8fa20038 	lw	v0,56(sp)
bfc04858:	2c420191 	sltiu	v0,v0,401
bfc0485c:	14400008 	bnez	v0,bfc04880 <memctlc_check_DTR_DDR3+0x188>
bfc04860:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
bfc04864:	3c02bfc1 	lui	v0,0xbfc1
bfc04868:	2444ae98 	addiu	a0,v0,-20840
bfc0486c:	8fa50038 	lw	a1,56(sp)
bfc04870:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04874:	00000000 	nop
	/* 1. CAS latency   */
	two_cas = _DTR_two_cas();
	_memctl_debug_printf("\n\tcas(%d.%d): ", (two_cas/2), ((two_cas*10)/2)%10);
	if(two_cas > 22)
		_memctl_debug_printf("#Warnning: No CAS > 11 for DDR3 SDRAM\n");
	else if((two_cas == 10) && (DDR3_CAS5_MAX_MHZ < dram_freq_mhz))
bfc04878:	0bf01278 	j	bfc049e0 <memctlc_check_DTR_DDR3+0x2e8>
bfc0487c:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 12) && (DDR3_CAS6_MAX_MHZ < dram_freq_mhz))
bfc04880:	8fa30090 	lw	v1,144(sp)
bfc04884:	2402000c 	li	v0,12
bfc04888:	1462000c 	bne	v1,v0,bfc048bc <memctlc_check_DTR_DDR3+0x1c4>
bfc0488c:	00000000 	nop
bfc04890:	8fa20038 	lw	v0,56(sp)
bfc04894:	2c420191 	sltiu	v0,v0,401
bfc04898:	14400008 	bnez	v0,bfc048bc <memctlc_check_DTR_DDR3+0x1c4>
bfc0489c:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
bfc048a0:	3c02bfc1 	lui	v0,0xbfc1
bfc048a4:	2444ae98 	addiu	a0,v0,-20840
bfc048a8:	8fa50038 	lw	a1,56(sp)
bfc048ac:	0ff003ac 	jal	bfc00eb0 <printf>
bfc048b0:	00000000 	nop
	_memctl_debug_printf("\n\tcas(%d.%d): ", (two_cas/2), ((two_cas*10)/2)%10);
	if(two_cas > 22)
		_memctl_debug_printf("#Warnning: No CAS > 11 for DDR3 SDRAM\n");
	else if((two_cas == 10) && (DDR3_CAS5_MAX_MHZ < dram_freq_mhz))
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 12) && (DDR3_CAS6_MAX_MHZ < dram_freq_mhz))
bfc048b4:	0bf01278 	j	bfc049e0 <memctlc_check_DTR_DDR3+0x2e8>
bfc048b8:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 14) && (DDR3_CAS7_MAX_MHZ < dram_freq_mhz))
bfc048bc:	8fa30090 	lw	v1,144(sp)
bfc048c0:	2402000e 	li	v0,14
bfc048c4:	1462000c 	bne	v1,v0,bfc048f8 <memctlc_check_DTR_DDR3+0x200>
bfc048c8:	00000000 	nop
bfc048cc:	8fa20038 	lw	v0,56(sp)
bfc048d0:	2c420216 	sltiu	v0,v0,534
bfc048d4:	14400008 	bnez	v0,bfc048f8 <memctlc_check_DTR_DDR3+0x200>
bfc048d8:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
bfc048dc:	3c02bfc1 	lui	v0,0xbfc1
bfc048e0:	2444ae98 	addiu	a0,v0,-20840
bfc048e4:	8fa50038 	lw	a1,56(sp)
bfc048e8:	0ff003ac 	jal	bfc00eb0 <printf>
bfc048ec:	00000000 	nop
		_memctl_debug_printf("#Warnning: No CAS > 11 for DDR3 SDRAM\n");
	else if((two_cas == 10) && (DDR3_CAS5_MAX_MHZ < dram_freq_mhz))
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 12) && (DDR3_CAS6_MAX_MHZ < dram_freq_mhz))
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 14) && (DDR3_CAS7_MAX_MHZ < dram_freq_mhz))
bfc048f0:	0bf01278 	j	bfc049e0 <memctlc_check_DTR_DDR3+0x2e8>
bfc048f4:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 16) && (DDR3_CAS8_MAX_MHZ < dram_freq_mhz))
bfc048f8:	8fa30090 	lw	v1,144(sp)
bfc048fc:	24020010 	li	v0,16
bfc04900:	1462000c 	bne	v1,v0,bfc04934 <memctlc_check_DTR_DDR3+0x23c>
bfc04904:	00000000 	nop
bfc04908:	8fa20038 	lw	v0,56(sp)
bfc0490c:	2c420216 	sltiu	v0,v0,534
bfc04910:	14400008 	bnez	v0,bfc04934 <memctlc_check_DTR_DDR3+0x23c>
bfc04914:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
bfc04918:	3c02bfc1 	lui	v0,0xbfc1
bfc0491c:	2444ae98 	addiu	a0,v0,-20840
bfc04920:	8fa50038 	lw	a1,56(sp)
bfc04924:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04928:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 12) && (DDR3_CAS6_MAX_MHZ < dram_freq_mhz))
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 14) && (DDR3_CAS7_MAX_MHZ < dram_freq_mhz))
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 16) && (DDR3_CAS8_MAX_MHZ < dram_freq_mhz))
bfc0492c:	0bf01278 	j	bfc049e0 <memctlc_check_DTR_DDR3+0x2e8>
bfc04930:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 18) && (DDR3_CAS9_MAX_MHZ < dram_freq_mhz))
bfc04934:	8fa30090 	lw	v1,144(sp)
bfc04938:	24020012 	li	v0,18
bfc0493c:	1462000c 	bne	v1,v0,bfc04970 <memctlc_check_DTR_DDR3+0x278>
bfc04940:	00000000 	nop
bfc04944:	8fa20038 	lw	v0,56(sp)
bfc04948:	2c42029b 	sltiu	v0,v0,667
bfc0494c:	14400008 	bnez	v0,bfc04970 <memctlc_check_DTR_DDR3+0x278>
bfc04950:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
bfc04954:	3c02bfc1 	lui	v0,0xbfc1
bfc04958:	2444ae98 	addiu	a0,v0,-20840
bfc0495c:	8fa50038 	lw	a1,56(sp)
bfc04960:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04964:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 14) && (DDR3_CAS7_MAX_MHZ < dram_freq_mhz))
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 16) && (DDR3_CAS8_MAX_MHZ < dram_freq_mhz))
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 18) && (DDR3_CAS9_MAX_MHZ < dram_freq_mhz))
bfc04968:	0bf01278 	j	bfc049e0 <memctlc_check_DTR_DDR3+0x2e8>
bfc0496c:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 20) && (DDR3_CAS10_MAX_MHZ < dram_freq_mhz))
bfc04970:	8fa30090 	lw	v1,144(sp)
bfc04974:	24020014 	li	v0,20
bfc04978:	1462000c 	bne	v1,v0,bfc049ac <memctlc_check_DTR_DDR3+0x2b4>
bfc0497c:	00000000 	nop
bfc04980:	8fa20038 	lw	v0,56(sp)
bfc04984:	2c42029b 	sltiu	v0,v0,667
bfc04988:	14400008 	bnez	v0,bfc049ac <memctlc_check_DTR_DDR3+0x2b4>
bfc0498c:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
bfc04990:	3c02bfc1 	lui	v0,0xbfc1
bfc04994:	2444ae98 	addiu	a0,v0,-20840
bfc04998:	8fa50038 	lw	a1,56(sp)
bfc0499c:	0ff003ac 	jal	bfc00eb0 <printf>
bfc049a0:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 16) && (DDR3_CAS8_MAX_MHZ < dram_freq_mhz))
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 18) && (DDR3_CAS9_MAX_MHZ < dram_freq_mhz))
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 20) && (DDR3_CAS10_MAX_MHZ < dram_freq_mhz))
bfc049a4:	0bf01278 	j	bfc049e0 <memctlc_check_DTR_DDR3+0x2e8>
bfc049a8:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 22) && (DDR3_CAS11_MAX_MHZ < dram_freq_mhz))
bfc049ac:	8fa30090 	lw	v1,144(sp)
bfc049b0:	24020016 	li	v0,22
bfc049b4:	1462000a 	bne	v1,v0,bfc049e0 <memctlc_check_DTR_DDR3+0x2e8>
bfc049b8:	00000000 	nop
bfc049bc:	8fa20038 	lw	v0,56(sp)
bfc049c0:	2c420321 	sltiu	v0,v0,801
bfc049c4:	14400006 	bnez	v0,bfc049e0 <memctlc_check_DTR_DDR3+0x2e8>
bfc049c8:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
bfc049cc:	3c02bfc1 	lui	v0,0xbfc1
bfc049d0:	2444ae98 	addiu	a0,v0,-20840
bfc049d4:	8fa50038 	lw	a1,56(sp)
bfc049d8:	0ff003ac 	jal	bfc00eb0 <printf>
bfc049dc:	00000000 	nop
	else
		_memctl_debug_printf("ok\n");


	/* 2. T_WR  (15ns) */
	wr = _DTR_wr();
bfc049e0:	0ff01048 	jal	bfc04120 <_DTR_wr>
bfc049e4:	00000000 	nop
bfc049e8:	afa20080 	sw	v0,128(sp)
	_memctl_debug_printf("\twr(%d): ",wr);
	max_freq_mhz = _DTR_wr_frq_mhz(std_wr_ns);
bfc049ec:	8fa40070 	lw	a0,112(sp)
bfc049f0:	0ff00dfd 	jal	bfc037f4 <_DTR_wr_frq_mhz>
bfc049f4:	00000000 	nop
bfc049f8:	afa20088 	sw	v0,136(sp)
	}else{
		_memctl_debug_printf("ok\n");
	}

	/* 3. CAS Write latency */
	tcwl = _DTR_cwl();
bfc049fc:	0ff0107a 	jal	bfc041e8 <_DTR_cwl>
bfc04a00:	00000000 	nop
bfc04a04:	afa20084 	sw	v0,132(sp)
	_memctl_debug_printf("\n\tcwl(%d): ", tcwl);
	if(tcwl > 8)
bfc04a08:	8fa20084 	lw	v0,132(sp)
bfc04a0c:	2c420009 	sltiu	v0,v0,9
bfc04a10:	14400007 	bnez	v0,bfc04a30 <memctlc_check_DTR_DDR3+0x338>
bfc04a14:	00000000 	nop
		printf("#Warnning: No CWL > 8 for DDR3 SDRAM\n");
bfc04a18:	3c02bfc1 	lui	v0,0xbfc1
bfc04a1c:	2444aed8 	addiu	a0,v0,-20776
bfc04a20:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04a24:	00000000 	nop
bfc04a28:	0bf012c6 	j	bfc04b18 <memctlc_check_DTR_DDR3+0x420>
bfc04a2c:	00000000 	nop
	else if((tcwl == 5) && (DDR3_CWL5_MAX_MHZ < dram_freq_mhz))
bfc04a30:	8fa30084 	lw	v1,132(sp)
bfc04a34:	24020005 	li	v0,5
bfc04a38:	1462000c 	bne	v1,v0,bfc04a6c <memctlc_check_DTR_DDR3+0x374>
bfc04a3c:	00000000 	nop
bfc04a40:	8fa20038 	lw	v0,56(sp)
bfc04a44:	2c420191 	sltiu	v0,v0,401
bfc04a48:	14400008 	bnez	v0,bfc04a6c <memctlc_check_DTR_DDR3+0x374>
bfc04a4c:	00000000 	nop
		printf("#Warnning: CWL might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
bfc04a50:	3c02bfc1 	lui	v0,0xbfc1
bfc04a54:	2444af00 	addiu	a0,v0,-20736
bfc04a58:	8fa50038 	lw	a1,56(sp)
bfc04a5c:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04a60:	00000000 	nop
	/* 3. CAS Write latency */
	tcwl = _DTR_cwl();
	_memctl_debug_printf("\n\tcwl(%d): ", tcwl);
	if(tcwl > 8)
		printf("#Warnning: No CWL > 8 for DDR3 SDRAM\n");
	else if((tcwl == 5) && (DDR3_CWL5_MAX_MHZ < dram_freq_mhz))
bfc04a64:	0bf012c6 	j	bfc04b18 <memctlc_check_DTR_DDR3+0x420>
bfc04a68:	00000000 	nop
		printf("#Warnning: CWL might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((tcwl == 6) && (DDR3_CWL6_MAX_MHZ < dram_freq_mhz))
bfc04a6c:	8fa30084 	lw	v1,132(sp)
bfc04a70:	24020006 	li	v0,6
bfc04a74:	1462000c 	bne	v1,v0,bfc04aa8 <memctlc_check_DTR_DDR3+0x3b0>
bfc04a78:	00000000 	nop
bfc04a7c:	8fa20038 	lw	v0,56(sp)
bfc04a80:	2c420216 	sltiu	v0,v0,534
bfc04a84:	14400008 	bnez	v0,bfc04aa8 <memctlc_check_DTR_DDR3+0x3b0>
bfc04a88:	00000000 	nop
		printf("#Warnning: CWL might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
bfc04a8c:	3c02bfc1 	lui	v0,0xbfc1
bfc04a90:	2444af00 	addiu	a0,v0,-20736
bfc04a94:	8fa50038 	lw	a1,56(sp)
bfc04a98:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04a9c:	00000000 	nop
	_memctl_debug_printf("\n\tcwl(%d): ", tcwl);
	if(tcwl > 8)
		printf("#Warnning: No CWL > 8 for DDR3 SDRAM\n");
	else if((tcwl == 5) && (DDR3_CWL5_MAX_MHZ < dram_freq_mhz))
		printf("#Warnning: CWL might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((tcwl == 6) && (DDR3_CWL6_MAX_MHZ < dram_freq_mhz))
bfc04aa0:	0bf012c6 	j	bfc04b18 <memctlc_check_DTR_DDR3+0x420>
bfc04aa4:	00000000 	nop
		printf("#Warnning: CWL might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((tcwl == 7) && (DDR3_CWL7_MAX_MHZ < dram_freq_mhz))
bfc04aa8:	8fa30084 	lw	v1,132(sp)
bfc04aac:	24020007 	li	v0,7
bfc04ab0:	1462000c 	bne	v1,v0,bfc04ae4 <memctlc_check_DTR_DDR3+0x3ec>
bfc04ab4:	00000000 	nop
bfc04ab8:	8fa20038 	lw	v0,56(sp)
bfc04abc:	2c42029b 	sltiu	v0,v0,667
bfc04ac0:	14400008 	bnez	v0,bfc04ae4 <memctlc_check_DTR_DDR3+0x3ec>
bfc04ac4:	00000000 	nop
		printf("#Warnning: CWL might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
bfc04ac8:	3c02bfc1 	lui	v0,0xbfc1
bfc04acc:	2444af00 	addiu	a0,v0,-20736
bfc04ad0:	8fa50038 	lw	a1,56(sp)
bfc04ad4:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04ad8:	00000000 	nop
		printf("#Warnning: No CWL > 8 for DDR3 SDRAM\n");
	else if((tcwl == 5) && (DDR3_CWL5_MAX_MHZ < dram_freq_mhz))
		printf("#Warnning: CWL might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((tcwl == 6) && (DDR3_CWL6_MAX_MHZ < dram_freq_mhz))
		printf("#Warnning: CWL might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((tcwl == 7) && (DDR3_CWL7_MAX_MHZ < dram_freq_mhz))
bfc04adc:	0bf012c6 	j	bfc04b18 <memctlc_check_DTR_DDR3+0x420>
bfc04ae0:	00000000 	nop
		printf("#Warnning: CWL might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((tcwl == 8) && (DDR3_CAS8_MAX_MHZ < dram_freq_mhz))
bfc04ae4:	8fa30084 	lw	v1,132(sp)
bfc04ae8:	24020008 	li	v0,8
bfc04aec:	1462000a 	bne	v1,v0,bfc04b18 <memctlc_check_DTR_DDR3+0x420>
bfc04af0:	00000000 	nop
bfc04af4:	8fa20038 	lw	v0,56(sp)
bfc04af8:	2c420216 	sltiu	v0,v0,534
bfc04afc:	14400006 	bnez	v0,bfc04b18 <memctlc_check_DTR_DDR3+0x420>
bfc04b00:	00000000 	nop
		printf("#Warnning: CWL might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
bfc04b04:	3c02bfc1 	lui	v0,0xbfc1
bfc04b08:	2444af00 	addiu	a0,v0,-20736
bfc04b0c:	8fa50038 	lw	a1,56(sp)
bfc04b10:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04b14:	00000000 	nop
	else
		_memctl_debug_printf("ok\n");


	/* 4. T_RTP  (20ns) */
	rtp = _DTR_rtp();
bfc04b18:	0ff01061 	jal	bfc04184 <_DTR_rtp>
bfc04b1c:	00000000 	nop
bfc04b20:	afa20044 	sw	v0,68(sp)
	_memctl_debug_printf("\trtp(%d): ",rtp);
	
	max_freq_mhz = _DTR_rtp_frq_mhz(std_rtp_ns);
bfc04b24:	8fa4007c 	lw	a0,124(sp)
bfc04b28:	0ff00d46 	jal	bfc03518 <_DTR_rtp_frq_mhz>
bfc04b2c:	00000000 	nop
bfc04b30:	afa20088 	sw	v0,136(sp)
	if(dram_freq_mhz > max_freq_mhz)
bfc04b34:	8fa30038 	lw	v1,56(sp)
bfc04b38:	8fa20088 	lw	v0,136(sp)
bfc04b3c:	0043102b 	sltu	v0,v0,v1
bfc04b40:	10400007 	beqz	v0,bfc04b60 <memctlc_check_DTR_DDR3+0x468>
bfc04b44:	00000000 	nop
		printf("#Warnning: DTR1(rtp) setting may vilolates the requirement (%dns). Max. %dMHz for current setting\n", std_rtp_ns, max_freq_mhz);
bfc04b48:	3c02bfc1 	lui	v0,0xbfc1
bfc04b4c:	2444af40 	addiu	a0,v0,-20672
bfc04b50:	8fa5007c 	lw	a1,124(sp)
bfc04b54:	8fa60088 	lw	a2,136(sp)
bfc04b58:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04b5c:	00000000 	nop

	if(rtp < 4){
bfc04b60:	8fa20044 	lw	v0,68(sp)
bfc04b64:	2c420004 	sltiu	v0,v0,4
bfc04b68:	10400006 	beqz	v0,bfc04b84 <memctlc_check_DTR_DDR3+0x48c>
bfc04b6c:	00000000 	nop
		printf("#Warnning: DTR1(rtp) setting (%d clks) may vilolates the min. requirement(4 clks) for current setting\n", rtp);
bfc04b70:	3c02bfc1 	lui	v0,0xbfc1
bfc04b74:	2444afa4 	addiu	a0,v0,-20572
bfc04b78:	8fa50044 	lw	a1,68(sp)
bfc04b7c:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04b80:	00000000 	nop
		_memctl_debug_printf("ok\n");
	}


	/* 5. T_WTR  (20ns) */
	wtr = _DTR_wtr();
bfc04b84:	0ff0106e 	jal	bfc041b8 <_DTR_wtr>
bfc04b88:	00000000 	nop
bfc04b8c:	afa20048 	sw	v0,72(sp)
	_memctl_debug_printf("\twtr(%d): ",wtr);
	max_freq_mhz = _DTR_wtr_frq_mhz(std_wtr_ns);
bfc04b90:	8fa40068 	lw	a0,104(sp)
bfc04b94:	0ff00d2c 	jal	bfc034b0 <_DTR_wtr_frq_mhz>
bfc04b98:	00000000 	nop
bfc04b9c:	afa20088 	sw	v0,136(sp)
	if(dram_freq_mhz > max_freq_mhz)
bfc04ba0:	8fa30038 	lw	v1,56(sp)
bfc04ba4:	8fa20088 	lw	v0,136(sp)
bfc04ba8:	0043102b 	sltu	v0,v0,v1
bfc04bac:	10400007 	beqz	v0,bfc04bcc <memctlc_check_DTR_DDR3+0x4d4>
bfc04bb0:	00000000 	nop
		printf("#Warnning: DTR1(wtr) setting may vilolates the requirement (%dns). Max. %dMHz for current setting\n", std_wtr_ns, max_freq_mhz);
bfc04bb4:	3c02bfc1 	lui	v0,0xbfc1
bfc04bb8:	2444b00c 	addiu	a0,v0,-20468
bfc04bbc:	8fa50068 	lw	a1,104(sp)
bfc04bc0:	8fa60088 	lw	a2,136(sp)
bfc04bc4:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04bc8:	00000000 	nop

	if(wtr < 4){
bfc04bcc:	8fa20048 	lw	v0,72(sp)
bfc04bd0:	2c420004 	sltiu	v0,v0,4
bfc04bd4:	10400006 	beqz	v0,bfc04bf0 <memctlc_check_DTR_DDR3+0x4f8>
bfc04bd8:	00000000 	nop
		printf("#Warnning: DTR1(wtr) setting (%d clks) may vilolates the min. requirement(4 clks) for current setting\n", wtr);
bfc04bdc:	3c02bfc1 	lui	v0,0xbfc1
bfc04be0:	2444b070 	addiu	a0,v0,-20368
bfc04be4:	8fa50048 	lw	a1,72(sp)
bfc04be8:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04bec:	00000000 	nop
		_memctl_debug_printf("ok\n");
	}

	/* 6. Refresh period (7.8us) */
	_memctl_debug_printf("\trefresh cycles: ");
	min_freq_mhz  = _DTR_refresh_freq_mhz(std_refi_ns);
bfc04bf0:	8fa4006c 	lw	a0,108(sp)
bfc04bf4:	0ff00ccb 	jal	bfc0332c <_DTR_refresh_freq_mhz>
bfc04bf8:	00000000 	nop
bfc04bfc:	afa2008c 	sw	v0,140(sp)
	if(0 != min_freq_mhz){
bfc04c00:	8fa2008c 	lw	v0,140(sp)
bfc04c04:	1040000b 	beqz	v0,bfc04c34 <memctlc_check_DTR_DDR3+0x53c>
bfc04c08:	00000000 	nop
		_memctl_debug_printf("(DRAM freq. have to >= %dMHz) ", min_freq_mhz);
		if(dram_freq_mhz < min_freq_mhz)
bfc04c0c:	8fa30038 	lw	v1,56(sp)
bfc04c10:	8fa2008c 	lw	v0,140(sp)
bfc04c14:	0062102b 	sltu	v0,v1,v0
bfc04c18:	10400006 	beqz	v0,bfc04c34 <memctlc_check_DTR_DDR3+0x53c>
bfc04c1c:	00000000 	nop
			printf("\n\t#Warnning: DTR setting may vilolate the requirement of DRAM refresh in %dms.\n", std_refi_ns);
bfc04c20:	3c02bfc1 	lui	v0,0xbfc1
bfc04c24:	2444b0d8 	addiu	a0,v0,-20264
bfc04c28:	8fa5006c 	lw	a1,108(sp)
bfc04c2c:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04c30:	00000000 	nop
		_memctl_debug_printf("DRAM freq. have to > 1000MHz\n");


	/* 7. T_RP  (20ns) */
	//_memctl_debug_printf("\trp(%d): ");
	max_freq_mhz = _DTR_rp_frq_mhz(std_rp_ns);
bfc04c34:	8fa40060 	lw	a0,96(sp)
bfc04c38:	0ff00d61 	jal	bfc03584 <_DTR_rp_frq_mhz>
bfc04c3c:	00000000 	nop
bfc04c40:	afa20088 	sw	v0,136(sp)
	if(dram_freq_mhz > max_freq_mhz)
bfc04c44:	8fa30038 	lw	v1,56(sp)
bfc04c48:	8fa20088 	lw	v0,136(sp)
bfc04c4c:	0043102b 	sltu	v0,v0,v1
bfc04c50:	10400007 	beqz	v0,bfc04c70 <memctlc_check_DTR_DDR3+0x578>
bfc04c54:	00000000 	nop
		printf("#Warnning: DTR1(rp) setting may vilolates the requirement (%dns). Max. %dMHz for current setting\n", std_rp_ns, max_freq_mhz);
bfc04c58:	3c02bfc1 	lui	v0,0xbfc1
bfc04c5c:	2444b128 	addiu	a0,v0,-20184
bfc04c60:	8fa50060 	lw	a1,96(sp)
bfc04c64:	8fa60088 	lw	a2,136(sp)
bfc04c68:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04c6c:	00000000 	nop
	else
		_memctl_debug_printf("ok\n");
	/* 8. T_RCD (20ns) */
	//_memctl_debug_printf("\trcd: ");
	max_freq_mhz = _DTR_rcd_frq_mhz(std_rcd_ns);
bfc04c70:	8fa4005c 	lw	a0,92(sp)
bfc04c74:	0ff00dad 	jal	bfc036b4 <_DTR_rcd_frq_mhz>
bfc04c78:	00000000 	nop
bfc04c7c:	afa20088 	sw	v0,136(sp)
	if(dram_freq_mhz > max_freq_mhz)
bfc04c80:	8fa30038 	lw	v1,56(sp)
bfc04c84:	8fa20088 	lw	v0,136(sp)
bfc04c88:	0043102b 	sltu	v0,v0,v1
bfc04c8c:	10400007 	beqz	v0,bfc04cac <memctlc_check_DTR_DDR3+0x5b4>
bfc04c90:	00000000 	nop
		printf("#Warnning: DTR(rcd) setting may vilolates the requirement (%dns). Max. %dMHz for current setting\n", std_rcd_ns, max_freq_mhz);
bfc04c94:	3c02bfc1 	lui	v0,0xbfc1
bfc04c98:	2444b18c 	addiu	a0,v0,-20084
bfc04c9c:	8fa5005c 	lw	a1,92(sp)
bfc04ca0:	8fa60088 	lw	a2,136(sp)
bfc04ca4:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04ca8:	00000000 	nop
	else
		_memctl_debug_printf("ok\n");

	/* 9. T_RRD (20ns) */
	rrd = _DTR_rrd();
bfc04cac:	0ff01055 	jal	bfc04154 <_DTR_rrd>
bfc04cb0:	00000000 	nop
bfc04cb4:	afa20040 	sw	v0,64(sp)
	//_memctl_debug_printf("\trrd: ");
	max_freq_mhz = _DTR_rrd_frq_mhz(std_rrd_ns);
bfc04cb8:	8fa40078 	lw	a0,120(sp)
bfc04cbc:	0ff00d7a 	jal	bfc035e8 <_DTR_rrd_frq_mhz>
bfc04cc0:	00000000 	nop
bfc04cc4:	afa20088 	sw	v0,136(sp)
	if(dram_freq_mhz > max_freq_mhz)
bfc04cc8:	8fa30038 	lw	v1,56(sp)
bfc04ccc:	8fa20088 	lw	v0,136(sp)
bfc04cd0:	0043102b 	sltu	v0,v0,v1
bfc04cd4:	10400007 	beqz	v0,bfc04cf4 <memctlc_check_DTR_DDR3+0x5fc>
bfc04cd8:	00000000 	nop
		printf("#Warnning: DTR(rrd) setting may vilolates the requirement (%dns). Max. %dMHz for current setting\n", std_rrd_ns, max_freq_mhz);
bfc04cdc:	3c02bfc1 	lui	v0,0xbfc1
bfc04ce0:	2444b1f0 	addiu	a0,v0,-19984
bfc04ce4:	8fa50078 	lw	a1,120(sp)
bfc04ce8:	8fa60088 	lw	a2,136(sp)
bfc04cec:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04cf0:	00000000 	nop
	
	if(rrd < 4){
bfc04cf4:	8fa20040 	lw	v0,64(sp)
bfc04cf8:	2c420004 	sltiu	v0,v0,4
bfc04cfc:	10400006 	beqz	v0,bfc04d18 <memctlc_check_DTR_DDR3+0x620>
bfc04d00:	00000000 	nop
		printf("#Warnning: DTR1(rrd) setting (%d clks) may vilolates the min. requirement(4 clks) for current setting\n", rrd);
bfc04d04:	3c02bfc1 	lui	v0,0xbfc1
bfc04d08:	2444b254 	addiu	a0,v0,-19884
bfc04d0c:	8fa50040 	lw	a1,64(sp)
bfc04d10:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04d14:	00000000 	nop
	}else{
		_memctl_debug_printf("ok\n");
	}
	/* 10. T_FAWG (20ns) */
	//_memctl_debug_printf("\tfawg: ");
	max_freq_mhz = _DTR_fawg_frq_mhz(std_fawg_ns);
bfc04d18:	8fa40064 	lw	a0,100(sp)
bfc04d1c:	0ff00d94 	jal	bfc03650 <_DTR_fawg_frq_mhz>
bfc04d20:	00000000 	nop
bfc04d24:	afa20088 	sw	v0,136(sp)
	if(dram_freq_mhz > max_freq_mhz)
bfc04d28:	8fa30038 	lw	v1,56(sp)
bfc04d2c:	8fa20088 	lw	v0,136(sp)
bfc04d30:	0043102b 	sltu	v0,v0,v1
bfc04d34:	10400007 	beqz	v0,bfc04d54 <memctlc_check_DTR_DDR3+0x65c>
bfc04d38:	00000000 	nop
		printf("#Warnning: DTR(fawg) setting may vilolates the requirement (%dns). Max. %dMHz for current setting\n", std_fawg_ns, max_freq_mhz);
bfc04d3c:	3c02bfc1 	lui	v0,0xbfc1
bfc04d40:	2444b2bc 	addiu	a0,v0,-19780
bfc04d44:	8fa50064 	lw	a1,100(sp)
bfc04d48:	8fa60088 	lw	a2,136(sp)
bfc04d4c:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04d50:	00000000 	nop
	else
		_memctl_debug_printf("ok\n");

	/* 11. T_RFC */
	//_memctl_debug_printf("\trfc: ");
	max_freq_mhz = _DTR_rfc_frq_mhz(std_rfc_ns);
bfc04d54:	8fa40058 	lw	a0,88(sp)
bfc04d58:	0ff00de4 	jal	bfc03790 <_DTR_rfc_frq_mhz>
bfc04d5c:	00000000 	nop
bfc04d60:	afa20088 	sw	v0,136(sp)
	if(dram_freq_mhz > max_freq_mhz)
bfc04d64:	8fa30038 	lw	v1,56(sp)
bfc04d68:	8fa20088 	lw	v0,136(sp)
bfc04d6c:	0043102b 	sltu	v0,v0,v1
bfc04d70:	10400007 	beqz	v0,bfc04d90 <memctlc_check_DTR_DDR3+0x698>
bfc04d74:	00000000 	nop
		printf("#Warnning: DTR(rfc) setting may vilolates the requirement (%dns). Max. %dMHz for current setting\n", std_rfc_ns, max_freq_mhz);
bfc04d78:	3c02bfc1 	lui	v0,0xbfc1
bfc04d7c:	2444b320 	addiu	a0,v0,-19680
bfc04d80:	8fa50058 	lw	a1,88(sp)
bfc04d84:	8fa60088 	lw	a2,136(sp)
bfc04d88:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04d8c:	00000000 	nop
	else
		_memctl_debug_printf("ok\n");

	/* 12. T_RAS (45ns) */
	//_memctl_debug_printf("\tras: ");
	max_freq_mhz = _DTR_ras_frq_mhz(std_ras_ns);
bfc04d90:	8fa40074 	lw	a0,116(sp)
bfc04d94:	0ff00dc8 	jal	bfc03720 <_DTR_ras_frq_mhz>
bfc04d98:	00000000 	nop
bfc04d9c:	afa20088 	sw	v0,136(sp)
	if(dram_freq_mhz > max_freq_mhz)
bfc04da0:	8fa30038 	lw	v1,56(sp)
bfc04da4:	8fa20088 	lw	v0,136(sp)
bfc04da8:	0043102b 	sltu	v0,v0,v1
bfc04dac:	10400007 	beqz	v0,bfc04dcc <memctlc_check_DTR_DDR3+0x6d4>
bfc04db0:	00000000 	nop
		printf("#Warnning: DTR(ras) setting may vilolates the requirement (%dns). Max. %dMHz for current setting\n", std_ras_ns, max_freq_mhz);
bfc04db4:	3c02bfc1 	lui	v0,0xbfc1
bfc04db8:	2444b384 	addiu	a0,v0,-19580
bfc04dbc:	8fa50074 	lw	a1,116(sp)
bfc04dc0:	8fa60088 	lw	a2,136(sp)
bfc04dc4:	0ff003ac 	jal	bfc00eb0 <printf>
bfc04dc8:	00000000 	nop
	else
		_memctl_debug_printf("ok\n");

	if(dram_freq_mhz >= DDR3_CAS10_MAX_MHZ){
bfc04dcc:	8fa20038 	lw	v0,56(sp)
bfc04dd0:	2c42029a 	sltiu	v0,v0,666
bfc04dd4:	1440000b 	bnez	v0,bfc04e04 <memctlc_check_DTR_DDR3+0x70c>
bfc04dd8:	00000000 	nop
		cas_10_ns = (11 * 1000 * 10)/dram_freq_mhz;
bfc04ddc:	3c020001 	lui	v0,0x1
bfc04de0:	3443adb0 	ori	v1,v0,0xadb0
bfc04de4:	8fa20038 	lw	v0,56(sp)
bfc04de8:	0062001b 	divu	zero,v1,v0
bfc04dec:	004001f4 	teq	v0,zero,0x7
bfc04df0:	00001810 	mfhi	v1
bfc04df4:	00001012 	mflo	v0
bfc04df8:	afa20050 	sw	v0,80(sp)
bfc04dfc:	0bf013cd 	j	bfc04f34 <memctlc_check_DTR_DDR3+0x83c>
bfc04e00:	00000000 	nop
	}else if(dram_freq_mhz >= DDR3_CAS9_MAX_MHZ){
bfc04e04:	8fa20038 	lw	v0,56(sp)
bfc04e08:	2c42029a 	sltiu	v0,v0,666
bfc04e0c:	1440000b 	bnez	v0,bfc04e3c <memctlc_check_DTR_DDR3+0x744>
bfc04e10:	00000000 	nop
		cas_10_ns = (10 * 1000 * 10)/dram_freq_mhz;
bfc04e14:	3c020001 	lui	v0,0x1
bfc04e18:	344386a0 	ori	v1,v0,0x86a0
bfc04e1c:	8fa20038 	lw	v0,56(sp)
bfc04e20:	0062001b 	divu	zero,v1,v0
bfc04e24:	004001f4 	teq	v0,zero,0x7
bfc04e28:	00001810 	mfhi	v1
bfc04e2c:	00001012 	mflo	v0
bfc04e30:	afa20050 	sw	v0,80(sp)
bfc04e34:	0bf013cd 	j	bfc04f34 <memctlc_check_DTR_DDR3+0x83c>
bfc04e38:	00000000 	nop
	}else if(dram_freq_mhz >= DDR3_CAS8_MAX_MHZ){
bfc04e3c:	8fa20038 	lw	v0,56(sp)
bfc04e40:	2c420215 	sltiu	v0,v0,533
bfc04e44:	1440000b 	bnez	v0,bfc04e74 <memctlc_check_DTR_DDR3+0x77c>
bfc04e48:	00000000 	nop
		cas_10_ns = (9 * 1000* 10)/dram_freq_mhz;
bfc04e4c:	3c020001 	lui	v0,0x1
bfc04e50:	34435f90 	ori	v1,v0,0x5f90
bfc04e54:	8fa20038 	lw	v0,56(sp)
bfc04e58:	0062001b 	divu	zero,v1,v0
bfc04e5c:	004001f4 	teq	v0,zero,0x7
bfc04e60:	00001810 	mfhi	v1
bfc04e64:	00001012 	mflo	v0
bfc04e68:	afa20050 	sw	v0,80(sp)
bfc04e6c:	0bf013cd 	j	bfc04f34 <memctlc_check_DTR_DDR3+0x83c>
bfc04e70:	00000000 	nop
	}else if(dram_freq_mhz >= DDR3_CAS7_MAX_MHZ){
bfc04e74:	8fa20038 	lw	v0,56(sp)
bfc04e78:	2c420215 	sltiu	v0,v0,533
bfc04e7c:	1440000b 	bnez	v0,bfc04eac <memctlc_check_DTR_DDR3+0x7b4>
bfc04e80:	00000000 	nop
		cas_10_ns = (8 * 1000 * 10)/dram_freq_mhz;
bfc04e84:	3c020001 	lui	v0,0x1
bfc04e88:	34433880 	ori	v1,v0,0x3880
bfc04e8c:	8fa20038 	lw	v0,56(sp)
bfc04e90:	0062001b 	divu	zero,v1,v0
bfc04e94:	004001f4 	teq	v0,zero,0x7
bfc04e98:	00001810 	mfhi	v1
bfc04e9c:	00001012 	mflo	v0
bfc04ea0:	afa20050 	sw	v0,80(sp)
bfc04ea4:	0bf013cd 	j	bfc04f34 <memctlc_check_DTR_DDR3+0x83c>
bfc04ea8:	00000000 	nop
	}else if(dram_freq_mhz >= DDR3_CAS6_MAX_MHZ){
bfc04eac:	8fa20038 	lw	v0,56(sp)
bfc04eb0:	2c420190 	sltiu	v0,v0,400
bfc04eb4:	1440000b 	bnez	v0,bfc04ee4 <memctlc_check_DTR_DDR3+0x7ec>
bfc04eb8:	00000000 	nop
		cas_10_ns = (7 * 1000 * 10)/dram_freq_mhz;
bfc04ebc:	3c020001 	lui	v0,0x1
bfc04ec0:	34431170 	ori	v1,v0,0x1170
bfc04ec4:	8fa20038 	lw	v0,56(sp)
bfc04ec8:	0062001b 	divu	zero,v1,v0
bfc04ecc:	004001f4 	teq	v0,zero,0x7
bfc04ed0:	00001810 	mfhi	v1
bfc04ed4:	00001012 	mflo	v0
bfc04ed8:	afa20050 	sw	v0,80(sp)
bfc04edc:	0bf013cd 	j	bfc04f34 <memctlc_check_DTR_DDR3+0x83c>
bfc04ee0:	00000000 	nop
	}else if(dram_freq_mhz >= DDR3_CAS5_MAX_MHZ){
bfc04ee4:	8fa20038 	lw	v0,56(sp)
bfc04ee8:	2c420190 	sltiu	v0,v0,400
bfc04eec:	1440000a 	bnez	v0,bfc04f18 <memctlc_check_DTR_DDR3+0x820>
bfc04ef0:	00000000 	nop
		cas_10_ns = (6 * 1000 * 10)/dram_freq_mhz;
bfc04ef4:	3403ea60 	li	v1,0xea60
bfc04ef8:	8fa20038 	lw	v0,56(sp)
bfc04efc:	0062001b 	divu	zero,v1,v0
bfc04f00:	004001f4 	teq	v0,zero,0x7
bfc04f04:	00001810 	mfhi	v1
bfc04f08:	00001012 	mflo	v0
bfc04f0c:	afa20050 	sw	v0,80(sp)
bfc04f10:	0bf013cd 	j	bfc04f34 <memctlc_check_DTR_DDR3+0x83c>
bfc04f14:	00000000 	nop
	}else{
		cas_10_ns = (5 * 1000 * 10)/dram_freq_mhz;
bfc04f18:	3403c350 	li	v1,0xc350
bfc04f1c:	8fa20038 	lw	v0,56(sp)
bfc04f20:	0062001b 	divu	zero,v1,v0
bfc04f24:	004001f4 	teq	v0,zero,0x7
bfc04f28:	00001810 	mfhi	v1
bfc04f2c:	00001012 	mflo	v0
bfc04f30:	afa20050 	sw	v0,80(sp)
	}

        _DTR_suggestion(sug_dtr, DDR3_STD_REFI_NS, DDR3_STD_RP_NS, \
bfc04f34:	27a20094 	addiu	v0,sp,148
bfc04f38:	2403002d 	li	v1,45
bfc04f3c:	afa30010 	sw	v1,16(sp)
bfc04f40:	8fa30058 	lw	v1,88(sp)
bfc04f44:	afa30014 	sw	v1,20(sp)
bfc04f48:	2403000f 	li	v1,15
bfc04f4c:	afa30018 	sw	v1,24(sp)
bfc04f50:	2403000a 	li	v1,10
bfc04f54:	afa3001c 	sw	v1,28(sp)
bfc04f58:	24030032 	li	v1,50
bfc04f5c:	afa30020 	sw	v1,32(sp)
bfc04f60:	24030008 	li	v1,8
bfc04f64:	afa30024 	sw	v1,36(sp)
bfc04f68:	24030008 	li	v1,8
bfc04f6c:	afa30028 	sw	v1,40(sp)
bfc04f70:	8fa30050 	lw	v1,80(sp)
bfc04f74:	afa3002c 	sw	v1,44(sp)
bfc04f78:	8fa30038 	lw	v1,56(sp)
bfc04f7c:	afa30030 	sw	v1,48(sp)
bfc04f80:	00402021 	move	a0,v0
bfc04f84:	24051e78 	li	a1,7800
bfc04f88:	2406000f 	li	a2,15
bfc04f8c:	2407000f 	li	a3,15
bfc04f90:	0ff00864 	jal	bfc02190 <_DTR_suggestion>
bfc04f94:	00000000 	nop
                        DDR3_STD_RCD_NS, DDR3_STD_RAS_NS, std_rfc_ns, DDR2_STD_WR_NS,\
                        DDR3_STD_RRD_NS, DDR3_STD_FAWG_NS, DDR3_STD_WTR_NS, DDR3_STD_RTP_NS,\
                        cas_10_ns, dram_freq_mhz);

	cas = ((sug_dtr[0] & DTR0_CAS_MASK) >> DTR0_CAS_FD_S);
bfc04f98:	8fa20094 	lw	v0,148(sp)
bfc04f9c:	00021702 	srl	v0,v0,0x1c
bfc04fa0:	afa2004c 	sw	v0,76(sp)
	if(cas < 4){
bfc04fa4:	8fa2004c 	lw	v0,76(sp)
bfc04fa8:	2c420004 	sltiu	v0,v0,4
bfc04fac:	1040000b 	beqz	v0,bfc04fdc <memctlc_check_DTR_DDR3+0x8e4>
bfc04fb0:	00000000 	nop
		cas = 4;
bfc04fb4:	24020004 	li	v0,4
bfc04fb8:	afa2004c 	sw	v0,76(sp)
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_CAS_MASK)) | (cas << DTR0_CAS_FD_S);
bfc04fbc:	8fa30094 	lw	v1,148(sp)
bfc04fc0:	3c020fff 	lui	v0,0xfff
bfc04fc4:	3442ffff 	ori	v0,v0,0xffff
bfc04fc8:	00621824 	and	v1,v1,v0
bfc04fcc:	8fa2004c 	lw	v0,76(sp)
bfc04fd0:	00021700 	sll	v0,v0,0x1c
bfc04fd4:	00621025 	or	v0,v1,v0
bfc04fd8:	afa20094 	sw	v0,148(sp)
	}

	/* DDR3 write cas */
	if(dram_freq_mhz >= DDR3_CWL7_MAX_MHZ){
bfc04fdc:	8fa20038 	lw	v0,56(sp)
bfc04fe0:	2c42029a 	sltiu	v0,v0,666
bfc04fe4:	14400005 	bnez	v0,bfc04ffc <memctlc_check_DTR_DDR3+0x904>
bfc04fe8:	00000000 	nop
		tcwl = 7;
bfc04fec:	24020007 	li	v0,7
bfc04ff0:	afa20084 	sw	v0,132(sp)
bfc04ff4:	0bf01411 	j	bfc05044 <memctlc_check_DTR_DDR3+0x94c>
bfc04ff8:	00000000 	nop
	}else if(dram_freq_mhz >= DDR3_CWL6_MAX_MHZ){
bfc04ffc:	8fa20038 	lw	v0,56(sp)
bfc05000:	2c420215 	sltiu	v0,v0,533
bfc05004:	14400005 	bnez	v0,bfc0501c <memctlc_check_DTR_DDR3+0x924>
bfc05008:	00000000 	nop
		tcwl = 6;
bfc0500c:	24020006 	li	v0,6
bfc05010:	afa20084 	sw	v0,132(sp)
bfc05014:	0bf01411 	j	bfc05044 <memctlc_check_DTR_DDR3+0x94c>
bfc05018:	00000000 	nop
	}else if(dram_freq_mhz >= DDR3_CWL5_MAX_MHZ){
bfc0501c:	8fa20038 	lw	v0,56(sp)
bfc05020:	2c420190 	sltiu	v0,v0,400
bfc05024:	14400005 	bnez	v0,bfc0503c <memctlc_check_DTR_DDR3+0x944>
bfc05028:	00000000 	nop
		tcwl = 5;
bfc0502c:	24020005 	li	v0,5
bfc05030:	afa20084 	sw	v0,132(sp)
bfc05034:	0bf01411 	j	bfc05044 <memctlc_check_DTR_DDR3+0x94c>
bfc05038:	00000000 	nop
	}else{
		tcwl = 4;
bfc0503c:	24020004 	li	v0,4
bfc05040:	afa20084 	sw	v0,132(sp)
	}

	sug_dtr[0] = (sug_dtr[0] & (~DTR0_CWL_MASK)) | (tcwl << DTR0_CWL_FD_S);
bfc05044:	8fa30094 	lw	v1,148(sp)
bfc05048:	3c02ff0f 	lui	v0,0xff0f
bfc0504c:	3442ffff 	ori	v0,v0,0xffff
bfc05050:	00621824 	and	v1,v1,v0
bfc05054:	8fa20084 	lw	v0,132(sp)
bfc05058:	00021500 	sll	v0,v0,0x14
bfc0505c:	00621025 	or	v0,v1,v0
bfc05060:	afa20094 	sw	v0,148(sp)

	/* DDR3 Write recovery maximum == 12 , min == 5 */
	wr = ((sug_dtr[0] & DTR0_WR_MASK) >> DTR0_WR_FD_S);
bfc05064:	8fa30094 	lw	v1,148(sp)
bfc05068:	3c020f00 	lui	v0,0xf00
bfc0506c:	00621024 	and	v0,v1,v0
bfc05070:	00021602 	srl	v0,v0,0x18
bfc05074:	afa20080 	sw	v0,128(sp)
	if(wr > 11){
bfc05078:	8fa20080 	lw	v0,128(sp)
bfc0507c:	2c42000c 	sltiu	v0,v0,12
bfc05080:	1440000a 	bnez	v0,bfc050ac <memctlc_check_DTR_DDR3+0x9b4>
bfc05084:	00000000 	nop
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_WR_MASK)) | (11 << DTR0_WR_FD_S);
bfc05088:	8fa30094 	lw	v1,148(sp)
bfc0508c:	3c02f0ff 	lui	v0,0xf0ff
bfc05090:	3442ffff 	ori	v0,v0,0xffff
bfc05094:	00621824 	and	v1,v1,v0
bfc05098:	3c020b00 	lui	v0,0xb00
bfc0509c:	00621025 	or	v0,v1,v0
bfc050a0:	afa20094 	sw	v0,148(sp)
bfc050a4:	0bf01436 	j	bfc050d8 <memctlc_check_DTR_DDR3+0x9e0>
bfc050a8:	00000000 	nop
	}else if(wr < 4){
bfc050ac:	8fa20080 	lw	v0,128(sp)
bfc050b0:	2c420004 	sltiu	v0,v0,4
bfc050b4:	10400008 	beqz	v0,bfc050d8 <memctlc_check_DTR_DDR3+0x9e0>
bfc050b8:	00000000 	nop
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_WR_MASK)) | (4 << DTR0_WR_FD_S);
bfc050bc:	8fa30094 	lw	v1,148(sp)
bfc050c0:	3c02f0ff 	lui	v0,0xf0ff
bfc050c4:	3442ffff 	ori	v0,v0,0xffff
bfc050c8:	00621824 	and	v1,v1,v0
bfc050cc:	3c020400 	lui	v0,0x400
bfc050d0:	00621025 	or	v0,v1,v0
bfc050d4:	afa20094 	sw	v0,148(sp)
	}else{}

	/* DDR3 Write to read delay cycle at least 4 clock cycles */
	wtr = ((sug_dtr[0] & DTR0_WTR_MASK) >> DTR0_WTR_FD_S);
bfc050d8:	8fa20094 	lw	v0,148(sp)
bfc050dc:	3042f000 	andi	v0,v0,0xf000
bfc050e0:	00021302 	srl	v0,v0,0xc
bfc050e4:	afa20048 	sw	v0,72(sp)
	if(wtr < 3){
bfc050e8:	8fa20048 	lw	v0,72(sp)
bfc050ec:	2c420003 	sltiu	v0,v0,3
bfc050f0:	10400007 	beqz	v0,bfc05110 <memctlc_check_DTR_DDR3+0xa18>
bfc050f4:	00000000 	nop
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_WTR_MASK)) | (3 << DTR0_WTR_FD_S);
bfc050f8:	8fa30094 	lw	v1,148(sp)
bfc050fc:	3c02ffff 	lui	v0,0xffff
bfc05100:	34420fff 	ori	v0,v0,0xfff
bfc05104:	00621024 	and	v0,v1,v0
bfc05108:	34423000 	ori	v0,v0,0x3000
bfc0510c:	afa20094 	sw	v0,148(sp)
	}

	/* DDR3 RTP delay cycle at least 4 clock cycles */
	rtp = ((sug_dtr[0] & DTR0_RTP_MASK) >> DTR0_RTP_FD_S);
bfc05110:	8fa30094 	lw	v1,148(sp)
bfc05114:	3c02000f 	lui	v0,0xf
bfc05118:	00621024 	and	v0,v1,v0
bfc0511c:	00021402 	srl	v0,v0,0x10
bfc05120:	afa20044 	sw	v0,68(sp)
	if(rtp < 3){
bfc05124:	8fa20044 	lw	v0,68(sp)
bfc05128:	2c420003 	sltiu	v0,v0,3
bfc0512c:	10400008 	beqz	v0,bfc05150 <memctlc_check_DTR_DDR3+0xa58>
bfc05130:	00000000 	nop
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_RTP_MASK)) | (3 << DTR0_RTP_FD_S);
bfc05134:	8fa30094 	lw	v1,148(sp)
bfc05138:	3c02fff0 	lui	v0,0xfff0
bfc0513c:	3442ffff 	ori	v0,v0,0xffff
bfc05140:	00621824 	and	v1,v1,v0
bfc05144:	3c020003 	lui	v0,0x3
bfc05148:	00621025 	or	v0,v1,v0
bfc0514c:	afa20094 	sw	v0,148(sp)
	}

	/* DDR3 RRD delay cycle at least 4 clock cycles */
	rrd = ((sug_dtr[1] & DTR1_RRD_MASK) >> DTR1_RRD_FD_S);
bfc05150:	8fa20098 	lw	v0,152(sp)
bfc05154:	3042ff00 	andi	v0,v0,0xff00
bfc05158:	00021202 	srl	v0,v0,0x8
bfc0515c:	afa20040 	sw	v0,64(sp)
	if(rrd < 3){
bfc05160:	8fa20040 	lw	v0,64(sp)
bfc05164:	2c420003 	sltiu	v0,v0,3
bfc05168:	10400007 	beqz	v0,bfc05188 <memctlc_check_DTR_DDR3+0xa90>
bfc0516c:	00000000 	nop
		sug_dtr[1] = (sug_dtr[1] & (~DTR1_RRD_MASK)) | (3 << DTR1_RRD_FD_S);
bfc05170:	8fa30098 	lw	v1,152(sp)
bfc05174:	3c02ffff 	lui	v0,0xffff
bfc05178:	344200ff 	ori	v0,v0,0xff
bfc0517c:	00621024 	and	v0,v1,v0
bfc05180:	34420300 	ori	v0,v0,0x300
bfc05184:	afa20098 	sw	v0,152(sp)
	}

	_DTR_DDR3_MRS_setting(sug_dtr, sug_mr);
bfc05188:	27a30094 	addiu	v1,sp,148
bfc0518c:	27a200a0 	addiu	v0,sp,160
bfc05190:	00602021 	move	a0,v1
bfc05194:	00402821 	move	a1,v0
bfc05198:	0ff00e18 	jal	bfc03860 <_DTR_DDR3_MRS_setting>
bfc0519c:	00000000 	nop
	//REG32(DMCR) = sug_mr[1];
	//REG32(DMCR) = sug_mr[2];
	#endif


}
bfc051a0:	8fbf00b4 	lw	ra,180(sp)
bfc051a4:	8fb000b0 	lw	s0,176(sp)
bfc051a8:	27bd00b8 	addiu	sp,sp,184
bfc051ac:	03e00008 	jr	ra
bfc051b0:	00000000 	nop

bfc051b4 <memctlc_check_DTR_DDR2>:
 *	None
 * Note:
 *	- It shows some messages for the result of the checking.
 */
void memctlc_check_DTR_DDR2()
{
bfc051b4:	27bdff50 	addiu	sp,sp,-176
bfc051b8:	afbf00ac 	sw	ra,172(sp)
bfc051bc:	afb000a8 	sw	s0,168(sp)
	unsigned int	sug_dtr[3], sug_mr[4];
	unsigned int	dram_size;
	unsigned int	cas_10_ns, cas, wtr, _rfc_ns;


	unsigned int dram_freq_mhz = board_DRAM_freq_mhz();
bfc051c0:	0ff0260d 	jal	bfc09834 <board_DRAM_freq_mhz>
bfc051c4:	00000000 	nop
bfc051c8:	afa20038 	sw	v0,56(sp)

	/* 
	 * Check DTR
	 */
	std_wr_ns  = DDR2_STD_WR_NS;
bfc051cc:	2402000f 	li	v0,15
bfc051d0:	afa20068 	sw	v0,104(sp)
	std_rtp_ns  = DDR2_STD_RTP_NS;
bfc051d4:	24020008 	li	v0,8
bfc051d8:	afa20074 	sw	v0,116(sp)
	std_wtr_ns  = DDR2_STD_WTR_NS;
bfc051dc:	24020008 	li	v0,8
bfc051e0:	afa20060 	sw	v0,96(sp)
	//std_ref_ms = DDR2_STD_REF_MS; /* 64ms */
	std_refi_ns = DDR2_STD_REFI_NS; /* 7.8us */
bfc051e4:	24021e78 	li	v0,7800
bfc051e8:	afa20064 	sw	v0,100(sp)
	std_rp_ns  = DDR2_STD_RP_NS;
bfc051ec:	2402000f 	li	v0,15
bfc051f0:	afa20058 	sw	v0,88(sp)
	std_rcd_ns = DDR2_STD_RCD_NS;
bfc051f4:	2402000f 	li	v0,15
bfc051f8:	afa20054 	sw	v0,84(sp)
	std_rrd_ns = DDR2_STD_RRD_NS;
bfc051fc:	2402000a 	li	v0,10
bfc05200:	afa20070 	sw	v0,112(sp)
	std_fawg_ns = DDR2_STD_FAWG_NS;
bfc05204:	24020032 	li	v0,50
bfc05208:	afa2005c 	sw	v0,92(sp)
	std_ras_ns = DDR2_STD_RAS_NS;
bfc0520c:	2402002d 	li	v0,45
bfc05210:	afa2006c 	sw	v0,108(sp)
	
	dram_size = memctlc_dram_size()/_get_DRAM_csnum();
bfc05214:	0ff00c74 	jal	bfc031d0 <memctlc_dram_size>
bfc05218:	00000000 	nop
bfc0521c:	00408021 	move	s0,v0
bfc05220:	0ff00c68 	jal	bfc031a0 <_get_DRAM_csnum>
bfc05224:	00000000 	nop
bfc05228:	0202001b 	divu	zero,s0,v0
bfc0522c:	004001f4 	teq	v0,zero,0x7
bfc05230:	00001810 	mfhi	v1
bfc05234:	00001012 	mflo	v0
bfc05238:	afa2004c 	sw	v0,76(sp)
	switch (dram_size){
bfc0523c:	8fa2004c 	lw	v0,76(sp)
bfc05240:	3c030800 	lui	v1,0x800
bfc05244:	1043001e 	beq	v0,v1,bfc052c0 <memctlc_check_DTR_DDR2+0x10c>
bfc05248:	00000000 	nop
bfc0524c:	3c030800 	lui	v1,0x800
bfc05250:	34630001 	ori	v1,v1,0x1
bfc05254:	0043182b 	sltu	v1,v0,v1
bfc05258:	10600009 	beqz	v1,bfc05280 <memctlc_check_DTR_DDR2+0xcc>
bfc0525c:	00000000 	nop
bfc05260:	3c030200 	lui	v1,0x200
bfc05264:	1043000e 	beq	v0,v1,bfc052a0 <memctlc_check_DTR_DDR2+0xec>
bfc05268:	00000000 	nop
bfc0526c:	3c030400 	lui	v1,0x400
bfc05270:	1043000f 	beq	v0,v1,bfc052b0 <memctlc_check_DTR_DDR2+0xfc>
bfc05274:	00000000 	nop
bfc05278:	0bf014bc 	j	bfc052f0 <memctlc_check_DTR_DDR2+0x13c>
bfc0527c:	00000000 	nop
bfc05280:	3c031000 	lui	v1,0x1000
bfc05284:	10430012 	beq	v0,v1,bfc052d0 <memctlc_check_DTR_DDR2+0x11c>
bfc05288:	00000000 	nop
bfc0528c:	3c032000 	lui	v1,0x2000
bfc05290:	10430013 	beq	v0,v1,bfc052e0 <memctlc_check_DTR_DDR2+0x12c>
bfc05294:	00000000 	nop
bfc05298:	0bf014bc 	j	bfc052f0 <memctlc_check_DTR_DDR2+0x13c>
bfc0529c:	00000000 	nop
		case 0x2000000:
			_rfc_ns = DDR2_STD_RFC_32MB_NS;
bfc052a0:	2402004b 	li	v0,75
bfc052a4:	afa2003c 	sw	v0,60(sp)
			break;
bfc052a8:	0bf014be 	j	bfc052f8 <memctlc_check_DTR_DDR2+0x144>
bfc052ac:	00000000 	nop
		case 0x4000000:
			_rfc_ns = DDR2_STD_RFC_64MB_NS;
bfc052b0:	24020069 	li	v0,105
bfc052b4:	afa2003c 	sw	v0,60(sp)
			break;
bfc052b8:	0bf014be 	j	bfc052f8 <memctlc_check_DTR_DDR2+0x144>
bfc052bc:	00000000 	nop
		case 0x8000000:
			_rfc_ns = DDR2_STD_RFC_128MB_NS;
bfc052c0:	24020080 	li	v0,128
bfc052c4:	afa2003c 	sw	v0,60(sp)
			break;
bfc052c8:	0bf014be 	j	bfc052f8 <memctlc_check_DTR_DDR2+0x144>
bfc052cc:	00000000 	nop
		case 0x10000000:
			_rfc_ns = DDR2_STD_RFC_256MB_NS;
bfc052d0:	240200c3 	li	v0,195
bfc052d4:	afa2003c 	sw	v0,60(sp)
			break;
bfc052d8:	0bf014be 	j	bfc052f8 <memctlc_check_DTR_DDR2+0x144>
bfc052dc:	00000000 	nop
		case 0x20000000:
			_rfc_ns = DDR2_STD_RFC_512MB_NS;
bfc052e0:	24020148 	li	v0,328
bfc052e4:	afa2003c 	sw	v0,60(sp)
			break;
bfc052e8:	0bf014be 	j	bfc052f8 <memctlc_check_DTR_DDR2+0x144>
bfc052ec:	00000000 	nop
		default:
			_rfc_ns = DDR2_STD_RFC_512MB_NS;
bfc052f0:	24020148 	li	v0,328
bfc052f4:	afa2003c 	sw	v0,60(sp)
			break;
	}

	
	std_rfc_ns = DDR2_STD_RFC_NS;
bfc052f8:	24020148 	li	v0,328
bfc052fc:	afa20050 	sw	v0,80(sp)
	_memctl_debug_printf("\tt_ras = %dns\n", std_ras_ns);
	_memctl_debug_printf("\tt_rfc = %dns, _rfc_ns(%d)\n", std_rfc_ns, _rfc_ns);

	_memctl_debug_printf("DDR2 Checking Current setting: \n");
	/* 1. CAS latency   */
	two_cas = _DTR_two_cas();
bfc05300:	0ff01087 	jal	bfc0421c <_DTR_two_cas>
bfc05304:	00000000 	nop
bfc05308:	afa20088 	sw	v0,136(sp)
	_memctl_debug_printf("\n\tcas(%d.%d): ", (two_cas/2), ((two_cas*10)/2)%10);
	if(two_cas > 16)
bfc0530c:	8fa20088 	lw	v0,136(sp)
bfc05310:	2c420011 	sltiu	v0,v0,17
bfc05314:	14400007 	bnez	v0,bfc05334 <memctlc_check_DTR_DDR2+0x180>
bfc05318:	00000000 	nop
		printf("#Warnning: No CAS > 7 for DDR2 SDRAM\n");
bfc0531c:	3c02bfc1 	lui	v0,0xbfc1
bfc05320:	2444b3e8 	addiu	a0,v0,-19480
bfc05324:	0ff003ac 	jal	bfc00eb0 <printf>
bfc05328:	00000000 	nop
bfc0532c:	0bf01516 	j	bfc05458 <memctlc_check_DTR_DDR2+0x2a4>
bfc05330:	00000000 	nop
	else if((two_cas == 4) && (DDR2_CAS2_MAX_MHZ < dram_freq_mhz))
bfc05334:	8fa30088 	lw	v1,136(sp)
bfc05338:	24020004 	li	v0,4
bfc0533c:	1462000c 	bne	v1,v0,bfc05370 <memctlc_check_DTR_DDR2+0x1bc>
bfc05340:	00000000 	nop
bfc05344:	8fa20038 	lw	v0,56(sp)
bfc05348:	2c420090 	sltiu	v0,v0,144
bfc0534c:	14400008 	bnez	v0,bfc05370 <memctlc_check_DTR_DDR2+0x1bc>
bfc05350:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
bfc05354:	3c02bfc1 	lui	v0,0xbfc1
bfc05358:	2444ae98 	addiu	a0,v0,-20840
bfc0535c:	8fa50038 	lw	a1,56(sp)
bfc05360:	0ff003ac 	jal	bfc00eb0 <printf>
bfc05364:	00000000 	nop
	/* 1. CAS latency   */
	two_cas = _DTR_two_cas();
	_memctl_debug_printf("\n\tcas(%d.%d): ", (two_cas/2), ((two_cas*10)/2)%10);
	if(two_cas > 16)
		printf("#Warnning: No CAS > 7 for DDR2 SDRAM\n");
	else if((two_cas == 4) && (DDR2_CAS2_MAX_MHZ < dram_freq_mhz))
bfc05368:	0bf01516 	j	bfc05458 <memctlc_check_DTR_DDR2+0x2a4>
bfc0536c:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 6) && (DDR2_CAS3_MAX_MHZ < dram_freq_mhz))
bfc05370:	8fa30088 	lw	v1,136(sp)
bfc05374:	24020006 	li	v0,6
bfc05378:	1462000c 	bne	v1,v0,bfc053ac <memctlc_check_DTR_DDR2+0x1f8>
bfc0537c:	00000000 	nop
bfc05380:	8fa20038 	lw	v0,56(sp)
bfc05384:	2c4200c9 	sltiu	v0,v0,201
bfc05388:	14400008 	bnez	v0,bfc053ac <memctlc_check_DTR_DDR2+0x1f8>
bfc0538c:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
bfc05390:	3c02bfc1 	lui	v0,0xbfc1
bfc05394:	2444ae98 	addiu	a0,v0,-20840
bfc05398:	8fa50038 	lw	a1,56(sp)
bfc0539c:	0ff003ac 	jal	bfc00eb0 <printf>
bfc053a0:	00000000 	nop
	_memctl_debug_printf("\n\tcas(%d.%d): ", (two_cas/2), ((two_cas*10)/2)%10);
	if(two_cas > 16)
		printf("#Warnning: No CAS > 7 for DDR2 SDRAM\n");
	else if((two_cas == 4) && (DDR2_CAS2_MAX_MHZ < dram_freq_mhz))
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 6) && (DDR2_CAS3_MAX_MHZ < dram_freq_mhz))
bfc053a4:	0bf01516 	j	bfc05458 <memctlc_check_DTR_DDR2+0x2a4>
bfc053a8:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 8) && (DDR2_CAS4_MAX_MHZ < dram_freq_mhz))
bfc053ac:	8fa30088 	lw	v1,136(sp)
bfc053b0:	24020008 	li	v0,8
bfc053b4:	1462000c 	bne	v1,v0,bfc053e8 <memctlc_check_DTR_DDR2+0x234>
bfc053b8:	00000000 	nop
bfc053bc:	8fa20038 	lw	v0,56(sp)
bfc053c0:	2c42010b 	sltiu	v0,v0,267
bfc053c4:	14400008 	bnez	v0,bfc053e8 <memctlc_check_DTR_DDR2+0x234>
bfc053c8:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
bfc053cc:	3c02bfc1 	lui	v0,0xbfc1
bfc053d0:	2444ae98 	addiu	a0,v0,-20840
bfc053d4:	8fa50038 	lw	a1,56(sp)
bfc053d8:	0ff003ac 	jal	bfc00eb0 <printf>
bfc053dc:	00000000 	nop
		printf("#Warnning: No CAS > 7 for DDR2 SDRAM\n");
	else if((two_cas == 4) && (DDR2_CAS2_MAX_MHZ < dram_freq_mhz))
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 6) && (DDR2_CAS3_MAX_MHZ < dram_freq_mhz))
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 8) && (DDR2_CAS4_MAX_MHZ < dram_freq_mhz))
bfc053e0:	0bf01516 	j	bfc05458 <memctlc_check_DTR_DDR2+0x2a4>
bfc053e4:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 10) && (DDR2_CAS5_MAX_MHZ < dram_freq_mhz))
bfc053e8:	8fa30088 	lw	v1,136(sp)
bfc053ec:	2402000a 	li	v0,10
bfc053f0:	1462000c 	bne	v1,v0,bfc05424 <memctlc_check_DTR_DDR2+0x270>
bfc053f4:	00000000 	nop
bfc053f8:	8fa20038 	lw	v0,56(sp)
bfc053fc:	2c420191 	sltiu	v0,v0,401
bfc05400:	14400008 	bnez	v0,bfc05424 <memctlc_check_DTR_DDR2+0x270>
bfc05404:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
bfc05408:	3c02bfc1 	lui	v0,0xbfc1
bfc0540c:	2444ae98 	addiu	a0,v0,-20840
bfc05410:	8fa50038 	lw	a1,56(sp)
bfc05414:	0ff003ac 	jal	bfc00eb0 <printf>
bfc05418:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 6) && (DDR2_CAS3_MAX_MHZ < dram_freq_mhz))
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 8) && (DDR2_CAS4_MAX_MHZ < dram_freq_mhz))
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 10) && (DDR2_CAS5_MAX_MHZ < dram_freq_mhz))
bfc0541c:	0bf01516 	j	bfc05458 <memctlc_check_DTR_DDR2+0x2a4>
bfc05420:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
	else if((two_cas == 12) && (DDR2_CAS6_MAX_MHZ < dram_freq_mhz))
bfc05424:	8fa30088 	lw	v1,136(sp)
bfc05428:	2402000c 	li	v0,12
bfc0542c:	1462000a 	bne	v1,v0,bfc05458 <memctlc_check_DTR_DDR2+0x2a4>
bfc05430:	00000000 	nop
bfc05434:	8fa20038 	lw	v0,56(sp)
bfc05438:	2c420216 	sltiu	v0,v0,534
bfc0543c:	14400006 	bnez	v0,bfc05458 <memctlc_check_DTR_DDR2+0x2a4>
bfc05440:	00000000 	nop
		printf("#Warnning: CAS might too small for current DRAM freq.(%dMHz)\n", dram_freq_mhz);
bfc05444:	3c02bfc1 	lui	v0,0xbfc1
bfc05448:	2444ae98 	addiu	a0,v0,-20840
bfc0544c:	8fa50038 	lw	a1,56(sp)
bfc05450:	0ff003ac 	jal	bfc00eb0 <printf>
bfc05454:	00000000 	nop
	else
		_memctl_debug_printf("ok\n");
	
	/* 2. T_WR  (15ns) */
	_memctl_debug_printf("\twr: ");
	max_freq_mhz = _DTR_wr_frq_mhz(std_wr_ns);
bfc05458:	8fa40068 	lw	a0,104(sp)
bfc0545c:	0ff00dfd 	jal	bfc037f4 <_DTR_wr_frq_mhz>
bfc05460:	00000000 	nop
bfc05464:	afa20080 	sw	v0,128(sp)
		_memctl_debug_printf("#Warnning: DTR0(wr) setting may vilolates the requirement (%dns). Max. %dMHz for current setting\n", std_wr_ns, max_freq_mhz);
	else
		_memctl_debug_printf("ok\n");

	/* 3. CAS Write latency */
	tcwl = _DTR_cwl();
bfc05468:	0ff0107a 	jal	bfc041e8 <_DTR_cwl>
bfc0546c:	00000000 	nop
bfc05470:	afa2007c 	sw	v0,124(sp)
	_memctl_debug_printf("\tcwl: %d", tcwl);
	if(tcwl != ((two_cas/2) - 1) )
bfc05474:	8fa20088 	lw	v0,136(sp)
bfc05478:	00021042 	srl	v0,v0,0x1
bfc0547c:	2443ffff 	addiu	v1,v0,-1
bfc05480:	8fa2007c 	lw	v0,124(sp)
bfc05484:	10620005 	beq	v1,v0,bfc0549c <memctlc_check_DTR_DDR2+0x2e8>
bfc05488:	00000000 	nop
		printf("#Warnning: DTR0(cwl) != cas-1 DRAM clock\n");
bfc0548c:	3c02bfc1 	lui	v0,0xbfc1
bfc05490:	2444b410 	addiu	a0,v0,-19440
bfc05494:	0ff003ac 	jal	bfc00eb0 <printf>
bfc05498:	00000000 	nop
	else
		_memctl_debug_printf("ok\n");

	/* 4. T_RTP  (20ns) */
	_memctl_debug_printf("\trtp: ");
	max_freq_mhz = _DTR_rtp_frq_mhz(std_rtp_ns);
bfc0549c:	8fa40074 	lw	a0,116(sp)
bfc054a0:	0ff00d46 	jal	bfc03518 <_DTR_rtp_frq_mhz>
bfc054a4:	00000000 	nop
bfc054a8:	afa20080 	sw	v0,128(sp)
	if(dram_freq_mhz > max_freq_mhz)
bfc054ac:	8fa30038 	lw	v1,56(sp)
bfc054b0:	8fa20080 	lw	v0,128(sp)
bfc054b4:	0043102b 	sltu	v0,v0,v1
bfc054b8:	10400007 	beqz	v0,bfc054d8 <memctlc_check_DTR_DDR2+0x324>
bfc054bc:	00000000 	nop
		printf("#Warnning: DTR1(rtp) setting may vilolates the requirement (%dns). Max. %dMHz for current setting\n", std_rtp_ns, max_freq_mhz);
bfc054c0:	3c02bfc1 	lui	v0,0xbfc1
bfc054c4:	2444af40 	addiu	a0,v0,-20672
bfc054c8:	8fa50074 	lw	a1,116(sp)
bfc054cc:	8fa60080 	lw	a2,128(sp)
bfc054d0:	0ff003ac 	jal	bfc00eb0 <printf>
bfc054d4:	00000000 	nop
	else
		_memctl_debug_printf("ok\n");

	/* 5. T_WTR  (20ns) */
	_memctl_debug_printf("\twtr: ");
	max_freq_mhz = _DTR_wtr_frq_mhz(std_wtr_ns);
bfc054d8:	8fa40060 	lw	a0,96(sp)
bfc054dc:	0ff00d2c 	jal	bfc034b0 <_DTR_wtr_frq_mhz>
bfc054e0:	00000000 	nop
bfc054e4:	afa20080 	sw	v0,128(sp)
	if(dram_freq_mhz > max_freq_mhz)
bfc054e8:	8fa30038 	lw	v1,56(sp)
bfc054ec:	8fa20080 	lw	v0,128(sp)
bfc054f0:	0043102b 	sltu	v0,v0,v1
bfc054f4:	10400007 	beqz	v0,bfc05514 <memctlc_check_DTR_DDR2+0x360>
bfc054f8:	00000000 	nop
		printf("#Warnning: DTR1(wtr) setting may vilolates the requirement (%dns). Max. %dMHz for current setting\n", std_wtr_ns, max_freq_mhz);
bfc054fc:	3c02bfc1 	lui	v0,0xbfc1
bfc05500:	2444b00c 	addiu	a0,v0,-20468
bfc05504:	8fa50060 	lw	a1,96(sp)
bfc05508:	8fa60080 	lw	a2,128(sp)
bfc0550c:	0ff003ac 	jal	bfc00eb0 <printf>
bfc05510:	00000000 	nop
	else
		_memctl_debug_printf("ok\n");

	/* 6. Refresh period (64ms) */
	_memctl_debug_printf("\trefresh cycles: ");
	min_freq_mhz  = _DTR_refresh_freq_mhz(std_refi_ns);
bfc05514:	8fa40064 	lw	a0,100(sp)
bfc05518:	0ff00ccb 	jal	bfc0332c <_DTR_refresh_freq_mhz>
bfc0551c:	00000000 	nop
bfc05520:	afa20084 	sw	v0,132(sp)
	if(0 != min_freq_mhz){
bfc05524:	8fa20084 	lw	v0,132(sp)
bfc05528:	1040000b 	beqz	v0,bfc05558 <memctlc_check_DTR_DDR2+0x3a4>
bfc0552c:	00000000 	nop
		_memctl_debug_printf("(DRAM freq. have to >= %dMHz) ", min_freq_mhz);
		if(dram_freq_mhz < min_freq_mhz)
bfc05530:	8fa30038 	lw	v1,56(sp)
bfc05534:	8fa20084 	lw	v0,132(sp)
bfc05538:	0062102b 	sltu	v0,v1,v0
bfc0553c:	10400006 	beqz	v0,bfc05558 <memctlc_check_DTR_DDR2+0x3a4>
bfc05540:	00000000 	nop
			printf("\n\t#Warnning: DTR setting may vilolate the requirement of DRAM refresh in %dns.\n", std_refi_ns);
bfc05544:	3c02bfc1 	lui	v0,0xbfc1
bfc05548:	2444b43c 	addiu	a0,v0,-19396
bfc0554c:	8fa50064 	lw	a1,100(sp)
bfc05550:	0ff003ac 	jal	bfc00eb0 <printf>
bfc05554:	00000000 	nop
		_memctl_debug_printf("DRAM freq. have to > 1000MHz\n");


	/* 7. T_RP  (20ns) */
	_memctl_debug_printf("\trp: ");
	max_freq_mhz = _DTR_rp_frq_mhz(std_rp_ns);
bfc05558:	8fa40058 	lw	a0,88(sp)
bfc0555c:	0ff00d61 	jal	bfc03584 <_DTR_rp_frq_mhz>
bfc05560:	00000000 	nop
bfc05564:	afa20080 	sw	v0,128(sp)
	if(dram_freq_mhz > max_freq_mhz)
bfc05568:	8fa30038 	lw	v1,56(sp)
bfc0556c:	8fa20080 	lw	v0,128(sp)
bfc05570:	0043102b 	sltu	v0,v0,v1
bfc05574:	10400007 	beqz	v0,bfc05594 <memctlc_check_DTR_DDR2+0x3e0>
bfc05578:	00000000 	nop
		printf("#Warnning: DTR1(rp) setting may vilolates the requirement (%dns). Max. %dMHz for current setting\n", std_rp_ns, max_freq_mhz);
bfc0557c:	3c02bfc1 	lui	v0,0xbfc1
bfc05580:	2444b128 	addiu	a0,v0,-20184
bfc05584:	8fa50058 	lw	a1,88(sp)
bfc05588:	8fa60080 	lw	a2,128(sp)
bfc0558c:	0ff003ac 	jal	bfc00eb0 <printf>
bfc05590:	00000000 	nop
	else
		_memctl_debug_printf("ok\n");
	/* 8. T_RCD (20ns) */
	_memctl_debug_printf("\trcd: ");
	max_freq_mhz = _DTR_rcd_frq_mhz(std_rcd_ns);
bfc05594:	8fa40054 	lw	a0,84(sp)
bfc05598:	0ff00dad 	jal	bfc036b4 <_DTR_rcd_frq_mhz>
bfc0559c:	00000000 	nop
bfc055a0:	afa20080 	sw	v0,128(sp)
	if(dram_freq_mhz > max_freq_mhz)
bfc055a4:	8fa30038 	lw	v1,56(sp)
bfc055a8:	8fa20080 	lw	v0,128(sp)
bfc055ac:	0043102b 	sltu	v0,v0,v1
bfc055b0:	10400007 	beqz	v0,bfc055d0 <memctlc_check_DTR_DDR2+0x41c>
bfc055b4:	00000000 	nop
		printf("#Warnning: DTR(rcd) setting may vilolates the requirement (%dns). Max. %dMHz for current setting\n", std_rcd_ns, max_freq_mhz);
bfc055b8:	3c02bfc1 	lui	v0,0xbfc1
bfc055bc:	2444b18c 	addiu	a0,v0,-20084
bfc055c0:	8fa50054 	lw	a1,84(sp)
bfc055c4:	8fa60080 	lw	a2,128(sp)
bfc055c8:	0ff003ac 	jal	bfc00eb0 <printf>
bfc055cc:	00000000 	nop
	else
		_memctl_debug_printf("ok\n");

	/* 9. T_RRD (20ns) */
	_memctl_debug_printf("\trrd: ");
	max_freq_mhz = _DTR_rrd_frq_mhz(std_rrd_ns);
bfc055d0:	8fa40070 	lw	a0,112(sp)
bfc055d4:	0ff00d7a 	jal	bfc035e8 <_DTR_rrd_frq_mhz>
bfc055d8:	00000000 	nop
bfc055dc:	afa20080 	sw	v0,128(sp)
	if(dram_freq_mhz > max_freq_mhz)
bfc055e0:	8fa30038 	lw	v1,56(sp)
bfc055e4:	8fa20080 	lw	v0,128(sp)
bfc055e8:	0043102b 	sltu	v0,v0,v1
bfc055ec:	10400007 	beqz	v0,bfc0560c <memctlc_check_DTR_DDR2+0x458>
bfc055f0:	00000000 	nop
		printf("#Warnning: DTR(rrd) setting may vilolates the requirement (%dns). Max. %dMHz for current setting\n", std_rrd_ns, max_freq_mhz);
bfc055f4:	3c02bfc1 	lui	v0,0xbfc1
bfc055f8:	2444b1f0 	addiu	a0,v0,-19984
bfc055fc:	8fa50070 	lw	a1,112(sp)
bfc05600:	8fa60080 	lw	a2,128(sp)
bfc05604:	0ff003ac 	jal	bfc00eb0 <printf>
bfc05608:	00000000 	nop
	else
		_memctl_debug_printf("ok\n");

	/* 10. T_FAWG (20ns) */
	_memctl_debug_printf("\tfawg: ");
	max_freq_mhz = _DTR_fawg_frq_mhz(std_fawg_ns);
bfc0560c:	8fa4005c 	lw	a0,92(sp)
bfc05610:	0ff00d94 	jal	bfc03650 <_DTR_fawg_frq_mhz>
bfc05614:	00000000 	nop
bfc05618:	afa20080 	sw	v0,128(sp)
	if(dram_freq_mhz > max_freq_mhz)
bfc0561c:	8fa30038 	lw	v1,56(sp)
bfc05620:	8fa20080 	lw	v0,128(sp)
bfc05624:	0043102b 	sltu	v0,v0,v1
bfc05628:	10400007 	beqz	v0,bfc05648 <memctlc_check_DTR_DDR2+0x494>
bfc0562c:	00000000 	nop
		printf("#Warnning: DTR(fawg) setting may vilolates the requirement (%dns). Max. %dMHz for current setting\n", std_fawg_ns, max_freq_mhz);
bfc05630:	3c02bfc1 	lui	v0,0xbfc1
bfc05634:	2444b2bc 	addiu	a0,v0,-19780
bfc05638:	8fa5005c 	lw	a1,92(sp)
bfc0563c:	8fa60080 	lw	a2,128(sp)
bfc05640:	0ff003ac 	jal	bfc00eb0 <printf>
bfc05644:	00000000 	nop
	else
		_memctl_debug_printf("ok\n");

	/* 11. T_RFC */
	_memctl_debug_printf("\trfc: ");
	max_freq_mhz = _DTR_rfc_frq_mhz(std_rfc_ns);
bfc05648:	8fa40050 	lw	a0,80(sp)
bfc0564c:	0ff00de4 	jal	bfc03790 <_DTR_rfc_frq_mhz>
bfc05650:	00000000 	nop
bfc05654:	afa20080 	sw	v0,128(sp)
	if(dram_freq_mhz > max_freq_mhz)
bfc05658:	8fa30038 	lw	v1,56(sp)
bfc0565c:	8fa20080 	lw	v0,128(sp)
bfc05660:	0043102b 	sltu	v0,v0,v1
bfc05664:	10400007 	beqz	v0,bfc05684 <memctlc_check_DTR_DDR2+0x4d0>
bfc05668:	00000000 	nop
		printf("#Warnning: DTR(rfc) setting may vilolates the requirement (%dns). Max. %dMHz for current setting\n", std_rfc_ns, max_freq_mhz);
bfc0566c:	3c02bfc1 	lui	v0,0xbfc1
bfc05670:	2444b320 	addiu	a0,v0,-19680
bfc05674:	8fa50050 	lw	a1,80(sp)
bfc05678:	8fa60080 	lw	a2,128(sp)
bfc0567c:	0ff003ac 	jal	bfc00eb0 <printf>
bfc05680:	00000000 	nop
	else
		_memctl_debug_printf("ok\n");

	/* 12. T_RAS (45ns) */
	_memctl_debug_printf("\tras: ");
	max_freq_mhz = _DTR_ras_frq_mhz(std_ras_ns);
bfc05684:	8fa4006c 	lw	a0,108(sp)
bfc05688:	0ff00dc8 	jal	bfc03720 <_DTR_ras_frq_mhz>
bfc0568c:	00000000 	nop
bfc05690:	afa20080 	sw	v0,128(sp)
	if(dram_freq_mhz > max_freq_mhz)
bfc05694:	8fa30038 	lw	v1,56(sp)
bfc05698:	8fa20080 	lw	v0,128(sp)
bfc0569c:	0043102b 	sltu	v0,v0,v1
bfc056a0:	10400007 	beqz	v0,bfc056c0 <memctlc_check_DTR_DDR2+0x50c>
bfc056a4:	00000000 	nop
		printf("#Warnning: DTR(ras) setting may vilolates the requirement (%dns). Max. %dMHz for current setting\n", std_ras_ns, max_freq_mhz);
bfc056a8:	3c02bfc1 	lui	v0,0xbfc1
bfc056ac:	2444b384 	addiu	a0,v0,-19580
bfc056b0:	8fa5006c 	lw	a1,108(sp)
bfc056b4:	8fa60080 	lw	a2,128(sp)
bfc056b8:	0ff003ac 	jal	bfc00eb0 <printf>
bfc056bc:	00000000 	nop
	else
		_memctl_debug_printf("ok\n");

	/* 13. Suggest DTR Setting for Current Memory freq. */
	if(dram_freq_mhz >= DDR2_CAS6_MAX_MHZ){
bfc056c0:	8fa20038 	lw	v0,56(sp)
bfc056c4:	2c420215 	sltiu	v0,v0,533
bfc056c8:	1440000b 	bnez	v0,bfc056f8 <memctlc_check_DTR_DDR2+0x544>
bfc056cc:	00000000 	nop
		cas_10_ns = (7 * 1000 * 10)/dram_freq_mhz;
bfc056d0:	3c020001 	lui	v0,0x1
bfc056d4:	34431170 	ori	v1,v0,0x1170
bfc056d8:	8fa20038 	lw	v0,56(sp)
bfc056dc:	0062001b 	divu	zero,v1,v0
bfc056e0:	004001f4 	teq	v0,zero,0x7
bfc056e4:	00001810 	mfhi	v1
bfc056e8:	00001012 	mflo	v0
bfc056ec:	afa20048 	sw	v0,72(sp)
bfc056f0:	0bf015f9 	j	bfc057e4 <memctlc_check_DTR_DDR2+0x630>
bfc056f4:	00000000 	nop
	}else if(dram_freq_mhz >= DDR2_CAS5_MAX_MHZ){
bfc056f8:	8fa20038 	lw	v0,56(sp)
bfc056fc:	2c420190 	sltiu	v0,v0,400
bfc05700:	1440000a 	bnez	v0,bfc0572c <memctlc_check_DTR_DDR2+0x578>
bfc05704:	00000000 	nop
		cas_10_ns = (6 * 1000 * 10)/dram_freq_mhz;
bfc05708:	3403ea60 	li	v1,0xea60
bfc0570c:	8fa20038 	lw	v0,56(sp)
bfc05710:	0062001b 	divu	zero,v1,v0
bfc05714:	004001f4 	teq	v0,zero,0x7
bfc05718:	00001810 	mfhi	v1
bfc0571c:	00001012 	mflo	v0
bfc05720:	afa20048 	sw	v0,72(sp)
bfc05724:	0bf015f9 	j	bfc057e4 <memctlc_check_DTR_DDR2+0x630>
bfc05728:	00000000 	nop
	}else if(dram_freq_mhz >= DDR2_CAS4_MAX_MHZ){
bfc0572c:	8fa20038 	lw	v0,56(sp)
bfc05730:	2c42010a 	sltiu	v0,v0,266
bfc05734:	1440000a 	bnez	v0,bfc05760 <memctlc_check_DTR_DDR2+0x5ac>
bfc05738:	00000000 	nop
		cas_10_ns = (5 * 1000 * 10)/dram_freq_mhz;
bfc0573c:	3403c350 	li	v1,0xc350
bfc05740:	8fa20038 	lw	v0,56(sp)
bfc05744:	0062001b 	divu	zero,v1,v0
bfc05748:	004001f4 	teq	v0,zero,0x7
bfc0574c:	00001810 	mfhi	v1
bfc05750:	00001012 	mflo	v0
bfc05754:	afa20048 	sw	v0,72(sp)
bfc05758:	0bf015f9 	j	bfc057e4 <memctlc_check_DTR_DDR2+0x630>
bfc0575c:	00000000 	nop
	}else if(dram_freq_mhz >= DDR2_CAS3_MAX_MHZ){
bfc05760:	8fa20038 	lw	v0,56(sp)
bfc05764:	2c4200c8 	sltiu	v0,v0,200
bfc05768:	1440000a 	bnez	v0,bfc05794 <memctlc_check_DTR_DDR2+0x5e0>
bfc0576c:	00000000 	nop
		cas_10_ns = (4 * 1000* 10)/dram_freq_mhz;
bfc05770:	34039c40 	li	v1,0x9c40
bfc05774:	8fa20038 	lw	v0,56(sp)
bfc05778:	0062001b 	divu	zero,v1,v0
bfc0577c:	004001f4 	teq	v0,zero,0x7
bfc05780:	00001810 	mfhi	v1
bfc05784:	00001012 	mflo	v0
bfc05788:	afa20048 	sw	v0,72(sp)
bfc0578c:	0bf015f9 	j	bfc057e4 <memctlc_check_DTR_DDR2+0x630>
bfc05790:	00000000 	nop
	}else if(dram_freq_mhz >= DDR2_CAS2_MAX_MHZ){
bfc05794:	8fa20038 	lw	v0,56(sp)
bfc05798:	2c42008f 	sltiu	v0,v0,143
bfc0579c:	1440000a 	bnez	v0,bfc057c8 <memctlc_check_DTR_DDR2+0x614>
bfc057a0:	00000000 	nop
		cas_10_ns = (3 * 1000 * 10)/dram_freq_mhz;
bfc057a4:	24037530 	li	v1,30000
bfc057a8:	8fa20038 	lw	v0,56(sp)
bfc057ac:	0062001b 	divu	zero,v1,v0
bfc057b0:	004001f4 	teq	v0,zero,0x7
bfc057b4:	00001810 	mfhi	v1
bfc057b8:	00001012 	mflo	v0
bfc057bc:	afa20048 	sw	v0,72(sp)
bfc057c0:	0bf015f9 	j	bfc057e4 <memctlc_check_DTR_DDR2+0x630>
bfc057c4:	00000000 	nop
	}else{
		cas_10_ns = (2 * 1000 * 10)/dram_freq_mhz;
bfc057c8:	24034e20 	li	v1,20000
bfc057cc:	8fa20038 	lw	v0,56(sp)
bfc057d0:	0062001b 	divu	zero,v1,v0
bfc057d4:	004001f4 	teq	v0,zero,0x7
bfc057d8:	00001810 	mfhi	v1
bfc057dc:	00001012 	mflo	v0
bfc057e0:	afa20048 	sw	v0,72(sp)
	}
	_DTR_suggestion(sug_dtr, DDR2_STD_REFI_NS, DDR2_STD_RP_NS, \
bfc057e4:	27a2008c 	addiu	v0,sp,140
bfc057e8:	2403002d 	li	v1,45
bfc057ec:	afa30010 	sw	v1,16(sp)
bfc057f0:	8fa30050 	lw	v1,80(sp)
bfc057f4:	afa30014 	sw	v1,20(sp)
bfc057f8:	2403000f 	li	v1,15
bfc057fc:	afa30018 	sw	v1,24(sp)
bfc05800:	2403000a 	li	v1,10
bfc05804:	afa3001c 	sw	v1,28(sp)
bfc05808:	24030032 	li	v1,50
bfc0580c:	afa30020 	sw	v1,32(sp)
bfc05810:	24030008 	li	v1,8
bfc05814:	afa30024 	sw	v1,36(sp)
bfc05818:	24030008 	li	v1,8
bfc0581c:	afa30028 	sw	v1,40(sp)
bfc05820:	8fa30048 	lw	v1,72(sp)
bfc05824:	afa3002c 	sw	v1,44(sp)
bfc05828:	8fa30038 	lw	v1,56(sp)
bfc0582c:	afa30030 	sw	v1,48(sp)
bfc05830:	00402021 	move	a0,v0
bfc05834:	24051e78 	li	a1,7800
bfc05838:	2406000f 	li	a2,15
bfc0583c:	2407000f 	li	a3,15
bfc05840:	0ff00864 	jal	bfc02190 <_DTR_suggestion>
bfc05844:	00000000 	nop
			DDR2_STD_RCD_NS, DDR2_STD_RAS_NS, std_rfc_ns, DDR2_STD_WR_NS,\
			DDR2_STD_RRD_NS, DDR2_STD_FAWG_NS, DDR2_STD_WTR_NS, DDR2_STD_RTP_NS,\
			cas_10_ns, dram_freq_mhz);

	/* Check for Minimum CAS support */
	cas = ((sug_dtr[0] & DTR0_CAS_MASK) >> DTR0_CAS_FD_S);
bfc05848:	8fa2008c 	lw	v0,140(sp)
bfc0584c:	00021702 	srl	v0,v0,0x1c
bfc05850:	afa20044 	sw	v0,68(sp)
	if(cas < 2){
bfc05854:	8fa20044 	lw	v0,68(sp)
bfc05858:	2c420002 	sltiu	v0,v0,2
bfc0585c:	1040000b 	beqz	v0,bfc0588c <memctlc_check_DTR_DDR2+0x6d8>
bfc05860:	00000000 	nop
		cas = 2;
bfc05864:	24020002 	li	v0,2
bfc05868:	afa20044 	sw	v0,68(sp)
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_CAS_MASK)) | (cas << DTR0_CAS_FD_S);
bfc0586c:	8fa3008c 	lw	v1,140(sp)
bfc05870:	3c020fff 	lui	v0,0xfff
bfc05874:	3442ffff 	ori	v0,v0,0xffff
bfc05878:	00621824 	and	v1,v1,v0
bfc0587c:	8fa20044 	lw	v0,68(sp)
bfc05880:	00021700 	sll	v0,v0,0x1c
bfc05884:	00621025 	or	v0,v1,v0
bfc05888:	afa2008c 	sw	v0,140(sp)
	}
	/* DDR2 write cas == read cas - 1*/
	tcwl = cas - 1;
bfc0588c:	8fa20044 	lw	v0,68(sp)
bfc05890:	2442ffff 	addiu	v0,v0,-1
bfc05894:	afa2007c 	sw	v0,124(sp)
	if(tcwl < 7){
bfc05898:	8fa2007c 	lw	v0,124(sp)
bfc0589c:	2c420007 	sltiu	v0,v0,7
bfc058a0:	10400009 	beqz	v0,bfc058c8 <memctlc_check_DTR_DDR2+0x714>
bfc058a4:	00000000 	nop
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_CWL_MASK)) | (tcwl << DTR0_CWL_FD_S);
bfc058a8:	8fa3008c 	lw	v1,140(sp)
bfc058ac:	3c02ff0f 	lui	v0,0xff0f
bfc058b0:	3442ffff 	ori	v0,v0,0xffff
bfc058b4:	00621824 	and	v1,v1,v0
bfc058b8:	8fa2007c 	lw	v0,124(sp)
bfc058bc:	00021500 	sll	v0,v0,0x14
bfc058c0:	00621025 	or	v0,v1,v0
bfc058c4:	afa2008c 	sw	v0,140(sp)
	}else{
		_memctl_debug_printf("\tWarnning: wrong tCWL computation\n");
	}

	/* DDR2 Write recovery maximum == 6 */
	wr = ((sug_dtr[0] & DTR0_WR_MASK) >> DTR0_WR_FD_S);
bfc058c8:	8fa3008c 	lw	v1,140(sp)
bfc058cc:	3c020f00 	lui	v0,0xf00
bfc058d0:	00621024 	and	v0,v1,v0
bfc058d4:	00021602 	srl	v0,v0,0x18
bfc058d8:	afa20078 	sw	v0,120(sp)
	if(wr > 7){
bfc058dc:	8fa20078 	lw	v0,120(sp)
bfc058e0:	2c420008 	sltiu	v0,v0,8
bfc058e4:	14400008 	bnez	v0,bfc05908 <memctlc_check_DTR_DDR2+0x754>
bfc058e8:	00000000 	nop
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_WR_MASK)) | (5 << DTR0_WR_FD_S);
bfc058ec:	8fa3008c 	lw	v1,140(sp)
bfc058f0:	3c02f0ff 	lui	v0,0xf0ff
bfc058f4:	3442ffff 	ori	v0,v0,0xffff
bfc058f8:	00621824 	and	v1,v1,v0
bfc058fc:	3c020500 	lui	v0,0x500
bfc05900:	00621025 	or	v0,v1,v0
bfc05904:	afa2008c 	sw	v0,140(sp)
	}

	/* DDR2 Write to read delay cycle at least 2 clock cycles */
	wtr = ((sug_dtr[0] & DTR0_WTR_MASK) >> DTR0_WTR_FD_S);
bfc05908:	8fa2008c 	lw	v0,140(sp)
bfc0590c:	3042f000 	andi	v0,v0,0xf000
bfc05910:	00021302 	srl	v0,v0,0xc
bfc05914:	afa20040 	sw	v0,64(sp)
	if(wtr < 1){
bfc05918:	8fa20040 	lw	v0,64(sp)
bfc0591c:	1440000b 	bnez	v0,bfc0594c <memctlc_check_DTR_DDR2+0x798>
bfc05920:	00000000 	nop
		wtr = 1;
bfc05924:	24020001 	li	v0,1
bfc05928:	afa20040 	sw	v0,64(sp)
		sug_dtr[0] = (sug_dtr[0] & (~DTR0_WTR_MASK)) | (wtr << DTR0_WTR_FD_S);
bfc0592c:	8fa3008c 	lw	v1,140(sp)
bfc05930:	3c02ffff 	lui	v0,0xffff
bfc05934:	34420fff 	ori	v0,v0,0xfff
bfc05938:	00621824 	and	v1,v1,v0
bfc0593c:	8fa20040 	lw	v0,64(sp)
bfc05940:	00021300 	sll	v0,v0,0xc
bfc05944:	00621025 	or	v0,v1,v0
bfc05948:	afa2008c 	sw	v0,140(sp)
	}

	_DTR_DDR2_MRS_setting(sug_dtr, sug_mr);
bfc0594c:	27a3008c 	addiu	v1,sp,140
bfc05950:	27a20098 	addiu	v0,sp,152
bfc05954:	00602021 	move	a0,v1
bfc05958:	00402821 	move	a1,v0
bfc0595c:	0ff00f5f 	jal	bfc03d7c <_DTR_DDR2_MRS_setting>
bfc05960:	00000000 	nop
	//REG32(DMCR) = sug_mr[2];
#endif

	

}
bfc05964:	8fbf00ac 	lw	ra,172(sp)
bfc05968:	8fb000a8 	lw	s0,168(sp)
bfc0596c:	27bd00b0 	addiu	sp,sp,176
bfc05970:	03e00008 	jr	ra
bfc05974:	00000000 	nop

bfc05978 <memctlc_check_DTR>:
 *	None
 * Note:
 *	- It shows some messages for the result of the checking.
 */
void memctlc_check_DTR()
{
bfc05978:	27bdffe8 	addiu	sp,sp,-24
bfc0597c:	afbf0014 	sw	ra,20(sp)

	
	if(memctlc_is_DDR2()){		
bfc05980:	0ff00cbd 	jal	bfc032f4 <memctlc_is_DDR2>
bfc05984:	00000000 	nop
bfc05988:	10400009 	beqz	v0,bfc059b0 <memctlc_check_DTR+0x38>
bfc0598c:	00000000 	nop
		printf("\nDRAM Type: DDR2\n");
bfc05990:	3c02bfc1 	lui	v0,0xbfc1
bfc05994:	2444b48c 	addiu	a0,v0,-19316
bfc05998:	0ff003ac 	jal	bfc00eb0 <printf>
bfc0599c:	00000000 	nop
		memctlc_check_DTR_DDR2();		
bfc059a0:	0ff0146d 	jal	bfc051b4 <memctlc_check_DTR_DDR2>
bfc059a4:	00000000 	nop
bfc059a8:	0bf01676 	j	bfc059d8 <memctlc_check_DTR+0x60>
bfc059ac:	00000000 	nop
	}else if(memctlc_is_DDR3()){
bfc059b0:	0ff00caf 	jal	bfc032bc <memctlc_is_DDR3>
bfc059b4:	00000000 	nop
bfc059b8:	10400007 	beqz	v0,bfc059d8 <memctlc_check_DTR+0x60>
bfc059bc:	00000000 	nop
		printf("\nDRAM Type: DDR3\n");
bfc059c0:	3c02bfc1 	lui	v0,0xbfc1
bfc059c4:	2444b4a0 	addiu	a0,v0,-19296
bfc059c8:	0ff003ac 	jal	bfc00eb0 <printf>
bfc059cc:	00000000 	nop
		memctlc_check_DTR_DDR3();
bfc059d0:	0ff011be 	jal	bfc046f8 <memctlc_check_DTR_DDR3>
bfc059d4:	00000000 	nop
	}
	
	

	
}
bfc059d8:	8fbf0014 	lw	ra,20(sp)
bfc059dc:	27bd0018 	addiu	sp,sp,24
bfc059e0:	03e00008 	jr	ra
bfc059e4:	00000000 	nop

bfc059e8 <chk_dram_cfg>:

/*
 * Check DRAM Configuration setting. 
 */
int chk_dram_cfg(unsigned int  dram_freq_mhz)
{
bfc059e8:	27bdffe0 	addiu	sp,sp,-32
bfc059ec:	afbf001c 	sw	ra,28(sp)
bfc059f0:	afa40020 	sw	a0,32(sp)
	int     	rcode = 0;	
bfc059f4:	afa00010 	sw	zero,16(sp)

	//show_DRAM_phy_parameters();
	/* Get current DRAM freq. */
	
	if(dram_freq_mhz==0){
bfc059f8:	8fa20020 	lw	v0,32(sp)
bfc059fc:	14400004 	bnez	v0,bfc05a10 <chk_dram_cfg+0x28>
bfc05a00:	00000000 	nop
		dram_freq_mhz = board_DRAM_freq_mhz(); 
bfc05a04:	0ff0260d 	jal	bfc09834 <board_DRAM_freq_mhz>
bfc05a08:	00000000 	nop
bfc05a0c:	afa20020 	sw	v0,32(sp)
	

	/* 
	 * Config DTR
	 */
	 memctlc_config_DTR();
bfc05a10:	0ff00c4c 	jal	bfc03130 <memctlc_config_DTR>
bfc05a14:	00000000 	nop


	/* 
	 * Config and set DTR
	 */
	memctlc_check_DTR();
bfc05a18:	0ff0165e 	jal	bfc05978 <memctlc_check_DTR>
bfc05a1c:	00000000 	nop
		memctlc_check_90phase_range();
	}
	*/

		
	return rcode;
bfc05a20:	8fa20010 	lw	v0,16(sp)
}
bfc05a24:	8fbf001c 	lw	ra,28(sp)
bfc05a28:	27bd0020 	addiu	sp,sp,32
bfc05a2c:	03e00008 	jr	ra
bfc05a30:	00000000 	nop

bfc05a34 <_update_phy_param>:
				~0x10000000, ~0x20000000, ~0x40000000, ~0x80000000\
			     };
#endif

void _update_phy_param(void)
{
bfc05a34:	27bdffe8 	addiu	sp,sp,-24
	volatile unsigned int *dcr;
	volatile unsigned int *dacr;
	volatile unsigned int dacr_tmp1;
	volatile unsigned int dacr_tmp2;

	dmcr = (unsigned int *)DMCR;
bfc05a38:	3c02b800 	lui	v0,0xb800
bfc05a3c:	3442101c 	ori	v0,v0,0x101c
bfc05a40:	afa20008 	sw	v0,8(sp)
	dcr = (unsigned int *)DCR;
bfc05a44:	3c02b800 	lui	v0,0xb800
bfc05a48:	34421004 	ori	v0,v0,0x1004
bfc05a4c:	afa20004 	sw	v0,4(sp)
	dacr = (unsigned int *)DACCR;
bfc05a50:	3c02b800 	lui	v0,0xb800
bfc05a54:	34421500 	ori	v0,v0,0x1500
bfc05a58:	afa20000 	sw	v0,0(sp)
	
	/* Write DMCR register to sync the parameters to phy control. */
	//*dmcr = 0x31;
	*dmcr = 0;
bfc05a5c:	8fa20008 	lw	v0,8(sp)
bfc05a60:	ac400000 	sw	zero,0(v0)
	__asm__ __volatile__("": : :"memory");

	/* reset phy buffer pointer */
	dacr_tmp1 = *dacr;
bfc05a64:	8fa20000 	lw	v0,0(sp)
bfc05a68:	8c420000 	lw	v0,0(v0)
bfc05a6c:	afa2000c 	sw	v0,12(sp)
	dacr_tmp1 = dacr_tmp1 & (0xFFFFFFEF);
bfc05a70:	8fa3000c 	lw	v1,12(sp)
bfc05a74:	2402ffef 	li	v0,-17
bfc05a78:	00621024 	and	v0,v1,v0
bfc05a7c:	afa2000c 	sw	v0,12(sp)
	dacr_tmp2 = dacr_tmp1 | (0x10);
bfc05a80:	8fa2000c 	lw	v0,12(sp)
bfc05a84:	34420010 	ori	v0,v0,0x10
bfc05a88:	afa20010 	sw	v0,16(sp)
	*dacr = dacr_tmp1 ;
bfc05a8c:	8fa3000c 	lw	v1,12(sp)
bfc05a90:	8fa20000 	lw	v0,0(sp)
bfc05a94:	ac430000 	sw	v1,0(v0)
	__asm__ __volatile__("": : :"memory");
	*dacr = dacr_tmp2 ;
bfc05a98:	8fa30010 	lw	v1,16(sp)
bfc05a9c:	8fa20000 	lw	v0,0(sp)
bfc05aa0:	ac430000 	sw	v1,0(v0)

	/* Waiting for the completion of the update procedure. */
	while((*dmcr & ((unsigned int)DMCR_MRS_BUSY)) != 0);
bfc05aa4:	8fa20008 	lw	v0,8(sp)
bfc05aa8:	8c420000 	lw	v0,0(v0)
bfc05aac:	0440fffd 	bltz	v0,bfc05aa4 <_update_phy_param+0x70>
bfc05ab0:	00000000 	nop
	while((*dcr & ((unsigned int)0x1)) != 0);
bfc05ab4:	8fa20004 	lw	v0,4(sp)
bfc05ab8:	8c420000 	lw	v0,0(v0)
bfc05abc:	30420001 	andi	v0,v0,0x1
bfc05ac0:	304200ff 	andi	v0,v0,0xff
bfc05ac4:	1440fffb 	bnez	v0,bfc05ab4 <_update_phy_param+0x80>
bfc05ac8:	00000000 	nop
	while((*((volatile unsigned int *)(0xB8001038)) & ((unsigned int)0x40000000)) == 0);//Check no DRAM command is not going
bfc05acc:	3c02b800 	lui	v0,0xb800
bfc05ad0:	34421038 	ori	v0,v0,0x1038
bfc05ad4:	8c430000 	lw	v1,0(v0)
bfc05ad8:	3c024000 	lui	v0,0x4000
bfc05adc:	00621024 	and	v0,v1,v0
bfc05ae0:	1040fffa 	beqz	v0,bfc05acc <_update_phy_param+0x98>
bfc05ae4:	00000000 	nop

	return;
}
bfc05ae8:	03e00008 	jr	ra
bfc05aec:	27bd0018 	addiu	sp,sp,24

bfc05af0 <memctlc_hw_auto_calibration>:
#define MEMCTL_DACSPCR_AC_SILEN_PERIOD_EN (1<<31)
#define MEMCTL_DACSPCR_AC_SILEN_TRIG (1<<20)
#define MEMCTL_DACDQ_DQ_AC_EN	     (1<<31)

int memctlc_hw_auto_calibration( unsigned int buswidth, unsigned int test_addr)
{
bfc05af0:	27bdfdc0 	addiu	sp,sp,-576
bfc05af4:	afbf023c 	sw	ra,572(sp)
bfc05af8:	afa40240 	sw	a0,576(sp)
bfc05afc:	afa50244 	sw	a1,580(sp)
	unsigned int delay_tap_cur;

	/* 
	 * 0. Backup delay tap setting 
	 */
	ret_value = MEMCTL_CALI_PASS;
bfc05b00:	afa00018 	sw	zero,24(sp)
	daccr   = (unsigned int *)DACCR;    /* DDR Auto-Calibration Configuration Register */
bfc05b04:	3c02b800 	lui	v0,0xb800
bfc05b08:	34421500 	ori	v0,v0,0x1500
bfc05b0c:	afa20024 	sw	v0,36(sp)
	dacqdq  = (unsigned int *)DACDQ0RR; /* DDR Auto-Calibration for DQS0 Rising edge on DQ0 Register */
bfc05b10:	3c02b800 	lui	v0,0xb800
bfc05b14:	34421510 	ori	v0,v0,0x1510
bfc05b18:	afa20030 	sw	v0,48(sp)
	dacspcr = (unsigned int *)DACSPCR;  /* Silence Pattern Control Register */
bfc05b1c:	3c02b800 	lui	v0,0xb800
bfc05b20:	34421504 	ori	v0,v0,0x1504
bfc05b24:	afa2002c 	sw	v0,44(sp)
	dacspar = (unsigned int *)DACSPAR;  /* Silence Pattern Address Register */
bfc05b28:	3c02b800 	lui	v0,0xb800
bfc05b2c:	34421508 	ori	v0,v0,0x1508
bfc05b30:	afa20028 	sw	v0,40(sp)


	for(i = 0; i < 32 ; i++){
bfc05b34:	afa0001c 	sw	zero,28(sp)
bfc05b38:	0bf016f3 	j	bfc05bcc <memctlc_hw_auto_calibration+0xdc>
bfc05b3c:	00000000 	nop
		delay_tap_reg_bk[i] = *(dacqdq+i);
bfc05b40:	8fa2001c 	lw	v0,28(sp)
bfc05b44:	8fa3001c 	lw	v1,28(sp)
bfc05b48:	00031880 	sll	v1,v1,0x2
bfc05b4c:	8fa40030 	lw	a0,48(sp)
bfc05b50:	00831821 	addu	v1,a0,v1
bfc05b54:	8c630000 	lw	v1,0(v1)
bfc05b58:	00021080 	sll	v0,v0,0x2
bfc05b5c:	27a40010 	addiu	a0,sp,16
bfc05b60:	00821021 	addu	v0,a0,v0
bfc05b64:	ac430028 	sw	v1,40(v0)
		target_delay_tap[i] = delay_tap_reg_bk[i];
bfc05b68:	8fa4001c 	lw	a0,28(sp)
bfc05b6c:	8fa2001c 	lw	v0,28(sp)
bfc05b70:	00021080 	sll	v0,v0,0x2
bfc05b74:	27a30010 	addiu	v1,sp,16
bfc05b78:	00621021 	addu	v0,v1,v0
bfc05b7c:	8c430028 	lw	v1,40(v0)
bfc05b80:	00041080 	sll	v0,a0,0x2
bfc05b84:	27a40010 	addiu	a0,sp,16
bfc05b88:	00821021 	addu	v0,a0,v0
bfc05b8c:	ac4301a8 	sw	v1,424(v0)
		delay_tap_max[i] = MEMCTL_AUTO_CALI_NOT_FOUND;
bfc05b90:	8fa2001c 	lw	v0,28(sp)
bfc05b94:	00021080 	sll	v0,v0,0x2
bfc05b98:	27a30010 	addiu	v1,sp,16
bfc05b9c:	00621021 	addu	v0,v1,v0
bfc05ba0:	24030020 	li	v1,32
bfc05ba4:	ac4300a8 	sw	v1,168(v0)
		delay_tap_min[i] = MEMCTL_AUTO_CALI_NOT_FOUND;
bfc05ba8:	8fa2001c 	lw	v0,28(sp)
bfc05bac:	00021080 	sll	v0,v0,0x2
bfc05bb0:	27a30010 	addiu	v1,sp,16
bfc05bb4:	00621021 	addu	v0,v1,v0
bfc05bb8:	24030020 	li	v1,32
bfc05bbc:	ac430128 	sw	v1,296(v0)
	dacqdq  = (unsigned int *)DACDQ0RR; /* DDR Auto-Calibration for DQS0 Rising edge on DQ0 Register */
	dacspcr = (unsigned int *)DACSPCR;  /* Silence Pattern Control Register */
	dacspar = (unsigned int *)DACSPAR;  /* Silence Pattern Address Register */


	for(i = 0; i < 32 ; i++){
bfc05bc0:	8fa2001c 	lw	v0,28(sp)
bfc05bc4:	24420001 	addiu	v0,v0,1
bfc05bc8:	afa2001c 	sw	v0,28(sp)
bfc05bcc:	8fa2001c 	lw	v0,28(sp)
bfc05bd0:	2c420020 	sltiu	v0,v0,32
bfc05bd4:	1440ffda 	bnez	v0,bfc05b40 <memctlc_hw_auto_calibration+0x50>
bfc05bd8:	00000000 	nop
		delay_tap_reg_bk[i] = *(dacqdq+i);
		target_delay_tap[i] = delay_tap_reg_bk[i];
		delay_tap_max[i] = MEMCTL_AUTO_CALI_NOT_FOUND;
		delay_tap_min[i] = MEMCTL_AUTO_CALI_NOT_FOUND;
	}
	delay_tap_cur = 0;
bfc05bdc:	afa00010 	sw	zero,16(sp)

#if 1
	_memctl_debug_printf("\nmemory controller silence pattern calibration :\n");
	for(i = 0; i < 32 ; i++){
bfc05be0:	afa0001c 	sw	zero,28(sp)
bfc05be4:	0bf016fe 	j	bfc05bf8 <memctlc_hw_auto_calibration+0x108>
bfc05be8:	00000000 	nop
bfc05bec:	8fa2001c 	lw	v0,28(sp)
bfc05bf0:	24420001 	addiu	v0,v0,1
bfc05bf4:	afa2001c 	sw	v0,28(sp)
bfc05bf8:	8fa2001c 	lw	v0,28(sp)
bfc05bfc:	2c420020 	sltiu	v0,v0,32
bfc05c00:	1440fffa 	bnez	v0,bfc05bec <memctlc_hw_auto_calibration+0xfc>
bfc05c04:	00000000 	nop
		//_memctl_debug_printf("delay_tap_max[%d] = %d, delay_tap_min[%d] = %d\n", i, (delay_tap_reg_bk[i] & 0x00FF0000) >> 16, i, (delay_tap_reg_bk[i] & 0x000000FF));
	}
#endif
	/* set to the minimun usable value. */
	for(i = 0; i < 32 ; i++){
bfc05c08:	afa0001c 	sw	zero,28(sp)
bfc05c0c:	0bf0171d 	j	bfc05c74 <memctlc_hw_auto_calibration+0x184>
bfc05c10:	00000000 	nop
		target_delay_tap[i] = (target_delay_tap[i] & 0xFFFF00FF) | ((target_delay_tap[i] & 0x000000FF) << 8);
bfc05c14:	8fa4001c 	lw	a0,28(sp)
bfc05c18:	8fa2001c 	lw	v0,28(sp)
bfc05c1c:	00021080 	sll	v0,v0,0x2
bfc05c20:	27a30010 	addiu	v1,sp,16
bfc05c24:	00621021 	addu	v0,v1,v0
bfc05c28:	8c4301a8 	lw	v1,424(v0)
bfc05c2c:	3c02ffff 	lui	v0,0xffff
bfc05c30:	344200ff 	ori	v0,v0,0xff
bfc05c34:	00621824 	and	v1,v1,v0
bfc05c38:	8fa2001c 	lw	v0,28(sp)
bfc05c3c:	00021080 	sll	v0,v0,0x2
bfc05c40:	27a50010 	addiu	a1,sp,16
bfc05c44:	00a21021 	addu	v0,a1,v0
bfc05c48:	8c4201a8 	lw	v0,424(v0)
bfc05c4c:	00021200 	sll	v0,v0,0x8
bfc05c50:	3042ffff 	andi	v0,v0,0xffff
bfc05c54:	00621825 	or	v1,v1,v0
bfc05c58:	00041080 	sll	v0,a0,0x2
bfc05c5c:	27a40010 	addiu	a0,sp,16
bfc05c60:	00821021 	addu	v0,a0,v0
bfc05c64:	ac4301a8 	sw	v1,424(v0)
	for(i = 0; i < 32 ; i++){
		//_memctl_debug_printf("delay_tap_max[%d] = %d, delay_tap_min[%d] = %d\n", i, (delay_tap_reg_bk[i] & 0x00FF0000) >> 16, i, (delay_tap_reg_bk[i] & 0x000000FF));
	}
#endif
	/* set to the minimun usable value. */
	for(i = 0; i < 32 ; i++){
bfc05c68:	8fa2001c 	lw	v0,28(sp)
bfc05c6c:	24420001 	addiu	v0,v0,1
bfc05c70:	afa2001c 	sw	v0,28(sp)
bfc05c74:	8fa2001c 	lw	v0,28(sp)
bfc05c78:	2c420020 	sltiu	v0,v0,32
bfc05c7c:	1440ffe5 	bnez	v0,bfc05c14 <memctlc_hw_auto_calibration+0x124>
bfc05c80:	00000000 	nop
	}

	/* 
	 * 1. Configure the silence pattern and control register 
	 */
	sil_pat_addr = (unsigned int *)test_addr;
bfc05c84:	8fa20244 	lw	v0,580(sp)
bfc05c88:	afa20020 	sw	v0,32(sp)
	for(i=0; i < sizeof(cali_pattern)/sizeof(unsigned int);i++){
bfc05c8c:	afa0001c 	sw	zero,28(sp)
bfc05c90:	0bf01734 	j	bfc05cd0 <memctlc_hw_auto_calibration+0x1e0>
bfc05c94:	00000000 	nop
		*(sil_pat_addr+i) = cali_pattern[i];
bfc05c98:	8fa2001c 	lw	v0,28(sp)
bfc05c9c:	00021080 	sll	v0,v0,0x2
bfc05ca0:	8fa30020 	lw	v1,32(sp)
bfc05ca4:	00621021 	addu	v0,v1,v0
bfc05ca8:	8fa4001c 	lw	a0,28(sp)
bfc05cac:	3c03bfc1 	lui	v1,0xbfc1
bfc05cb0:	00042080 	sll	a0,a0,0x2
bfc05cb4:	2463b770 	addiu	v1,v1,-18576
bfc05cb8:	00831821 	addu	v1,a0,v1
bfc05cbc:	8c630000 	lw	v1,0(v1)
bfc05cc0:	ac430000 	sw	v1,0(v0)

	/* 
	 * 1. Configure the silence pattern and control register 
	 */
	sil_pat_addr = (unsigned int *)test_addr;
	for(i=0; i < sizeof(cali_pattern)/sizeof(unsigned int);i++){
bfc05cc4:	8fa2001c 	lw	v0,28(sp)
bfc05cc8:	24420001 	addiu	v0,v0,1
bfc05ccc:	afa2001c 	sw	v0,28(sp)
bfc05cd0:	8fa2001c 	lw	v0,28(sp)
bfc05cd4:	2c420018 	sltiu	v0,v0,24
bfc05cd8:	1440ffef 	bnez	v0,bfc05c98 <memctlc_hw_auto_calibration+0x1a8>
bfc05cdc:	00000000 	nop
		*(sil_pat_addr+i) = cali_pattern[i];
	}
	*dacspcr = ((sizeof(cali_pattern)/sizeof(unsigned int)) - 1) & (0xFF);
bfc05ce0:	8fa2002c 	lw	v0,44(sp)
bfc05ce4:	24030017 	li	v1,23
bfc05ce8:	ac430000 	sw	v1,0(v0)
	*dacspar = test_addr;
bfc05cec:	8fa20028 	lw	v0,40(sp)
bfc05cf0:	8fa30244 	lw	v1,580(sp)
bfc05cf4:	ac430000 	sw	v1,0(v0)
	/* 
	 * 2. Searching max delay tap window. 
	 */

	/* 2.1 Minimum tap value for the Maximum delay tap. */
	for(delay_tap_cur=0; delay_tap_cur < 32; delay_tap_cur++){
bfc05cf8:	afa00010 	sw	zero,16(sp)
bfc05cfc:	0bf017cf 	j	bfc05f3c <memctlc_hw_auto_calibration+0x44c>
bfc05d00:	00000000 	nop
		/* Initialize the maximum delay tap*/
		for(i = 0; i < 32 ; i++){
bfc05d04:	afa0001c 	sw	zero,28(sp)
bfc05d08:	0bf0175f 	j	bfc05d7c <memctlc_hw_auto_calibration+0x28c>
bfc05d0c:	00000000 	nop
			if(delay_tap_min[i] == MEMCTL_AUTO_CALI_NOT_FOUND)
bfc05d10:	8fa2001c 	lw	v0,28(sp)
bfc05d14:	00021080 	sll	v0,v0,0x2
bfc05d18:	27a30010 	addiu	v1,sp,16
bfc05d1c:	00621021 	addu	v0,v1,v0
bfc05d20:	8c430128 	lw	v1,296(v0)
bfc05d24:	24020020 	li	v0,32
bfc05d28:	14620011 	bne	v1,v0,bfc05d70 <memctlc_hw_auto_calibration+0x280>
bfc05d2c:	00000000 	nop
				*(dacqdq+i) = *(dacqdq+i) & 0xFF00FFFF | (delay_tap_cur << 16);
bfc05d30:	8fa2001c 	lw	v0,28(sp)
bfc05d34:	00021080 	sll	v0,v0,0x2
bfc05d38:	8fa30030 	lw	v1,48(sp)
bfc05d3c:	00621021 	addu	v0,v1,v0
bfc05d40:	8fa3001c 	lw	v1,28(sp)
bfc05d44:	00031880 	sll	v1,v1,0x2
bfc05d48:	8fa40030 	lw	a0,48(sp)
bfc05d4c:	00831821 	addu	v1,a0,v1
bfc05d50:	8c640000 	lw	a0,0(v1)
bfc05d54:	3c03ff00 	lui	v1,0xff00
bfc05d58:	3463ffff 	ori	v1,v1,0xffff
bfc05d5c:	00832024 	and	a0,a0,v1
bfc05d60:	8fa30010 	lw	v1,16(sp)
bfc05d64:	00031c00 	sll	v1,v1,0x10
bfc05d68:	00831825 	or	v1,a0,v1
bfc05d6c:	ac430000 	sw	v1,0(v0)
	 */

	/* 2.1 Minimum tap value for the Maximum delay tap. */
	for(delay_tap_cur=0; delay_tap_cur < 32; delay_tap_cur++){
		/* Initialize the maximum delay tap*/
		for(i = 0; i < 32 ; i++){
bfc05d70:	8fa2001c 	lw	v0,28(sp)
bfc05d74:	24420001 	addiu	v0,v0,1
bfc05d78:	afa2001c 	sw	v0,28(sp)
bfc05d7c:	8fa2001c 	lw	v0,28(sp)
bfc05d80:	2c420020 	sltiu	v0,v0,32
bfc05d84:	1440ffe2 	bnez	v0,bfc05d10 <memctlc_hw_auto_calibration+0x220>
bfc05d88:	00000000 	nop
			if(delay_tap_min[i] == MEMCTL_AUTO_CALI_NOT_FOUND)
				*(dacqdq+i) = *(dacqdq+i) & 0xFF00FFFF | (delay_tap_cur << 16);
		}
		_update_phy_param();
bfc05d8c:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc05d90:	00000000 	nop

		/* trigger the silence pattern generation */
		*dacspcr = *dacspcr | MEMCTL_DACSPCR_AC_SILEN_TRIG;
bfc05d94:	8fa2002c 	lw	v0,44(sp)
bfc05d98:	8c430000 	lw	v1,0(v0)
bfc05d9c:	3c020010 	lui	v0,0x10
bfc05da0:	00621825 	or	v1,v1,v0
bfc05da4:	8fa2002c 	lw	v0,44(sp)
bfc05da8:	ac430000 	sw	v1,0(v0)
		/* waiting for the completion of the silence pattern generation. */
		while(*dacspcr & MEMCTL_DACSPCR_AC_SILEN_TRIG);
bfc05dac:	8fa2002c 	lw	v0,44(sp)
bfc05db0:	8c430000 	lw	v1,0(v0)
bfc05db4:	3c020010 	lui	v0,0x10
bfc05db8:	00621024 	and	v0,v1,v0
bfc05dbc:	1440fffb 	bnez	v0,bfc05dac <memctlc_hw_auto_calibration+0x2bc>
bfc05dc0:	00000000 	nop
	
		/* Enable the HW auto-calibration update mechanism. */
		for(i = 0; i < 32 ; i++){
bfc05dc4:	afa0001c 	sw	zero,28(sp)
bfc05dc8:	0bf0178b 	j	bfc05e2c <memctlc_hw_auto_calibration+0x33c>
bfc05dcc:	00000000 	nop
			if(delay_tap_min[i] == MEMCTL_AUTO_CALI_NOT_FOUND)
bfc05dd0:	8fa2001c 	lw	v0,28(sp)
bfc05dd4:	00021080 	sll	v0,v0,0x2
bfc05dd8:	27a30010 	addiu	v1,sp,16
bfc05ddc:	00621021 	addu	v0,v1,v0
bfc05de0:	8c430128 	lw	v1,296(v0)
bfc05de4:	24020020 	li	v0,32
bfc05de8:	1462000d 	bne	v1,v0,bfc05e20 <memctlc_hw_auto_calibration+0x330>
bfc05dec:	00000000 	nop
				*(dacqdq+i) = *(dacqdq+i) | MEMCTL_DACDQ_DQ_AC_EN;
bfc05df0:	8fa2001c 	lw	v0,28(sp)
bfc05df4:	00021080 	sll	v0,v0,0x2
bfc05df8:	8fa30030 	lw	v1,48(sp)
bfc05dfc:	00621021 	addu	v0,v1,v0
bfc05e00:	8fa3001c 	lw	v1,28(sp)
bfc05e04:	00031880 	sll	v1,v1,0x2
bfc05e08:	8fa40030 	lw	a0,48(sp)
bfc05e0c:	00831821 	addu	v1,a0,v1
bfc05e10:	8c640000 	lw	a0,0(v1)
bfc05e14:	3c038000 	lui	v1,0x8000
bfc05e18:	00831825 	or	v1,a0,v1
bfc05e1c:	ac430000 	sw	v1,0(v0)
		*dacspcr = *dacspcr | MEMCTL_DACSPCR_AC_SILEN_TRIG;
		/* waiting for the completion of the silence pattern generation. */
		while(*dacspcr & MEMCTL_DACSPCR_AC_SILEN_TRIG);
	
		/* Enable the HW auto-calibration update mechanism. */
		for(i = 0; i < 32 ; i++){
bfc05e20:	8fa2001c 	lw	v0,28(sp)
bfc05e24:	24420001 	addiu	v0,v0,1
bfc05e28:	afa2001c 	sw	v0,28(sp)
bfc05e2c:	8fa2001c 	lw	v0,28(sp)
bfc05e30:	2c420020 	sltiu	v0,v0,32
bfc05e34:	1440ffe6 	bnez	v0,bfc05dd0 <memctlc_hw_auto_calibration+0x2e0>
bfc05e38:	00000000 	nop
			if(delay_tap_min[i] == MEMCTL_AUTO_CALI_NOT_FOUND)
				*(dacqdq+i) = *(dacqdq+i) | MEMCTL_DACDQ_DQ_AC_EN;
		}

		/* trigger the silence pattern generation */
		*dacspcr = *dacspcr | MEMCTL_DACSPCR_AC_SILEN_TRIG;
bfc05e3c:	8fa2002c 	lw	v0,44(sp)
bfc05e40:	8c430000 	lw	v1,0(v0)
bfc05e44:	3c020010 	lui	v0,0x10
bfc05e48:	00621825 	or	v1,v1,v0
bfc05e4c:	8fa2002c 	lw	v0,44(sp)
bfc05e50:	ac430000 	sw	v1,0(v0)
		/* waiting for the completion of the silence pattern generation. */
		while(*dacspcr & MEMCTL_DACSPCR_AC_SILEN_TRIG);
bfc05e54:	8fa2002c 	lw	v0,44(sp)
bfc05e58:	8c430000 	lw	v1,0(v0)
bfc05e5c:	3c020010 	lui	v0,0x10
bfc05e60:	00621024 	and	v0,v1,v0
bfc05e64:	1440fffb 	bnez	v0,bfc05e54 <memctlc_hw_auto_calibration+0x364>
bfc05e68:	00000000 	nop

		/* Check the maximun delay tap value */
		for(i = 0; i < 32 ; i++){
bfc05e6c:	afa0001c 	sw	zero,28(sp)
bfc05e70:	0bf017c8 	j	bfc05f20 <memctlc_hw_auto_calibration+0x430>
bfc05e74:	00000000 	nop
			if(delay_tap_min[i] == MEMCTL_AUTO_CALI_NOT_FOUND){
bfc05e78:	8fa2001c 	lw	v0,28(sp)
bfc05e7c:	00021080 	sll	v0,v0,0x2
bfc05e80:	27a30010 	addiu	v1,sp,16
bfc05e84:	00621021 	addu	v0,v1,v0
bfc05e88:	8c430128 	lw	v1,296(v0)
bfc05e8c:	24020020 	li	v0,32
bfc05e90:	14620020 	bne	v1,v0,bfc05f14 <memctlc_hw_auto_calibration+0x424>
bfc05e94:	00000000 	nop
				/* find minmun tap of the maximun delay tap. */
				if( ((*(dacqdq+i) & 0x00FF0000) >> 16) > delay_tap_cur ){
bfc05e98:	8fa2001c 	lw	v0,28(sp)
bfc05e9c:	00021080 	sll	v0,v0,0x2
bfc05ea0:	8fa30030 	lw	v1,48(sp)
bfc05ea4:	00621021 	addu	v0,v1,v0
bfc05ea8:	8c430000 	lw	v1,0(v0)
bfc05eac:	3c0200ff 	lui	v0,0xff
bfc05eb0:	00621024 	and	v0,v1,v0
bfc05eb4:	00021c02 	srl	v1,v0,0x10
bfc05eb8:	8fa20010 	lw	v0,16(sp)
bfc05ebc:	0043102b 	sltu	v0,v0,v1
bfc05ec0:	10400007 	beqz	v0,bfc05ee0 <memctlc_hw_auto_calibration+0x3f0>
bfc05ec4:	00000000 	nop
					delay_tap_min[i] = delay_tap_cur;
bfc05ec8:	8fa2001c 	lw	v0,28(sp)
bfc05ecc:	00021080 	sll	v0,v0,0x2
bfc05ed0:	27a30010 	addiu	v1,sp,16
bfc05ed4:	00621021 	addu	v0,v1,v0
bfc05ed8:	8fa30010 	lw	v1,16(sp)
bfc05edc:	ac430128 	sw	v1,296(v0)
				}
				/* Disable the HW auto-calibration update mechanism.*/
				*(dacqdq+i) = *(dacqdq+i) & (~MEMCTL_DACDQ_DQ_AC_EN);
bfc05ee0:	8fa2001c 	lw	v0,28(sp)
bfc05ee4:	00021080 	sll	v0,v0,0x2
bfc05ee8:	8fa30030 	lw	v1,48(sp)
bfc05eec:	00621021 	addu	v0,v1,v0
bfc05ef0:	8fa3001c 	lw	v1,28(sp)
bfc05ef4:	00031880 	sll	v1,v1,0x2
bfc05ef8:	8fa40030 	lw	a0,48(sp)
bfc05efc:	00831821 	addu	v1,a0,v1
bfc05f00:	8c640000 	lw	a0,0(v1)
bfc05f04:	3c037fff 	lui	v1,0x7fff
bfc05f08:	3463ffff 	ori	v1,v1,0xffff
bfc05f0c:	00831824 	and	v1,a0,v1
bfc05f10:	ac430000 	sw	v1,0(v0)
		*dacspcr = *dacspcr | MEMCTL_DACSPCR_AC_SILEN_TRIG;
		/* waiting for the completion of the silence pattern generation. */
		while(*dacspcr & MEMCTL_DACSPCR_AC_SILEN_TRIG);

		/* Check the maximun delay tap value */
		for(i = 0; i < 32 ; i++){
bfc05f14:	8fa2001c 	lw	v0,28(sp)
bfc05f18:	24420001 	addiu	v0,v0,1
bfc05f1c:	afa2001c 	sw	v0,28(sp)
bfc05f20:	8fa2001c 	lw	v0,28(sp)
bfc05f24:	2c420020 	sltiu	v0,v0,32
bfc05f28:	1440ffd3 	bnez	v0,bfc05e78 <memctlc_hw_auto_calibration+0x388>
bfc05f2c:	00000000 	nop
	/* 
	 * 2. Searching max delay tap window. 
	 */

	/* 2.1 Minimum tap value for the Maximum delay tap. */
	for(delay_tap_cur=0; delay_tap_cur < 32; delay_tap_cur++){
bfc05f30:	8fa20010 	lw	v0,16(sp)
bfc05f34:	24420001 	addiu	v0,v0,1
bfc05f38:	afa20010 	sw	v0,16(sp)
bfc05f3c:	8fa20010 	lw	v0,16(sp)
bfc05f40:	2c420020 	sltiu	v0,v0,32
bfc05f44:	1440ff6f 	bnez	v0,bfc05d04 <memctlc_hw_auto_calibration+0x214>
bfc05f48:	00000000 	nop
		}

	}

	/* Check wheather there is failured DQ. */
	for(i = 0; i < 32 ; i++){
bfc05f4c:	afa0001c 	sw	zero,28(sp)
bfc05f50:	0bf017e7 	j	bfc05f9c <memctlc_hw_auto_calibration+0x4ac>
bfc05f54:	00000000 	nop
		if(delay_tap_min[i] == MEMCTL_AUTO_CALI_NOT_FOUND){
bfc05f58:	8fa2001c 	lw	v0,28(sp)
bfc05f5c:	00021080 	sll	v0,v0,0x2
bfc05f60:	27a30010 	addiu	v1,sp,16
bfc05f64:	00621021 	addu	v0,v1,v0
bfc05f68:	8c430128 	lw	v1,296(v0)
bfc05f6c:	24020020 	li	v0,32
bfc05f70:	14620003 	bne	v1,v0,bfc05f80 <memctlc_hw_auto_calibration+0x490>
bfc05f74:	00000000 	nop
			_memctl_debug_printf("%s, %d: Fail to calibraton for HW auto-calibration. Register address(0x%08x)\n",\
				 __FUNCTION__, __LINE__, dacqdq+i);
			ret_value = MEMCTL_CALI_FAIL;
bfc05f78:	2402ffff 	li	v0,-1
bfc05f7c:	afa20018 	sw	v0,24(sp)
		}
		if(ret_value == MEMCTL_CALI_FAIL)
bfc05f80:	8fa30018 	lw	v1,24(sp)
bfc05f84:	2402ffff 	li	v0,-1
bfc05f88:	10620337 	beq	v1,v0,bfc06c68 <memctlc_hw_auto_calibration+0x1178>
bfc05f8c:	00000000 	nop
		}

	}

	/* Check wheather there is failured DQ. */
	for(i = 0; i < 32 ; i++){
bfc05f90:	8fa2001c 	lw	v0,28(sp)
bfc05f94:	24420001 	addiu	v0,v0,1
bfc05f98:	afa2001c 	sw	v0,28(sp)
bfc05f9c:	8fa2001c 	lw	v0,28(sp)
bfc05fa0:	2c420020 	sltiu	v0,v0,32
bfc05fa4:	1440ffec 	bnez	v0,bfc05f58 <memctlc_hw_auto_calibration+0x468>
bfc05fa8:	00000000 	nop
		if(ret_value == MEMCTL_CALI_FAIL)
			goto go_out;
	}

	/* Initialize the maximum delay tap*/
	for(i = 0; i < 32 ; i++){
bfc05fac:	afa0001c 	sw	zero,28(sp)
bfc05fb0:	0bf0180c 	j	bfc06030 <memctlc_hw_auto_calibration+0x540>
bfc05fb4:	00000000 	nop
		if(delay_tap_max[i] == MEMCTL_AUTO_CALI_NOT_FOUND)
bfc05fb8:	8fa2001c 	lw	v0,28(sp)
bfc05fbc:	00021080 	sll	v0,v0,0x2
bfc05fc0:	27a30010 	addiu	v1,sp,16
bfc05fc4:	00621021 	addu	v0,v1,v0
bfc05fc8:	8c4300a8 	lw	v1,168(v0)
bfc05fcc:	24020020 	li	v0,32
bfc05fd0:	14620014 	bne	v1,v0,bfc06024 <memctlc_hw_auto_calibration+0x534>
bfc05fd4:	00000000 	nop
			*(dacqdq+i) = (delay_tap_reg_bk[i] & 0xFF00FFFF) | delay_tap_min[i];
bfc05fd8:	8fa2001c 	lw	v0,28(sp)
bfc05fdc:	00021080 	sll	v0,v0,0x2
bfc05fe0:	8fa30030 	lw	v1,48(sp)
bfc05fe4:	00621821 	addu	v1,v1,v0
bfc05fe8:	8fa2001c 	lw	v0,28(sp)
bfc05fec:	00021080 	sll	v0,v0,0x2
bfc05ff0:	27a40010 	addiu	a0,sp,16
bfc05ff4:	00821021 	addu	v0,a0,v0
bfc05ff8:	8c440028 	lw	a0,40(v0)
bfc05ffc:	3c02ff00 	lui	v0,0xff00
bfc06000:	3442ffff 	ori	v0,v0,0xffff
bfc06004:	00822024 	and	a0,a0,v0
bfc06008:	8fa2001c 	lw	v0,28(sp)
bfc0600c:	00021080 	sll	v0,v0,0x2
bfc06010:	27a50010 	addiu	a1,sp,16
bfc06014:	00a21021 	addu	v0,a1,v0
bfc06018:	8c420128 	lw	v0,296(v0)
bfc0601c:	00821025 	or	v0,a0,v0
bfc06020:	ac620000 	sw	v0,0(v1)
		if(ret_value == MEMCTL_CALI_FAIL)
			goto go_out;
	}

	/* Initialize the maximum delay tap*/
	for(i = 0; i < 32 ; i++){
bfc06024:	8fa2001c 	lw	v0,28(sp)
bfc06028:	24420001 	addiu	v0,v0,1
bfc0602c:	afa2001c 	sw	v0,28(sp)
bfc06030:	8fa2001c 	lw	v0,28(sp)
bfc06034:	2c420020 	sltiu	v0,v0,32
bfc06038:	1440ffdf 	bnez	v0,bfc05fb8 <memctlc_hw_auto_calibration+0x4c8>
bfc0603c:	00000000 	nop
		if(delay_tap_max[i] == MEMCTL_AUTO_CALI_NOT_FOUND)
			*(dacqdq+i) = (delay_tap_reg_bk[i] & 0xFF00FFFF) | delay_tap_min[i];
	}
	_update_phy_param();
bfc06040:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc06044:	00000000 	nop

	/* 2.2 Maximum tap value for the Maximum delay tap. */
	for(tap_offset=0; tap_offset < 32; tap_offset++){
bfc06048:	afa00014 	sw	zero,20(sp)
bfc0604c:	0bf018c7 	j	bfc0631c <memctlc_hw_auto_calibration+0x82c>
bfc06050:	00000000 	nop
		/* Initialize the maximum delay tap*/
		for(i = 0; i < 32 ; i++){
bfc06054:	afa0001c 	sw	zero,28(sp)
bfc06058:	0bf0184b 	j	bfc0612c <memctlc_hw_auto_calibration+0x63c>
bfc0605c:	00000000 	nop
			if(delay_tap_max[i] == MEMCTL_AUTO_CALI_NOT_FOUND){
bfc06060:	8fa2001c 	lw	v0,28(sp)
bfc06064:	00021080 	sll	v0,v0,0x2
bfc06068:	27a30010 	addiu	v1,sp,16
bfc0606c:	00621021 	addu	v0,v1,v0
bfc06070:	8c4300a8 	lw	v1,168(v0)
bfc06074:	24020020 	li	v0,32
bfc06078:	14620029 	bne	v1,v0,bfc06120 <memctlc_hw_auto_calibration+0x630>
bfc0607c:	00000000 	nop
				if ((tap_offset+delay_tap_min[i]) < 32)
bfc06080:	8fa2001c 	lw	v0,28(sp)
bfc06084:	00021080 	sll	v0,v0,0x2
bfc06088:	27a30010 	addiu	v1,sp,16
bfc0608c:	00621021 	addu	v0,v1,v0
bfc06090:	8c430128 	lw	v1,296(v0)
bfc06094:	8fa20014 	lw	v0,20(sp)
bfc06098:	00621021 	addu	v0,v1,v0
bfc0609c:	2c420020 	sltiu	v0,v0,32
bfc060a0:	10400019 	beqz	v0,bfc06108 <memctlc_hw_auto_calibration+0x618>
bfc060a4:	00000000 	nop
					*(dacqdq+i) = (delay_tap_reg_bk[i] & 0xFF00FFFF) | ((delay_tap_min[i] + tap_offset) << 16);
bfc060a8:	8fa2001c 	lw	v0,28(sp)
bfc060ac:	00021080 	sll	v0,v0,0x2
bfc060b0:	8fa30030 	lw	v1,48(sp)
bfc060b4:	00621821 	addu	v1,v1,v0
bfc060b8:	8fa2001c 	lw	v0,28(sp)
bfc060bc:	00021080 	sll	v0,v0,0x2
bfc060c0:	27a40010 	addiu	a0,sp,16
bfc060c4:	00821021 	addu	v0,a0,v0
bfc060c8:	8c440028 	lw	a0,40(v0)
bfc060cc:	3c02ff00 	lui	v0,0xff00
bfc060d0:	3442ffff 	ori	v0,v0,0xffff
bfc060d4:	00822024 	and	a0,a0,v0
bfc060d8:	8fa2001c 	lw	v0,28(sp)
bfc060dc:	00021080 	sll	v0,v0,0x2
bfc060e0:	27a50010 	addiu	a1,sp,16
bfc060e4:	00a21021 	addu	v0,a1,v0
bfc060e8:	8c450128 	lw	a1,296(v0)
bfc060ec:	8fa20014 	lw	v0,20(sp)
bfc060f0:	00a21021 	addu	v0,a1,v0
bfc060f4:	00021400 	sll	v0,v0,0x10
bfc060f8:	00821025 	or	v0,a0,v0
bfc060fc:	ac620000 	sw	v0,0(v1)
bfc06100:	0bf01848 	j	bfc06120 <memctlc_hw_auto_calibration+0x630>
bfc06104:	00000000 	nop
				else
					delay_tap_max[i] = 31;
bfc06108:	8fa2001c 	lw	v0,28(sp)
bfc0610c:	00021080 	sll	v0,v0,0x2
bfc06110:	27a30010 	addiu	v1,sp,16
bfc06114:	00621021 	addu	v0,v1,v0
bfc06118:	2403001f 	li	v1,31
bfc0611c:	ac4300a8 	sw	v1,168(v0)
	_update_phy_param();

	/* 2.2 Maximum tap value for the Maximum delay tap. */
	for(tap_offset=0; tap_offset < 32; tap_offset++){
		/* Initialize the maximum delay tap*/
		for(i = 0; i < 32 ; i++){
bfc06120:	8fa2001c 	lw	v0,28(sp)
bfc06124:	24420001 	addiu	v0,v0,1
bfc06128:	afa2001c 	sw	v0,28(sp)
bfc0612c:	8fa2001c 	lw	v0,28(sp)
bfc06130:	2c420020 	sltiu	v0,v0,32
bfc06134:	1440ffca 	bnez	v0,bfc06060 <memctlc_hw_auto_calibration+0x570>
bfc06138:	00000000 	nop
					*(dacqdq+i) = (delay_tap_reg_bk[i] & 0xFF00FFFF) | ((delay_tap_min[i] + tap_offset) << 16);
				else
					delay_tap_max[i] = 31;
			}
		}
		_update_phy_param();
bfc0613c:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc06140:	00000000 	nop

		/* trigger the silence pattern generation */
		*dacspcr = *dacspcr | MEMCTL_DACSPCR_AC_SILEN_TRIG;
bfc06144:	8fa2002c 	lw	v0,44(sp)
bfc06148:	8c430000 	lw	v1,0(v0)
bfc0614c:	3c020010 	lui	v0,0x10
bfc06150:	00621825 	or	v1,v1,v0
bfc06154:	8fa2002c 	lw	v0,44(sp)
bfc06158:	ac430000 	sw	v1,0(v0)
		/* waiting for the completion of the silence pattern generation. */
		while(*dacspcr & MEMCTL_DACSPCR_AC_SILEN_TRIG);
bfc0615c:	8fa2002c 	lw	v0,44(sp)
bfc06160:	8c430000 	lw	v1,0(v0)
bfc06164:	3c020010 	lui	v0,0x10
bfc06168:	00621024 	and	v0,v1,v0
bfc0616c:	1440fffb 	bnez	v0,bfc0615c <memctlc_hw_auto_calibration+0x66c>
bfc06170:	00000000 	nop
	
		/* Enable the HW auto-calibration update mechanism. */
		for(i = 0; i < 32 ; i++){
bfc06174:	afa0001c 	sw	zero,28(sp)
bfc06178:	0bf01877 	j	bfc061dc <memctlc_hw_auto_calibration+0x6ec>
bfc0617c:	00000000 	nop
			if(delay_tap_max[i] == MEMCTL_AUTO_CALI_NOT_FOUND)
bfc06180:	8fa2001c 	lw	v0,28(sp)
bfc06184:	00021080 	sll	v0,v0,0x2
bfc06188:	27a30010 	addiu	v1,sp,16
bfc0618c:	00621021 	addu	v0,v1,v0
bfc06190:	8c4300a8 	lw	v1,168(v0)
bfc06194:	24020020 	li	v0,32
bfc06198:	1462000d 	bne	v1,v0,bfc061d0 <memctlc_hw_auto_calibration+0x6e0>
bfc0619c:	00000000 	nop
				*(dacqdq+i) = *(dacqdq+i) | MEMCTL_DACDQ_DQ_AC_EN;
bfc061a0:	8fa2001c 	lw	v0,28(sp)
bfc061a4:	00021080 	sll	v0,v0,0x2
bfc061a8:	8fa30030 	lw	v1,48(sp)
bfc061ac:	00621021 	addu	v0,v1,v0
bfc061b0:	8fa3001c 	lw	v1,28(sp)
bfc061b4:	00031880 	sll	v1,v1,0x2
bfc061b8:	8fa40030 	lw	a0,48(sp)
bfc061bc:	00831821 	addu	v1,a0,v1
bfc061c0:	8c640000 	lw	a0,0(v1)
bfc061c4:	3c038000 	lui	v1,0x8000
bfc061c8:	00831825 	or	v1,a0,v1
bfc061cc:	ac430000 	sw	v1,0(v0)
		*dacspcr = *dacspcr | MEMCTL_DACSPCR_AC_SILEN_TRIG;
		/* waiting for the completion of the silence pattern generation. */
		while(*dacspcr & MEMCTL_DACSPCR_AC_SILEN_TRIG);
	
		/* Enable the HW auto-calibration update mechanism. */
		for(i = 0; i < 32 ; i++){
bfc061d0:	8fa2001c 	lw	v0,28(sp)
bfc061d4:	24420001 	addiu	v0,v0,1
bfc061d8:	afa2001c 	sw	v0,28(sp)
bfc061dc:	8fa2001c 	lw	v0,28(sp)
bfc061e0:	2c420020 	sltiu	v0,v0,32
bfc061e4:	1440ffe6 	bnez	v0,bfc06180 <memctlc_hw_auto_calibration+0x690>
bfc061e8:	00000000 	nop
			if(delay_tap_max[i] == MEMCTL_AUTO_CALI_NOT_FOUND)
				*(dacqdq+i) = *(dacqdq+i) | MEMCTL_DACDQ_DQ_AC_EN;
		}

		/* trigger the silence pattern generation */
		*dacspcr = *dacspcr | MEMCTL_DACSPCR_AC_SILEN_TRIG;
bfc061ec:	8fa2002c 	lw	v0,44(sp)
bfc061f0:	8c430000 	lw	v1,0(v0)
bfc061f4:	3c020010 	lui	v0,0x10
bfc061f8:	00621825 	or	v1,v1,v0
bfc061fc:	8fa2002c 	lw	v0,44(sp)
bfc06200:	ac430000 	sw	v1,0(v0)
		/* waiting for the completion of the silence pattern generation. */
		while(*dacspcr & MEMCTL_DACSPCR_AC_SILEN_TRIG);
bfc06204:	8fa2002c 	lw	v0,44(sp)
bfc06208:	8c430000 	lw	v1,0(v0)
bfc0620c:	3c020010 	lui	v0,0x10
bfc06210:	00621024 	and	v0,v1,v0
bfc06214:	1440fffb 	bnez	v0,bfc06204 <memctlc_hw_auto_calibration+0x714>
bfc06218:	00000000 	nop

		/* Check the maximun delay tap value */
		for(i = 0; i < 32 ; i++){
bfc0621c:	afa0001c 	sw	zero,28(sp)
bfc06220:	0bf018c0 	j	bfc06300 <memctlc_hw_auto_calibration+0x810>
bfc06224:	00000000 	nop
			if(delay_tap_max[i] == MEMCTL_AUTO_CALI_NOT_FOUND){
bfc06228:	8fa2001c 	lw	v0,28(sp)
bfc0622c:	00021080 	sll	v0,v0,0x2
bfc06230:	27a30010 	addiu	v1,sp,16
bfc06234:	00621021 	addu	v0,v1,v0
bfc06238:	8c4300a8 	lw	v1,168(v0)
bfc0623c:	24020020 	li	v0,32
bfc06240:	1462002c 	bne	v1,v0,bfc062f4 <memctlc_hw_auto_calibration+0x804>
bfc06244:	00000000 	nop
				/* find maximum tap of the maximun delay tap. */
				if( ((*(dacqdq+i) & 0x00FF0000) >> 16) == (tap_offset+delay_tap_min[i]) ){
bfc06248:	8fa2001c 	lw	v0,28(sp)
bfc0624c:	00021080 	sll	v0,v0,0x2
bfc06250:	8fa30030 	lw	v1,48(sp)
bfc06254:	00621021 	addu	v0,v1,v0
bfc06258:	8c430000 	lw	v1,0(v0)
bfc0625c:	3c0200ff 	lui	v0,0xff
bfc06260:	00621024 	and	v0,v1,v0
bfc06264:	00021c02 	srl	v1,v0,0x10
bfc06268:	8fa2001c 	lw	v0,28(sp)
bfc0626c:	00021080 	sll	v0,v0,0x2
bfc06270:	27a40010 	addiu	a0,sp,16
bfc06274:	00821021 	addu	v0,a0,v0
bfc06278:	8c440128 	lw	a0,296(v0)
bfc0627c:	8fa20014 	lw	v0,20(sp)
bfc06280:	00821021 	addu	v0,a0,v0
bfc06284:	1462000e 	bne	v1,v0,bfc062c0 <memctlc_hw_auto_calibration+0x7d0>
bfc06288:	00000000 	nop
					delay_tap_max[i] = tap_offset+delay_tap_min[i]-1;
bfc0628c:	8fa4001c 	lw	a0,28(sp)
bfc06290:	8fa2001c 	lw	v0,28(sp)
bfc06294:	00021080 	sll	v0,v0,0x2
bfc06298:	27a30010 	addiu	v1,sp,16
bfc0629c:	00621021 	addu	v0,v1,v0
bfc062a0:	8c430128 	lw	v1,296(v0)
bfc062a4:	8fa20014 	lw	v0,20(sp)
bfc062a8:	00621021 	addu	v0,v1,v0
bfc062ac:	2443ffff 	addiu	v1,v0,-1
bfc062b0:	00041080 	sll	v0,a0,0x2
bfc062b4:	27a40010 	addiu	a0,sp,16
bfc062b8:	00821021 	addu	v0,a0,v0
bfc062bc:	ac4300a8 	sw	v1,168(v0)
				}
				/* Disable the HW auto-calibration update mechanism.*/
				*(dacqdq+i) = *(dacqdq+i) & (~MEMCTL_DACDQ_DQ_AC_EN);
bfc062c0:	8fa2001c 	lw	v0,28(sp)
bfc062c4:	00021080 	sll	v0,v0,0x2
bfc062c8:	8fa30030 	lw	v1,48(sp)
bfc062cc:	00621021 	addu	v0,v1,v0
bfc062d0:	8fa3001c 	lw	v1,28(sp)
bfc062d4:	00031880 	sll	v1,v1,0x2
bfc062d8:	8fa40030 	lw	a0,48(sp)
bfc062dc:	00831821 	addu	v1,a0,v1
bfc062e0:	8c640000 	lw	a0,0(v1)
bfc062e4:	3c037fff 	lui	v1,0x7fff
bfc062e8:	3463ffff 	ori	v1,v1,0xffff
bfc062ec:	00831824 	and	v1,a0,v1
bfc062f0:	ac430000 	sw	v1,0(v0)
		*dacspcr = *dacspcr | MEMCTL_DACSPCR_AC_SILEN_TRIG;
		/* waiting for the completion of the silence pattern generation. */
		while(*dacspcr & MEMCTL_DACSPCR_AC_SILEN_TRIG);

		/* Check the maximun delay tap value */
		for(i = 0; i < 32 ; i++){
bfc062f4:	8fa2001c 	lw	v0,28(sp)
bfc062f8:	24420001 	addiu	v0,v0,1
bfc062fc:	afa2001c 	sw	v0,28(sp)
bfc06300:	8fa2001c 	lw	v0,28(sp)
bfc06304:	2c420020 	sltiu	v0,v0,32
bfc06308:	1440ffc7 	bnez	v0,bfc06228 <memctlc_hw_auto_calibration+0x738>
bfc0630c:	00000000 	nop
			*(dacqdq+i) = (delay_tap_reg_bk[i] & 0xFF00FFFF) | delay_tap_min[i];
	}
	_update_phy_param();

	/* 2.2 Maximum tap value for the Maximum delay tap. */
	for(tap_offset=0; tap_offset < 32; tap_offset++){
bfc06310:	8fa20014 	lw	v0,20(sp)
bfc06314:	24420001 	addiu	v0,v0,1
bfc06318:	afa20014 	sw	v0,20(sp)
bfc0631c:	8fa20014 	lw	v0,20(sp)
bfc06320:	2c420020 	sltiu	v0,v0,32
bfc06324:	1440ff4b 	bnez	v0,bfc06054 <memctlc_hw_auto_calibration+0x564>
bfc06328:	00000000 	nop
		}

	}

	/* Check wheather there is failured DQ. */
	for(i = 0; i < 32 ; i++){
bfc0632c:	afa0001c 	sw	zero,28(sp)
bfc06330:	0bf018df 	j	bfc0637c <memctlc_hw_auto_calibration+0x88c>
bfc06334:	00000000 	nop
		if(delay_tap_max[i] == MEMCTL_AUTO_CALI_NOT_FOUND){
bfc06338:	8fa2001c 	lw	v0,28(sp)
bfc0633c:	00021080 	sll	v0,v0,0x2
bfc06340:	27a30010 	addiu	v1,sp,16
bfc06344:	00621021 	addu	v0,v1,v0
bfc06348:	8c4300a8 	lw	v1,168(v0)
bfc0634c:	24020020 	li	v0,32
bfc06350:	14620003 	bne	v1,v0,bfc06360 <memctlc_hw_auto_calibration+0x870>
bfc06354:	00000000 	nop
			_memctl_debug_printf("%s, %d: Fail to calibraton for HW auto-calibration. Register address(0x%08x)\n",\
				 __FUNCTION__, __LINE__, dacqdq+i);
			ret_value = MEMCTL_CALI_FAIL;
bfc06358:	2402ffff 	li	v0,-1
bfc0635c:	afa20018 	sw	v0,24(sp)
		}
		if(ret_value == MEMCTL_CALI_FAIL)
bfc06360:	8fa30018 	lw	v1,24(sp)
bfc06364:	2402ffff 	li	v0,-1
bfc06368:	10620242 	beq	v1,v0,bfc06c74 <memctlc_hw_auto_calibration+0x1184>
bfc0636c:	00000000 	nop
		}

	}

	/* Check wheather there is failured DQ. */
	for(i = 0; i < 32 ; i++){
bfc06370:	8fa2001c 	lw	v0,28(sp)
bfc06374:	24420001 	addiu	v0,v0,1
bfc06378:	afa2001c 	sw	v0,28(sp)
bfc0637c:	8fa2001c 	lw	v0,28(sp)
bfc06380:	2c420020 	sltiu	v0,v0,32
bfc06384:	1440ffec 	bnez	v0,bfc06338 <memctlc_hw_auto_calibration+0x848>
bfc06388:	00000000 	nop
		_memctl_debug_printf("delay_tap_max[%d] = %d, delay_tap_min[%d] = %d\n", i, delay_tap_max[i], i, delay_tap_min[i]);
	}
#endif

	/* Commit (max+1) to the register back up array */
	for(i=0;i<32;i++){
bfc0638c:	afa0001c 	sw	zero,28(sp)
bfc06390:	0bf018fe 	j	bfc063f8 <memctlc_hw_auto_calibration+0x908>
bfc06394:	00000000 	nop
		delay_tap_reg_bk[i] = (delay_tap_reg_bk[i] & 0xFF00FFFF) | ((delay_tap_max[i] + 1) << 16);
bfc06398:	8fa4001c 	lw	a0,28(sp)
bfc0639c:	8fa2001c 	lw	v0,28(sp)
bfc063a0:	00021080 	sll	v0,v0,0x2
bfc063a4:	27a30010 	addiu	v1,sp,16
bfc063a8:	00621021 	addu	v0,v1,v0
bfc063ac:	8c430028 	lw	v1,40(v0)
bfc063b0:	3c02ff00 	lui	v0,0xff00
bfc063b4:	3442ffff 	ori	v0,v0,0xffff
bfc063b8:	00621824 	and	v1,v1,v0
bfc063bc:	8fa2001c 	lw	v0,28(sp)
bfc063c0:	00021080 	sll	v0,v0,0x2
bfc063c4:	27a50010 	addiu	a1,sp,16
bfc063c8:	00a21021 	addu	v0,a1,v0
bfc063cc:	8c4200a8 	lw	v0,168(v0)
bfc063d0:	24420001 	addiu	v0,v0,1
bfc063d4:	00021400 	sll	v0,v0,0x10
bfc063d8:	00621825 	or	v1,v1,v0
bfc063dc:	00041080 	sll	v0,a0,0x2
bfc063e0:	27a40010 	addiu	a0,sp,16
bfc063e4:	00821021 	addu	v0,a0,v0
bfc063e8:	ac430028 	sw	v1,40(v0)
		_memctl_debug_printf("delay_tap_max[%d] = %d, delay_tap_min[%d] = %d\n", i, delay_tap_max[i], i, delay_tap_min[i]);
	}
#endif

	/* Commit (max+1) to the register back up array */
	for(i=0;i<32;i++){
bfc063ec:	8fa2001c 	lw	v0,28(sp)
bfc063f0:	24420001 	addiu	v0,v0,1
bfc063f4:	afa2001c 	sw	v0,28(sp)
bfc063f8:	8fa2001c 	lw	v0,28(sp)
bfc063fc:	2c420020 	sltiu	v0,v0,32
bfc06400:	1440ffe5 	bnez	v0,bfc06398 <memctlc_hw_auto_calibration+0x8a8>
bfc06404:	00000000 	nop
		delay_tap_reg_bk[i] = (delay_tap_reg_bk[i] & 0xFF00FFFF) | ((delay_tap_max[i] + 1) << 16);
	}

	for(i=0;i<32;i++){
bfc06408:	afa0001c 	sw	zero,28(sp)
bfc0640c:	0bf0191d 	j	bfc06474 <memctlc_hw_auto_calibration+0x984>
bfc06410:	00000000 	nop
		target_delay_tap[i] = (target_delay_tap[i] & 0xFF00FFFF) | ((delay_tap_max[i]-2) << 16) ;
bfc06414:	8fa4001c 	lw	a0,28(sp)
bfc06418:	8fa2001c 	lw	v0,28(sp)
bfc0641c:	00021080 	sll	v0,v0,0x2
bfc06420:	27a30010 	addiu	v1,sp,16
bfc06424:	00621021 	addu	v0,v1,v0
bfc06428:	8c4301a8 	lw	v1,424(v0)
bfc0642c:	3c02ff00 	lui	v0,0xff00
bfc06430:	3442ffff 	ori	v0,v0,0xffff
bfc06434:	00621824 	and	v1,v1,v0
bfc06438:	8fa2001c 	lw	v0,28(sp)
bfc0643c:	00021080 	sll	v0,v0,0x2
bfc06440:	27a50010 	addiu	a1,sp,16
bfc06444:	00a21021 	addu	v0,a1,v0
bfc06448:	8c4200a8 	lw	v0,168(v0)
bfc0644c:	2442fffe 	addiu	v0,v0,-2
bfc06450:	00021400 	sll	v0,v0,0x10
bfc06454:	00621825 	or	v1,v1,v0
bfc06458:	00041080 	sll	v0,a0,0x2
bfc0645c:	27a40010 	addiu	a0,sp,16
bfc06460:	00821021 	addu	v0,a0,v0
bfc06464:	ac4301a8 	sw	v1,424(v0)
	/* Commit (max+1) to the register back up array */
	for(i=0;i<32;i++){
		delay_tap_reg_bk[i] = (delay_tap_reg_bk[i] & 0xFF00FFFF) | ((delay_tap_max[i] + 1) << 16);
	}

	for(i=0;i<32;i++){
bfc06468:	8fa2001c 	lw	v0,28(sp)
bfc0646c:	24420001 	addiu	v0,v0,1
bfc06470:	afa2001c 	sw	v0,28(sp)
bfc06474:	8fa2001c 	lw	v0,28(sp)
bfc06478:	2c420020 	sltiu	v0,v0,32
bfc0647c:	1440ffe5 	bnez	v0,bfc06414 <memctlc_hw_auto_calibration+0x924>
bfc06480:	00000000 	nop

	/*
	 * 3. Searching min delay tap window. 
	 */
	/* 3.1 Minimum tap value for the Maximum delay tap. */
	for(delay_tap_cur=1; delay_tap_cur < 32; delay_tap_cur++){ /* start from 1 */
bfc06484:	24020001 	li	v0,1
bfc06488:	afa20010 	sw	v0,16(sp)
bfc0648c:	0bf019af 	j	bfc066bc <memctlc_hw_auto_calibration+0xbcc>
bfc06490:	00000000 	nop
		/* Initialize the maximum delay tap*/
		for(i = 0; i < 32 ; i++){
bfc06494:	afa0001c 	sw	zero,28(sp)
bfc06498:	0bf01941 	j	bfc06504 <memctlc_hw_auto_calibration+0xa14>
bfc0649c:	00000000 	nop
			if(delay_tap_min[i] == MEMCTL_AUTO_CALI_NOT_FOUND)
bfc064a0:	8fa2001c 	lw	v0,28(sp)
bfc064a4:	00021080 	sll	v0,v0,0x2
bfc064a8:	27a30010 	addiu	v1,sp,16
bfc064ac:	00621021 	addu	v0,v1,v0
bfc064b0:	8c430128 	lw	v1,296(v0)
bfc064b4:	24020020 	li	v0,32
bfc064b8:	1462000f 	bne	v1,v0,bfc064f8 <memctlc_hw_auto_calibration+0xa08>
bfc064bc:	00000000 	nop
				*(dacqdq+i) = *(dacqdq+i) & 0xFFFFFF00 | (delay_tap_cur);
bfc064c0:	8fa2001c 	lw	v0,28(sp)
bfc064c4:	00021080 	sll	v0,v0,0x2
bfc064c8:	8fa30030 	lw	v1,48(sp)
bfc064cc:	00621021 	addu	v0,v1,v0
bfc064d0:	8fa3001c 	lw	v1,28(sp)
bfc064d4:	00031880 	sll	v1,v1,0x2
bfc064d8:	8fa40030 	lw	a0,48(sp)
bfc064dc:	00831821 	addu	v1,a0,v1
bfc064e0:	8c640000 	lw	a0,0(v1)
bfc064e4:	2403ff00 	li	v1,-256
bfc064e8:	00832024 	and	a0,a0,v1
bfc064ec:	8fa30010 	lw	v1,16(sp)
bfc064f0:	00831825 	or	v1,a0,v1
bfc064f4:	ac430000 	sw	v1,0(v0)
	 * 3. Searching min delay tap window. 
	 */
	/* 3.1 Minimum tap value for the Maximum delay tap. */
	for(delay_tap_cur=1; delay_tap_cur < 32; delay_tap_cur++){ /* start from 1 */
		/* Initialize the maximum delay tap*/
		for(i = 0; i < 32 ; i++){
bfc064f8:	8fa2001c 	lw	v0,28(sp)
bfc064fc:	24420001 	addiu	v0,v0,1
bfc06500:	afa2001c 	sw	v0,28(sp)
bfc06504:	8fa2001c 	lw	v0,28(sp)
bfc06508:	2c420020 	sltiu	v0,v0,32
bfc0650c:	1440ffe4 	bnez	v0,bfc064a0 <memctlc_hw_auto_calibration+0x9b0>
bfc06510:	00000000 	nop
			if(delay_tap_min[i] == MEMCTL_AUTO_CALI_NOT_FOUND)
				*(dacqdq+i) = *(dacqdq+i) & 0xFFFFFF00 | (delay_tap_cur);
		}
		_update_phy_param();
bfc06514:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc06518:	00000000 	nop

		/* trigger the silence pattern generation */
		*dacspcr = *dacspcr | MEMCTL_DACSPCR_AC_SILEN_TRIG;
bfc0651c:	8fa2002c 	lw	v0,44(sp)
bfc06520:	8c430000 	lw	v1,0(v0)
bfc06524:	3c020010 	lui	v0,0x10
bfc06528:	00621825 	or	v1,v1,v0
bfc0652c:	8fa2002c 	lw	v0,44(sp)
bfc06530:	ac430000 	sw	v1,0(v0)
		/* waiting for the completion of the silence pattern generation. */
		while(*dacspcr & MEMCTL_DACSPCR_AC_SILEN_TRIG);
bfc06534:	8fa2002c 	lw	v0,44(sp)
bfc06538:	8c430000 	lw	v1,0(v0)
bfc0653c:	3c020010 	lui	v0,0x10
bfc06540:	00621024 	and	v0,v1,v0
bfc06544:	1440fffb 	bnez	v0,bfc06534 <memctlc_hw_auto_calibration+0xa44>
bfc06548:	00000000 	nop
	
		/* Enable the HW auto-calibration update mechanism. */
		for(i = 0; i < 32 ; i++){
bfc0654c:	afa0001c 	sw	zero,28(sp)
bfc06550:	0bf0196d 	j	bfc065b4 <memctlc_hw_auto_calibration+0xac4>
bfc06554:	00000000 	nop
			if(delay_tap_min[i] == MEMCTL_AUTO_CALI_NOT_FOUND)
bfc06558:	8fa2001c 	lw	v0,28(sp)
bfc0655c:	00021080 	sll	v0,v0,0x2
bfc06560:	27a30010 	addiu	v1,sp,16
bfc06564:	00621021 	addu	v0,v1,v0
bfc06568:	8c430128 	lw	v1,296(v0)
bfc0656c:	24020020 	li	v0,32
bfc06570:	1462000d 	bne	v1,v0,bfc065a8 <memctlc_hw_auto_calibration+0xab8>
bfc06574:	00000000 	nop
				*(dacqdq+i) = *(dacqdq+i) | MEMCTL_DACDQ_DQ_AC_EN;
bfc06578:	8fa2001c 	lw	v0,28(sp)
bfc0657c:	00021080 	sll	v0,v0,0x2
bfc06580:	8fa30030 	lw	v1,48(sp)
bfc06584:	00621021 	addu	v0,v1,v0
bfc06588:	8fa3001c 	lw	v1,28(sp)
bfc0658c:	00031880 	sll	v1,v1,0x2
bfc06590:	8fa40030 	lw	a0,48(sp)
bfc06594:	00831821 	addu	v1,a0,v1
bfc06598:	8c640000 	lw	a0,0(v1)
bfc0659c:	3c038000 	lui	v1,0x8000
bfc065a0:	00831825 	or	v1,a0,v1
bfc065a4:	ac430000 	sw	v1,0(v0)
		*dacspcr = *dacspcr | MEMCTL_DACSPCR_AC_SILEN_TRIG;
		/* waiting for the completion of the silence pattern generation. */
		while(*dacspcr & MEMCTL_DACSPCR_AC_SILEN_TRIG);
	
		/* Enable the HW auto-calibration update mechanism. */
		for(i = 0; i < 32 ; i++){
bfc065a8:	8fa2001c 	lw	v0,28(sp)
bfc065ac:	24420001 	addiu	v0,v0,1
bfc065b0:	afa2001c 	sw	v0,28(sp)
bfc065b4:	8fa2001c 	lw	v0,28(sp)
bfc065b8:	2c420020 	sltiu	v0,v0,32
bfc065bc:	1440ffe6 	bnez	v0,bfc06558 <memctlc_hw_auto_calibration+0xa68>
bfc065c0:	00000000 	nop
			if(delay_tap_min[i] == MEMCTL_AUTO_CALI_NOT_FOUND)
				*(dacqdq+i) = *(dacqdq+i) | MEMCTL_DACDQ_DQ_AC_EN;
		}

		/* trigger the silence pattern generation */
		*dacspcr = *dacspcr | MEMCTL_DACSPCR_AC_SILEN_TRIG;
bfc065c4:	8fa2002c 	lw	v0,44(sp)
bfc065c8:	8c430000 	lw	v1,0(v0)
bfc065cc:	3c020010 	lui	v0,0x10
bfc065d0:	00621825 	or	v1,v1,v0
bfc065d4:	8fa2002c 	lw	v0,44(sp)
bfc065d8:	ac430000 	sw	v1,0(v0)
		/* waiting for the completion of the silence pattern generation. */
		while(*dacspcr & MEMCTL_DACSPCR_AC_SILEN_TRIG);
bfc065dc:	8fa2002c 	lw	v0,44(sp)
bfc065e0:	8c430000 	lw	v1,0(v0)
bfc065e4:	3c020010 	lui	v0,0x10
bfc065e8:	00621024 	and	v0,v1,v0
bfc065ec:	1440fffb 	bnez	v0,bfc065dc <memctlc_hw_auto_calibration+0xaec>
bfc065f0:	00000000 	nop

		/* Check the maximun delay tap value */
		for(i = 0; i < 32 ; i++){
bfc065f4:	afa0001c 	sw	zero,28(sp)
bfc065f8:	0bf019a8 	j	bfc066a0 <memctlc_hw_auto_calibration+0xbb0>
bfc065fc:	00000000 	nop
			if(delay_tap_min[i] == MEMCTL_AUTO_CALI_NOT_FOUND){
bfc06600:	8fa2001c 	lw	v0,28(sp)
bfc06604:	00021080 	sll	v0,v0,0x2
bfc06608:	27a30010 	addiu	v1,sp,16
bfc0660c:	00621021 	addu	v0,v1,v0
bfc06610:	8c430128 	lw	v1,296(v0)
bfc06614:	24020020 	li	v0,32
bfc06618:	1462001e 	bne	v1,v0,bfc06694 <memctlc_hw_auto_calibration+0xba4>
bfc0661c:	00000000 	nop
				/* find minmun tap of the maximun delay tap. */
				if( (*(dacqdq+i) & 0x000000FF) < delay_tap_cur ){
bfc06620:	8fa2001c 	lw	v0,28(sp)
bfc06624:	00021080 	sll	v0,v0,0x2
bfc06628:	8fa30030 	lw	v1,48(sp)
bfc0662c:	00621021 	addu	v0,v1,v0
bfc06630:	8c420000 	lw	v0,0(v0)
bfc06634:	304300ff 	andi	v1,v0,0xff
bfc06638:	8fa20010 	lw	v0,16(sp)
bfc0663c:	0062102b 	sltu	v0,v1,v0
bfc06640:	10400007 	beqz	v0,bfc06660 <memctlc_hw_auto_calibration+0xb70>
bfc06644:	00000000 	nop
					delay_tap_min[i] = delay_tap_cur;
bfc06648:	8fa2001c 	lw	v0,28(sp)
bfc0664c:	00021080 	sll	v0,v0,0x2
bfc06650:	27a30010 	addiu	v1,sp,16
bfc06654:	00621021 	addu	v0,v1,v0
bfc06658:	8fa30010 	lw	v1,16(sp)
bfc0665c:	ac430128 	sw	v1,296(v0)
				}
				/* Disable the HW auto-calibration update mechanism.*/
				*(dacqdq+i) = *(dacqdq+i) & (~MEMCTL_DACDQ_DQ_AC_EN);
bfc06660:	8fa2001c 	lw	v0,28(sp)
bfc06664:	00021080 	sll	v0,v0,0x2
bfc06668:	8fa30030 	lw	v1,48(sp)
bfc0666c:	00621021 	addu	v0,v1,v0
bfc06670:	8fa3001c 	lw	v1,28(sp)
bfc06674:	00031880 	sll	v1,v1,0x2
bfc06678:	8fa40030 	lw	a0,48(sp)
bfc0667c:	00831821 	addu	v1,a0,v1
bfc06680:	8c640000 	lw	a0,0(v1)
bfc06684:	3c037fff 	lui	v1,0x7fff
bfc06688:	3463ffff 	ori	v1,v1,0xffff
bfc0668c:	00831824 	and	v1,a0,v1
bfc06690:	ac430000 	sw	v1,0(v0)
		*dacspcr = *dacspcr | MEMCTL_DACSPCR_AC_SILEN_TRIG;
		/* waiting for the completion of the silence pattern generation. */
		while(*dacspcr & MEMCTL_DACSPCR_AC_SILEN_TRIG);

		/* Check the maximun delay tap value */
		for(i = 0; i < 32 ; i++){
bfc06694:	8fa2001c 	lw	v0,28(sp)
bfc06698:	24420001 	addiu	v0,v0,1
bfc0669c:	afa2001c 	sw	v0,28(sp)
bfc066a0:	8fa2001c 	lw	v0,28(sp)
bfc066a4:	2c420020 	sltiu	v0,v0,32
bfc066a8:	1440ffd5 	bnez	v0,bfc06600 <memctlc_hw_auto_calibration+0xb10>
bfc066ac:	00000000 	nop

	/*
	 * 3. Searching min delay tap window. 
	 */
	/* 3.1 Minimum tap value for the Maximum delay tap. */
	for(delay_tap_cur=1; delay_tap_cur < 32; delay_tap_cur++){ /* start from 1 */
bfc066b0:	8fa20010 	lw	v0,16(sp)
bfc066b4:	24420001 	addiu	v0,v0,1
bfc066b8:	afa20010 	sw	v0,16(sp)
bfc066bc:	8fa20010 	lw	v0,16(sp)
bfc066c0:	2c420020 	sltiu	v0,v0,32
bfc066c4:	1440ff73 	bnez	v0,bfc06494 <memctlc_hw_auto_calibration+0x9a4>
bfc066c8:	00000000 	nop
		}
	}


	/* Check wheather there is failured DQ. */
	for(i = 0; i < 32 ; i++){
bfc066cc:	afa0001c 	sw	zero,28(sp)
bfc066d0:	0bf019c7 	j	bfc0671c <memctlc_hw_auto_calibration+0xc2c>
bfc066d4:	00000000 	nop
		if(delay_tap_min[i] == MEMCTL_AUTO_CALI_NOT_FOUND){
bfc066d8:	8fa2001c 	lw	v0,28(sp)
bfc066dc:	00021080 	sll	v0,v0,0x2
bfc066e0:	27a30010 	addiu	v1,sp,16
bfc066e4:	00621021 	addu	v0,v1,v0
bfc066e8:	8c430128 	lw	v1,296(v0)
bfc066ec:	24020020 	li	v0,32
bfc066f0:	14620003 	bne	v1,v0,bfc06700 <memctlc_hw_auto_calibration+0xc10>
bfc066f4:	00000000 	nop
			_memctl_debug_printf("%s, %d: Fail to calibraton for HW auto-calibration. Register address(0x%08x)\n",\
				 __FUNCTION__, __LINE__, dacqdq+i);
			ret_value = MEMCTL_CALI_FAIL;
bfc066f8:	2402ffff 	li	v0,-1
bfc066fc:	afa20018 	sw	v0,24(sp)
		}
		if(ret_value == MEMCTL_CALI_FAIL)
bfc06700:	8fa30018 	lw	v1,24(sp)
bfc06704:	2402ffff 	li	v0,-1
bfc06708:	1062015d 	beq	v1,v0,bfc06c80 <memctlc_hw_auto_calibration+0x1190>
bfc0670c:	00000000 	nop
		}
	}


	/* Check wheather there is failured DQ. */
	for(i = 0; i < 32 ; i++){
bfc06710:	8fa2001c 	lw	v0,28(sp)
bfc06714:	24420001 	addiu	v0,v0,1
bfc06718:	afa2001c 	sw	v0,28(sp)
bfc0671c:	8fa2001c 	lw	v0,28(sp)
bfc06720:	2c420020 	sltiu	v0,v0,32
bfc06724:	1440ffec 	bnez	v0,bfc066d8 <memctlc_hw_auto_calibration+0xbe8>
bfc06728:	00000000 	nop
			goto go_out;
	}


	/* Initialize the minimum delay tap*/
	for(i = 0; i < 32 ; i++){
bfc0672c:	afa0001c 	sw	zero,28(sp)
bfc06730:	0bf019eb 	j	bfc067ac <memctlc_hw_auto_calibration+0xcbc>
bfc06734:	00000000 	nop
		if(delay_tap_max[i] == MEMCTL_AUTO_CALI_NOT_FOUND)
bfc06738:	8fa2001c 	lw	v0,28(sp)
bfc0673c:	00021080 	sll	v0,v0,0x2
bfc06740:	27a30010 	addiu	v1,sp,16
bfc06744:	00621021 	addu	v0,v1,v0
bfc06748:	8c4300a8 	lw	v1,168(v0)
bfc0674c:	24020020 	li	v0,32
bfc06750:	14620013 	bne	v1,v0,bfc067a0 <memctlc_hw_auto_calibration+0xcb0>
bfc06754:	00000000 	nop
			*(dacqdq+i) = (delay_tap_reg_bk[i] & 0xFFFFFF00) | delay_tap_min[i];
bfc06758:	8fa2001c 	lw	v0,28(sp)
bfc0675c:	00021080 	sll	v0,v0,0x2
bfc06760:	8fa30030 	lw	v1,48(sp)
bfc06764:	00621821 	addu	v1,v1,v0
bfc06768:	8fa2001c 	lw	v0,28(sp)
bfc0676c:	00021080 	sll	v0,v0,0x2
bfc06770:	27a40010 	addiu	a0,sp,16
bfc06774:	00821021 	addu	v0,a0,v0
bfc06778:	8c440028 	lw	a0,40(v0)
bfc0677c:	2402ff00 	li	v0,-256
bfc06780:	00822024 	and	a0,a0,v0
bfc06784:	8fa2001c 	lw	v0,28(sp)
bfc06788:	00021080 	sll	v0,v0,0x2
bfc0678c:	27a50010 	addiu	a1,sp,16
bfc06790:	00a21021 	addu	v0,a1,v0
bfc06794:	8c420128 	lw	v0,296(v0)
bfc06798:	00821025 	or	v0,a0,v0
bfc0679c:	ac620000 	sw	v0,0(v1)
			goto go_out;
	}


	/* Initialize the minimum delay tap*/
	for(i = 0; i < 32 ; i++){
bfc067a0:	8fa2001c 	lw	v0,28(sp)
bfc067a4:	24420001 	addiu	v0,v0,1
bfc067a8:	afa2001c 	sw	v0,28(sp)
bfc067ac:	8fa2001c 	lw	v0,28(sp)
bfc067b0:	2c420020 	sltiu	v0,v0,32
bfc067b4:	1440ffe0 	bnez	v0,bfc06738 <memctlc_hw_auto_calibration+0xc48>
bfc067b8:	00000000 	nop
		if(delay_tap_max[i] == MEMCTL_AUTO_CALI_NOT_FOUND)
			*(dacqdq+i) = (delay_tap_reg_bk[i] & 0xFFFFFF00) | delay_tap_min[i];
	}
	_update_phy_param();
bfc067bc:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc067c0:	00000000 	nop

	/* 3.2 Maximum tap value for the Maximum delay tap. */
	for(tap_offset=0; tap_offset < 32; tap_offset++){
bfc067c4:	afa00014 	sw	zero,20(sp)
bfc067c8:	0bf01aa2 	j	bfc06a88 <memctlc_hw_auto_calibration+0xf98>
bfc067cc:	00000000 	nop
		/* Initialize the maximum delay tap*/
		for(i = 0; i < 32 ; i++){
bfc067d0:	afa0001c 	sw	zero,28(sp)
bfc067d4:	0bf01a28 	j	bfc068a0 <memctlc_hw_auto_calibration+0xdb0>
bfc067d8:	00000000 	nop
			if(delay_tap_max[i] == MEMCTL_AUTO_CALI_NOT_FOUND){
bfc067dc:	8fa2001c 	lw	v0,28(sp)
bfc067e0:	00021080 	sll	v0,v0,0x2
bfc067e4:	27a30010 	addiu	v1,sp,16
bfc067e8:	00621021 	addu	v0,v1,v0
bfc067ec:	8c4300a8 	lw	v1,168(v0)
bfc067f0:	24020020 	li	v0,32
bfc067f4:	14620027 	bne	v1,v0,bfc06894 <memctlc_hw_auto_calibration+0xda4>
bfc067f8:	00000000 	nop
				if ((tap_offset+delay_tap_min[i]) < 32)
bfc067fc:	8fa2001c 	lw	v0,28(sp)
bfc06800:	00021080 	sll	v0,v0,0x2
bfc06804:	27a30010 	addiu	v1,sp,16
bfc06808:	00621021 	addu	v0,v1,v0
bfc0680c:	8c430128 	lw	v1,296(v0)
bfc06810:	8fa20014 	lw	v0,20(sp)
bfc06814:	00621021 	addu	v0,v1,v0
bfc06818:	2c420020 	sltiu	v0,v0,32
bfc0681c:	10400017 	beqz	v0,bfc0687c <memctlc_hw_auto_calibration+0xd8c>
bfc06820:	00000000 	nop
					*(dacqdq+i) = (delay_tap_reg_bk[i] & 0xFFFFFF00) | ((delay_tap_min[i] + tap_offset));
bfc06824:	8fa2001c 	lw	v0,28(sp)
bfc06828:	00021080 	sll	v0,v0,0x2
bfc0682c:	8fa30030 	lw	v1,48(sp)
bfc06830:	00621821 	addu	v1,v1,v0
bfc06834:	8fa2001c 	lw	v0,28(sp)
bfc06838:	00021080 	sll	v0,v0,0x2
bfc0683c:	27a40010 	addiu	a0,sp,16
bfc06840:	00821021 	addu	v0,a0,v0
bfc06844:	8c440028 	lw	a0,40(v0)
bfc06848:	2402ff00 	li	v0,-256
bfc0684c:	00822024 	and	a0,a0,v0
bfc06850:	8fa2001c 	lw	v0,28(sp)
bfc06854:	00021080 	sll	v0,v0,0x2
bfc06858:	27a50010 	addiu	a1,sp,16
bfc0685c:	00a21021 	addu	v0,a1,v0
bfc06860:	8c450128 	lw	a1,296(v0)
bfc06864:	8fa20014 	lw	v0,20(sp)
bfc06868:	00a21021 	addu	v0,a1,v0
bfc0686c:	00821025 	or	v0,a0,v0
bfc06870:	ac620000 	sw	v0,0(v1)
bfc06874:	0bf01a25 	j	bfc06894 <memctlc_hw_auto_calibration+0xda4>
bfc06878:	00000000 	nop
				else
					delay_tap_max[i] = 31;
bfc0687c:	8fa2001c 	lw	v0,28(sp)
bfc06880:	00021080 	sll	v0,v0,0x2
bfc06884:	27a30010 	addiu	v1,sp,16
bfc06888:	00621021 	addu	v0,v1,v0
bfc0688c:	2403001f 	li	v1,31
bfc06890:	ac4300a8 	sw	v1,168(v0)
	_update_phy_param();

	/* 3.2 Maximum tap value for the Maximum delay tap. */
	for(tap_offset=0; tap_offset < 32; tap_offset++){
		/* Initialize the maximum delay tap*/
		for(i = 0; i < 32 ; i++){
bfc06894:	8fa2001c 	lw	v0,28(sp)
bfc06898:	24420001 	addiu	v0,v0,1
bfc0689c:	afa2001c 	sw	v0,28(sp)
bfc068a0:	8fa2001c 	lw	v0,28(sp)
bfc068a4:	2c420020 	sltiu	v0,v0,32
bfc068a8:	1440ffcc 	bnez	v0,bfc067dc <memctlc_hw_auto_calibration+0xcec>
bfc068ac:	00000000 	nop
					*(dacqdq+i) = (delay_tap_reg_bk[i] & 0xFFFFFF00) | ((delay_tap_min[i] + tap_offset));
				else
					delay_tap_max[i] = 31;
			}
		}
		_update_phy_param();
bfc068b0:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc068b4:	00000000 	nop

		/* trigger the silence pattern generation */
		*dacspcr = *dacspcr | MEMCTL_DACSPCR_AC_SILEN_TRIG;
bfc068b8:	8fa2002c 	lw	v0,44(sp)
bfc068bc:	8c430000 	lw	v1,0(v0)
bfc068c0:	3c020010 	lui	v0,0x10
bfc068c4:	00621825 	or	v1,v1,v0
bfc068c8:	8fa2002c 	lw	v0,44(sp)
bfc068cc:	ac430000 	sw	v1,0(v0)
		/* waiting for the completion of the silence pattern generation. */
		while(*dacspcr & MEMCTL_DACSPCR_AC_SILEN_TRIG);
bfc068d0:	8fa2002c 	lw	v0,44(sp)
bfc068d4:	8c430000 	lw	v1,0(v0)
bfc068d8:	3c020010 	lui	v0,0x10
bfc068dc:	00621024 	and	v0,v1,v0
bfc068e0:	1440fffb 	bnez	v0,bfc068d0 <memctlc_hw_auto_calibration+0xde0>
bfc068e4:	00000000 	nop
	
		/* Enable the HW auto-calibration update mechanism. */
		for(i = 0; i < 32 ; i++){
bfc068e8:	afa0001c 	sw	zero,28(sp)
bfc068ec:	0bf01a54 	j	bfc06950 <memctlc_hw_auto_calibration+0xe60>
bfc068f0:	00000000 	nop
			if(delay_tap_max[i] == MEMCTL_AUTO_CALI_NOT_FOUND)
bfc068f4:	8fa2001c 	lw	v0,28(sp)
bfc068f8:	00021080 	sll	v0,v0,0x2
bfc068fc:	27a30010 	addiu	v1,sp,16
bfc06900:	00621021 	addu	v0,v1,v0
bfc06904:	8c4300a8 	lw	v1,168(v0)
bfc06908:	24020020 	li	v0,32
bfc0690c:	1462000d 	bne	v1,v0,bfc06944 <memctlc_hw_auto_calibration+0xe54>
bfc06910:	00000000 	nop
				*(dacqdq+i) = *(dacqdq+i) | MEMCTL_DACDQ_DQ_AC_EN;
bfc06914:	8fa2001c 	lw	v0,28(sp)
bfc06918:	00021080 	sll	v0,v0,0x2
bfc0691c:	8fa30030 	lw	v1,48(sp)
bfc06920:	00621021 	addu	v0,v1,v0
bfc06924:	8fa3001c 	lw	v1,28(sp)
bfc06928:	00031880 	sll	v1,v1,0x2
bfc0692c:	8fa40030 	lw	a0,48(sp)
bfc06930:	00831821 	addu	v1,a0,v1
bfc06934:	8c640000 	lw	a0,0(v1)
bfc06938:	3c038000 	lui	v1,0x8000
bfc0693c:	00831825 	or	v1,a0,v1
bfc06940:	ac430000 	sw	v1,0(v0)
		*dacspcr = *dacspcr | MEMCTL_DACSPCR_AC_SILEN_TRIG;
		/* waiting for the completion of the silence pattern generation. */
		while(*dacspcr & MEMCTL_DACSPCR_AC_SILEN_TRIG);
	
		/* Enable the HW auto-calibration update mechanism. */
		for(i = 0; i < 32 ; i++){
bfc06944:	8fa2001c 	lw	v0,28(sp)
bfc06948:	24420001 	addiu	v0,v0,1
bfc0694c:	afa2001c 	sw	v0,28(sp)
bfc06950:	8fa2001c 	lw	v0,28(sp)
bfc06954:	2c420020 	sltiu	v0,v0,32
bfc06958:	1440ffe6 	bnez	v0,bfc068f4 <memctlc_hw_auto_calibration+0xe04>
bfc0695c:	00000000 	nop
			if(delay_tap_max[i] == MEMCTL_AUTO_CALI_NOT_FOUND)
				*(dacqdq+i) = *(dacqdq+i) | MEMCTL_DACDQ_DQ_AC_EN;
		}

		/* trigger the silence pattern generation */
		*dacspcr = *dacspcr | MEMCTL_DACSPCR_AC_SILEN_TRIG;
bfc06960:	8fa2002c 	lw	v0,44(sp)
bfc06964:	8c430000 	lw	v1,0(v0)
bfc06968:	3c020010 	lui	v0,0x10
bfc0696c:	00621825 	or	v1,v1,v0
bfc06970:	8fa2002c 	lw	v0,44(sp)
bfc06974:	ac430000 	sw	v1,0(v0)
		/* waiting for the completion of the silence pattern generation. */
		while(*dacspcr & MEMCTL_DACSPCR_AC_SILEN_TRIG);
bfc06978:	8fa2002c 	lw	v0,44(sp)
bfc0697c:	8c430000 	lw	v1,0(v0)
bfc06980:	3c020010 	lui	v0,0x10
bfc06984:	00621024 	and	v0,v1,v0
bfc06988:	1440fffb 	bnez	v0,bfc06978 <memctlc_hw_auto_calibration+0xe88>
bfc0698c:	00000000 	nop

		/* Check the maximun delay tap value */
		for(i = 0; i < 32 ; i++){
bfc06990:	afa0001c 	sw	zero,28(sp)
bfc06994:	0bf01a9b 	j	bfc06a6c <memctlc_hw_auto_calibration+0xf7c>
bfc06998:	00000000 	nop
			if(delay_tap_max[i] == MEMCTL_AUTO_CALI_NOT_FOUND){
bfc0699c:	8fa2001c 	lw	v0,28(sp)
bfc069a0:	00021080 	sll	v0,v0,0x2
bfc069a4:	27a30010 	addiu	v1,sp,16
bfc069a8:	00621021 	addu	v0,v1,v0
bfc069ac:	8c4300a8 	lw	v1,168(v0)
bfc069b0:	24020020 	li	v0,32
bfc069b4:	1462002a 	bne	v1,v0,bfc06a60 <memctlc_hw_auto_calibration+0xf70>
bfc069b8:	00000000 	nop
				/* find maximum tap of the minimun delay tap. */
				if( (*(dacqdq+i) & 0x000000FF) == (tap_offset+delay_tap_min[i]) ){
bfc069bc:	8fa2001c 	lw	v0,28(sp)
bfc069c0:	00021080 	sll	v0,v0,0x2
bfc069c4:	8fa30030 	lw	v1,48(sp)
bfc069c8:	00621021 	addu	v0,v1,v0
bfc069cc:	8c420000 	lw	v0,0(v0)
bfc069d0:	304300ff 	andi	v1,v0,0xff
bfc069d4:	8fa2001c 	lw	v0,28(sp)
bfc069d8:	00021080 	sll	v0,v0,0x2
bfc069dc:	27a40010 	addiu	a0,sp,16
bfc069e0:	00821021 	addu	v0,a0,v0
bfc069e4:	8c440128 	lw	a0,296(v0)
bfc069e8:	8fa20014 	lw	v0,20(sp)
bfc069ec:	00821021 	addu	v0,a0,v0
bfc069f0:	1462000e 	bne	v1,v0,bfc06a2c <memctlc_hw_auto_calibration+0xf3c>
bfc069f4:	00000000 	nop
					delay_tap_max[i] = tap_offset+delay_tap_min[i]-1;
bfc069f8:	8fa4001c 	lw	a0,28(sp)
bfc069fc:	8fa2001c 	lw	v0,28(sp)
bfc06a00:	00021080 	sll	v0,v0,0x2
bfc06a04:	27a30010 	addiu	v1,sp,16
bfc06a08:	00621021 	addu	v0,v1,v0
bfc06a0c:	8c430128 	lw	v1,296(v0)
bfc06a10:	8fa20014 	lw	v0,20(sp)
bfc06a14:	00621021 	addu	v0,v1,v0
bfc06a18:	2443ffff 	addiu	v1,v0,-1
bfc06a1c:	00041080 	sll	v0,a0,0x2
bfc06a20:	27a40010 	addiu	a0,sp,16
bfc06a24:	00821021 	addu	v0,a0,v0
bfc06a28:	ac4300a8 	sw	v1,168(v0)
				}
				/* Disable the HW auto-calibration update mechanism.*/
				*(dacqdq+i) = *(dacqdq+i) & (~MEMCTL_DACDQ_DQ_AC_EN);
bfc06a2c:	8fa2001c 	lw	v0,28(sp)
bfc06a30:	00021080 	sll	v0,v0,0x2
bfc06a34:	8fa30030 	lw	v1,48(sp)
bfc06a38:	00621021 	addu	v0,v1,v0
bfc06a3c:	8fa3001c 	lw	v1,28(sp)
bfc06a40:	00031880 	sll	v1,v1,0x2
bfc06a44:	8fa40030 	lw	a0,48(sp)
bfc06a48:	00831821 	addu	v1,a0,v1
bfc06a4c:	8c640000 	lw	a0,0(v1)
bfc06a50:	3c037fff 	lui	v1,0x7fff
bfc06a54:	3463ffff 	ori	v1,v1,0xffff
bfc06a58:	00831824 	and	v1,a0,v1
bfc06a5c:	ac430000 	sw	v1,0(v0)
		*dacspcr = *dacspcr | MEMCTL_DACSPCR_AC_SILEN_TRIG;
		/* waiting for the completion of the silence pattern generation. */
		while(*dacspcr & MEMCTL_DACSPCR_AC_SILEN_TRIG);

		/* Check the maximun delay tap value */
		for(i = 0; i < 32 ; i++){
bfc06a60:	8fa2001c 	lw	v0,28(sp)
bfc06a64:	24420001 	addiu	v0,v0,1
bfc06a68:	afa2001c 	sw	v0,28(sp)
bfc06a6c:	8fa2001c 	lw	v0,28(sp)
bfc06a70:	2c420020 	sltiu	v0,v0,32
bfc06a74:	1440ffc9 	bnez	v0,bfc0699c <memctlc_hw_auto_calibration+0xeac>
bfc06a78:	00000000 	nop
			*(dacqdq+i) = (delay_tap_reg_bk[i] & 0xFFFFFF00) | delay_tap_min[i];
	}
	_update_phy_param();

	/* 3.2 Maximum tap value for the Maximum delay tap. */
	for(tap_offset=0; tap_offset < 32; tap_offset++){
bfc06a7c:	8fa20014 	lw	v0,20(sp)
bfc06a80:	24420001 	addiu	v0,v0,1
bfc06a84:	afa20014 	sw	v0,20(sp)
bfc06a88:	8fa20014 	lw	v0,20(sp)
bfc06a8c:	2c420020 	sltiu	v0,v0,32
bfc06a90:	1440ff4f 	bnez	v0,bfc067d0 <memctlc_hw_auto_calibration+0xce0>
bfc06a94:	00000000 	nop
		}

	}

	/* Check wheather there is failured DQ. */
	for(i = 0; i < 32 ; i++){
bfc06a98:	afa0001c 	sw	zero,28(sp)
bfc06a9c:	0bf01aba 	j	bfc06ae8 <memctlc_hw_auto_calibration+0xff8>
bfc06aa0:	00000000 	nop
		if(delay_tap_max[i] == MEMCTL_AUTO_CALI_NOT_FOUND){
bfc06aa4:	8fa2001c 	lw	v0,28(sp)
bfc06aa8:	00021080 	sll	v0,v0,0x2
bfc06aac:	27a30010 	addiu	v1,sp,16
bfc06ab0:	00621021 	addu	v0,v1,v0
bfc06ab4:	8c4300a8 	lw	v1,168(v0)
bfc06ab8:	24020020 	li	v0,32
bfc06abc:	14620003 	bne	v1,v0,bfc06acc <memctlc_hw_auto_calibration+0xfdc>
bfc06ac0:	00000000 	nop
			_memctl_debug_printf("%s, %d: Fail to calibraton for HW auto-calibration. Register address(0x%08x)\n",\
				 __FUNCTION__, __LINE__, dacqdq+i);
			ret_value = MEMCTL_CALI_FAIL;
bfc06ac4:	2402ffff 	li	v0,-1
bfc06ac8:	afa20018 	sw	v0,24(sp)
		}
		if(ret_value == MEMCTL_CALI_FAIL)
bfc06acc:	8fa30018 	lw	v1,24(sp)
bfc06ad0:	2402ffff 	li	v0,-1
bfc06ad4:	1062006d 	beq	v1,v0,bfc06c8c <memctlc_hw_auto_calibration+0x119c>
bfc06ad8:	00000000 	nop
		}

	}

	/* Check wheather there is failured DQ. */
	for(i = 0; i < 32 ; i++){
bfc06adc:	8fa2001c 	lw	v0,28(sp)
bfc06ae0:	24420001 	addiu	v0,v0,1
bfc06ae4:	afa2001c 	sw	v0,28(sp)
bfc06ae8:	8fa2001c 	lw	v0,28(sp)
bfc06aec:	2c420020 	sltiu	v0,v0,32
bfc06af0:	1440ffec 	bnez	v0,bfc06aa4 <memctlc_hw_auto_calibration+0xfb4>
bfc06af4:	00000000 	nop
		}
		if(ret_value == MEMCTL_CALI_FAIL)
			goto go_out;
	}

	for(i=0;i<32;i++){
bfc06af8:	afa0001c 	sw	zero,28(sp)
bfc06afc:	0bf01ad6 	j	bfc06b58 <memctlc_hw_auto_calibration+0x1068>
bfc06b00:	00000000 	nop
		target_delay_tap[i] = (target_delay_tap[i] & 0xFFFFFF00) | ((delay_tap_min[i])) ;
bfc06b04:	8fa4001c 	lw	a0,28(sp)
bfc06b08:	8fa2001c 	lw	v0,28(sp)
bfc06b0c:	00021080 	sll	v0,v0,0x2
bfc06b10:	27a30010 	addiu	v1,sp,16
bfc06b14:	00621021 	addu	v0,v1,v0
bfc06b18:	8c4301a8 	lw	v1,424(v0)
bfc06b1c:	2402ff00 	li	v0,-256
bfc06b20:	00621824 	and	v1,v1,v0
bfc06b24:	8fa2001c 	lw	v0,28(sp)
bfc06b28:	00021080 	sll	v0,v0,0x2
bfc06b2c:	27a50010 	addiu	a1,sp,16
bfc06b30:	00a21021 	addu	v0,a1,v0
bfc06b34:	8c420128 	lw	v0,296(v0)
bfc06b38:	00621825 	or	v1,v1,v0
bfc06b3c:	00041080 	sll	v0,a0,0x2
bfc06b40:	27a40010 	addiu	a0,sp,16
bfc06b44:	00821021 	addu	v0,a0,v0
bfc06b48:	ac4301a8 	sw	v1,424(v0)
		}
		if(ret_value == MEMCTL_CALI_FAIL)
			goto go_out;
	}

	for(i=0;i<32;i++){
bfc06b4c:	8fa2001c 	lw	v0,28(sp)
bfc06b50:	24420001 	addiu	v0,v0,1
bfc06b54:	afa2001c 	sw	v0,28(sp)
bfc06b58:	8fa2001c 	lw	v0,28(sp)
bfc06b5c:	2c420020 	sltiu	v0,v0,32
bfc06b60:	1440ffe8 	bnez	v0,bfc06b04 <memctlc_hw_auto_calibration+0x1014>
bfc06b64:	00000000 	nop
		_memctl_debug_printf("delay_tap_max[%d] = %d, delay_tap_min[%d] = %d\n", i, delay_tap_max[i], i, delay_tap_min[i]);
	}
#endif


	for(i = 0; i < 32 ; i++){
bfc06b68:	afa0001c 	sw	zero,28(sp)
bfc06b6c:	0bf01aea 	j	bfc06ba8 <memctlc_hw_auto_calibration+0x10b8>
bfc06b70:	00000000 	nop
		*(dacqdq+i) = target_delay_tap[i];
bfc06b74:	8fa2001c 	lw	v0,28(sp)
bfc06b78:	00021080 	sll	v0,v0,0x2
bfc06b7c:	8fa30030 	lw	v1,48(sp)
bfc06b80:	00621821 	addu	v1,v1,v0
bfc06b84:	8fa2001c 	lw	v0,28(sp)
bfc06b88:	00021080 	sll	v0,v0,0x2
bfc06b8c:	27a40010 	addiu	a0,sp,16
bfc06b90:	00821021 	addu	v0,a0,v0
bfc06b94:	8c4201a8 	lw	v0,424(v0)
bfc06b98:	ac620000 	sw	v0,0(v1)
		_memctl_debug_printf("delay_tap_max[%d] = %d, delay_tap_min[%d] = %d\n", i, delay_tap_max[i], i, delay_tap_min[i]);
	}
#endif


	for(i = 0; i < 32 ; i++){
bfc06b9c:	8fa2001c 	lw	v0,28(sp)
bfc06ba0:	24420001 	addiu	v0,v0,1
bfc06ba4:	afa2001c 	sw	v0,28(sp)
bfc06ba8:	8fa2001c 	lw	v0,28(sp)
bfc06bac:	2c420020 	sltiu	v0,v0,32
bfc06bb0:	1440fff0 	bnez	v0,bfc06b74 <memctlc_hw_auto_calibration+0x1084>
bfc06bb4:	00000000 	nop
		*(dacqdq+i) = target_delay_tap[i];
	}
	_update_phy_param();
bfc06bb8:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc06bbc:	00000000 	nop

	/* Enable the HW auto-calibration update mechanism. */
	for(i = 0; i < 32 ; i++){
bfc06bc0:	afa0001c 	sw	zero,28(sp)
bfc06bc4:	0bf01b02 	j	bfc06c08 <memctlc_hw_auto_calibration+0x1118>
bfc06bc8:	00000000 	nop
		*(dacqdq+i) = *(dacqdq+i) | MEMCTL_DACDQ_DQ_AC_EN;
bfc06bcc:	8fa2001c 	lw	v0,28(sp)
bfc06bd0:	00021080 	sll	v0,v0,0x2
bfc06bd4:	8fa30030 	lw	v1,48(sp)
bfc06bd8:	00621021 	addu	v0,v1,v0
bfc06bdc:	8fa3001c 	lw	v1,28(sp)
bfc06be0:	00031880 	sll	v1,v1,0x2
bfc06be4:	8fa40030 	lw	a0,48(sp)
bfc06be8:	00831821 	addu	v1,a0,v1
bfc06bec:	8c640000 	lw	a0,0(v1)
bfc06bf0:	3c038000 	lui	v1,0x8000
bfc06bf4:	00831825 	or	v1,a0,v1
bfc06bf8:	ac430000 	sw	v1,0(v0)
		*(dacqdq+i) = target_delay_tap[i];
	}
	_update_phy_param();

	/* Enable the HW auto-calibration update mechanism. */
	for(i = 0; i < 32 ; i++){
bfc06bfc:	8fa2001c 	lw	v0,28(sp)
bfc06c00:	24420001 	addiu	v0,v0,1
bfc06c04:	afa2001c 	sw	v0,28(sp)
bfc06c08:	8fa2001c 	lw	v0,28(sp)
bfc06c0c:	2c420020 	sltiu	v0,v0,32
bfc06c10:	1440ffee 	bnez	v0,bfc06bcc <memctlc_hw_auto_calibration+0x10dc>
bfc06c14:	00000000 	nop

	/* Enable periodic silence pattern generation. */
	//*((volatile unsigned int *)0xB8001008) = 0xfffff7c0;
	//_update_phy_param();

	*dacspcr = (*dacspcr & 0xFFF000FF) | 0x00000F00;
bfc06c18:	8fa2002c 	lw	v0,44(sp)
bfc06c1c:	8c430000 	lw	v1,0(v0)
bfc06c20:	3c02fff0 	lui	v0,0xfff0
bfc06c24:	344200ff 	ori	v0,v0,0xff
bfc06c28:	00621024 	and	v0,v1,v0
bfc06c2c:	34430f00 	ori	v1,v0,0xf00
bfc06c30:	8fa2002c 	lw	v0,44(sp)
bfc06c34:	ac430000 	sw	v1,0(v0)
	_update_phy_param();
bfc06c38:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc06c3c:	00000000 	nop

	*dacspcr = *dacspcr | MEMCTL_DACSPCR_AC_SILEN_PERIOD_EN;
bfc06c40:	8fa2002c 	lw	v0,44(sp)
bfc06c44:	8c430000 	lw	v1,0(v0)
bfc06c48:	3c028000 	lui	v0,0x8000
bfc06c4c:	00621825 	or	v1,v1,v0
bfc06c50:	8fa2002c 	lw	v0,44(sp)
bfc06c54:	ac430000 	sw	v1,0(v0)

	//*dacspcr = *dacspcr & (~MEMCTL_DACSPCR_AC_SILEN_PERIOD_EN);//disable silence pattern

	_update_phy_param();
bfc06c58:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc06c5c:	00000000 	nop
bfc06c60:	0bf01b24 	j	bfc06c90 <memctlc_hw_auto_calibration+0x11a0>
bfc06c64:	00000000 	nop
			_memctl_debug_printf("%s, %d: Fail to calibraton for HW auto-calibration. Register address(0x%08x)\n",\
				 __FUNCTION__, __LINE__, dacqdq+i);
			ret_value = MEMCTL_CALI_FAIL;
		}
		if(ret_value == MEMCTL_CALI_FAIL)
			goto go_out;
bfc06c68:	00000000 	nop
bfc06c6c:	0bf01b24 	j	bfc06c90 <memctlc_hw_auto_calibration+0x11a0>
bfc06c70:	00000000 	nop
			_memctl_debug_printf("%s, %d: Fail to calibraton for HW auto-calibration. Register address(0x%08x)\n",\
				 __FUNCTION__, __LINE__, dacqdq+i);
			ret_value = MEMCTL_CALI_FAIL;
		}
		if(ret_value == MEMCTL_CALI_FAIL)
			goto go_out;
bfc06c74:	00000000 	nop
bfc06c78:	0bf01b24 	j	bfc06c90 <memctlc_hw_auto_calibration+0x11a0>
bfc06c7c:	00000000 	nop
			_memctl_debug_printf("%s, %d: Fail to calibraton for HW auto-calibration. Register address(0x%08x)\n",\
				 __FUNCTION__, __LINE__, dacqdq+i);
			ret_value = MEMCTL_CALI_FAIL;
		}
		if(ret_value == MEMCTL_CALI_FAIL)
			goto go_out;
bfc06c80:	00000000 	nop
bfc06c84:	0bf01b24 	j	bfc06c90 <memctlc_hw_auto_calibration+0x11a0>
bfc06c88:	00000000 	nop
			_memctl_debug_printf("%s, %d: Fail to calibraton for HW auto-calibration. Register address(0x%08x)\n",\
				 __FUNCTION__, __LINE__, dacqdq+i);
			ret_value = MEMCTL_CALI_FAIL;
		}
		if(ret_value == MEMCTL_CALI_FAIL)
			goto go_out;
bfc06c8c:	00000000 	nop
	_update_phy_param();
	//*((volatile unsigned int *)(0xb8001500)) = 0x80000000;
	//__asm__ __volatile__("": : :"memory");
	//*((volatile unsigned int *)(0xb8001500)) = 0x80000010;
go_out:
	return ret_value;
bfc06c90:	8fa20018 	lw	v0,24(sp)
}
bfc06c94:	8fbf023c 	lw	ra,572(sp)
bfc06c98:	27bd0240 	addiu	sp,sp,576
bfc06c9c:	03e00008 	jr	ra
bfc06ca0:	00000000 	nop

bfc06ca4 <sram_mapping>:
 * Note:
 * 	None 
 */
int sram_mapping(unsigned int segNo, unsigned int cpu_addr, \
		 unsigned int sram_addr, unsigned int sram_size_no)
{
bfc06ca4:	27bdfff8 	addiu	sp,sp,-8
bfc06ca8:	afa40008 	sw	a0,8(sp)
bfc06cac:	afa5000c 	sw	a1,12(sp)
bfc06cb0:	afa60010 	sw	a2,16(sp)
bfc06cb4:	afa70014 	sw	a3,20(sp)
	unsigned int size_in_bytes;
	int          ret_code;

	ret_code = 0;
bfc06cb8:	afa00000 	sw	zero,0(sp)

	/* Parameter checking */
	if(segNo >= SRAM_REG_SET_NUM){
bfc06cbc:	8fa20008 	lw	v0,8(sp)
bfc06cc0:	2c420004 	sltiu	v0,v0,4
bfc06cc4:	14400003 	bnez	v0,bfc06cd4 <sram_mapping+0x30>
bfc06cc8:	00000000 	nop
		////////_memctl_debug_printf("Function:%s , line %d", __FUNCTION__, __LINE__);
		//////_memctl_debug_printf("Wrong SRAM segment number(%d), only support (0 ~ %d)\n", segNo, (SRAM_REG_SET_NUM-1));
		ret_code = -1;
bfc06ccc:	2402ffff 	li	v0,-1
bfc06cd0:	afa20000 	sw	v0,0(sp)
	}
	/* Parameter checking */
	if(sram_size_no > SRAM_SIZE_1MB){
bfc06cd4:	8fa20014 	lw	v0,20(sp)
bfc06cd8:	2c42000e 	sltiu	v0,v0,14
bfc06cdc:	14400003 	bnez	v0,bfc06cec <sram_mapping+0x48>
bfc06ce0:	00000000 	nop
		////////_memctl_debug_printf("Function:%s , line %d", __FUNCTION__, __LINE__);
		//////_memctl_debug_printf("Wrong sram_size_no: %d\n");
		ret_code = -1;
bfc06ce4:	2402ffff 	li	v0,-1
bfc06ce8:	afa20000 	sw	v0,0(sp)
	}


	/* Alignmemt checking */
	size_in_bytes = 128 << sram_size_no;
bfc06cec:	8fa20014 	lw	v0,20(sp)
bfc06cf0:	24030080 	li	v1,128
bfc06cf4:	00431004 	sllv	v0,v1,v0
bfc06cf8:	afa20004 	sw	v0,4(sp)

	if((sram_addr % size_in_bytes) != 0){
bfc06cfc:	8fa30010 	lw	v1,16(sp)
bfc06d00:	8fa20004 	lw	v0,4(sp)
bfc06d04:	0062001b 	divu	zero,v1,v0
bfc06d08:	004001f4 	teq	v0,zero,0x7
bfc06d0c:	00001010 	mfhi	v0
bfc06d10:	10400003 	beqz	v0,bfc06d20 <sram_mapping+0x7c>
bfc06d14:	00000000 	nop
		////////_memctl_debug_printf("Function:%s , line %d", __FUNCTION__, __LINE__);
		//////_memctl_debug_printf("sram_addr(0x%08x) isn't nature aligned with sram size(0x%08x):\n",\
			sram_addr, size_in_bytes);
		ret_code = -1;
bfc06d18:	2402ffff 	li	v0,-1
bfc06d1c:	afa20000 	sw	v0,0(sp)
	}
	if((cpu_addr % size_in_bytes) != 0){
bfc06d20:	8fa3000c 	lw	v1,12(sp)
bfc06d24:	8fa20004 	lw	v0,4(sp)
bfc06d28:	0062001b 	divu	zero,v1,v0
bfc06d2c:	004001f4 	teq	v0,zero,0x7
bfc06d30:	00001010 	mfhi	v0
bfc06d34:	10400003 	beqz	v0,bfc06d44 <sram_mapping+0xa0>
bfc06d38:	00000000 	nop
		////////_memctl_debug_printf("Function:%s , line %d", __FUNCTION__, __LINE__);
		//////_memctl_debug_printf("cpu_addr(0x%08x) isn't nature aligned with sram size(0x%08x):\n", \
			cpu_addr, size_in_bytes);
		ret_code = -1;
bfc06d3c:	2402ffff 	li	v0,-1
bfc06d40:	afa20000 	sw	v0,0(sp)

	//if(ret_code >= 0){
		//__sram_mapping(segNo, cpu_addr, sram_addr, sram_size_no);

	//}
	return ret_code;
bfc06d44:	8fa20000 	lw	v0,0(sp)

}
bfc06d48:	27bd0008 	addiu	sp,sp,8
bfc06d4c:	03e00008 	jr	ra
bfc06d50:	00000000 	nop

bfc06d54 <_is_Master_CPU>:

unsigned int _is_Master_CPU(void)
{
	return 1;	
bfc06d54:	24020001 	li	v0,1
}
bfc06d58:	03e00008 	jr	ra
bfc06d5c:	00000000 	nop

bfc06d60 <soc_vir_to_phy_addr>:

unsigned int soc_vir_to_phy_addr(unsigned int vir_addr)
{
bfc06d60:	afa40000 	sw	a0,0(sp)
	return (vir_addr&0x1FFFFFFF);
bfc06d64:	8fa30000 	lw	v1,0(sp)
bfc06d68:	3c021fff 	lui	v0,0x1fff
bfc06d6c:	3442ffff 	ori	v0,v0,0xffff
bfc06d70:	00621024 	and	v0,v1,v0
}
bfc06d74:	03e00008 	jr	ra
bfc06d78:	00000000 	nop

bfc06d7c <__memctl_unmapping>:

/* Real Memory controller setting function. */
void __memctl_unmapping(unsigned int segNo, unsigned int cpu_addr, \
                        unsigned int size_no)
{
bfc06d7c:	27bdffd8 	addiu	sp,sp,-40
bfc06d80:	afbf0024 	sw	ra,36(sp)
bfc06d84:	afa40028 	sw	a0,40(sp)
bfc06d88:	afa5002c 	sw	a1,44(sp)
bfc06d8c:	afa60030 	sw	a2,48(sp)
	unsigned int reg_base_addr;
	volatile unsigned int *p_addr_reg;
	volatile unsigned int *p_size_reg;
	volatile unsigned int *p_base_reg;

	if(_is_Master_CPU()){
bfc06d90:	0ff01b55 	jal	bfc06d54 <_is_Master_CPU>
bfc06d94:	00000000 	nop
bfc06d98:	10400006 	beqz	v0,bfc06db4 <__memctl_unmapping+0x38>
bfc06d9c:	00000000 	nop
		reg_base_addr = C0UMSAR_REG_ADDR;
bfc06da0:	3c02b800 	lui	v0,0xb800
bfc06da4:	34421300 	ori	v0,v0,0x1300
bfc06da8:	afa2001c 	sw	v0,28(sp)
bfc06dac:	0bf01b70 	j	bfc06dc0 <__memctl_unmapping+0x44>
bfc06db0:	00000000 	nop
	}else{
		reg_base_addr = C1UMSAR_REG_ADDR;
bfc06db4:	3c02b800 	lui	v0,0xb800
bfc06db8:	34421340 	ori	v0,v0,0x1340
bfc06dbc:	afa2001c 	sw	v0,28(sp)
	}

	p_addr_reg = (unsigned int *)(reg_base_addr + (MEMCTL_UNMAP_REG_SET_SIZE*segNo));
bfc06dc0:	8fa20028 	lw	v0,40(sp)
bfc06dc4:	00021900 	sll	v1,v0,0x4
bfc06dc8:	8fa2001c 	lw	v0,28(sp)
bfc06dcc:	00621021 	addu	v0,v1,v0
bfc06dd0:	afa20018 	sw	v0,24(sp)
	p_size_reg = (unsigned int *)(reg_base_addr + (MEMCTL_UNMAP_REG_SET_SIZE*segNo) + 0x4 );
bfc06dd4:	8fa20028 	lw	v0,40(sp)
bfc06dd8:	00021900 	sll	v1,v0,0x4
bfc06ddc:	8fa2001c 	lw	v0,28(sp)
bfc06de0:	00621021 	addu	v0,v1,v0
bfc06de4:	24420004 	addiu	v0,v0,4
bfc06de8:	afa20014 	sw	v0,20(sp)

	*(p_size_reg) = size_no;
bfc06dec:	8fa20014 	lw	v0,20(sp)
bfc06df0:	8fa30030 	lw	v1,48(sp)
bfc06df4:	ac430000 	sw	v1,0(v0)
	*(p_addr_reg) = soc_vir_to_phy_addr(cpu_addr) | MEMCTL_UNMAP_SEG_ENABLE;
bfc06df8:	8fa4002c 	lw	a0,44(sp)
bfc06dfc:	0ff01b58 	jal	bfc06d60 <soc_vir_to_phy_addr>
bfc06e00:	00000000 	nop
bfc06e04:	34430001 	ori	v1,v0,0x1
bfc06e08:	8fa20018 	lw	v0,24(sp)
bfc06e0c:	ac430000 	sw	v1,0(v0)
	
	return;
}
bfc06e10:	8fbf0024 	lw	ra,36(sp)
bfc06e14:	27bd0028 	addiu	sp,sp,40
bfc06e18:	03e00008 	jr	ra
bfc06e1c:	00000000 	nop

bfc06e20 <memctl_unmapping>:
 * Note:
 * 	None 
 */
int memctl_unmapping(unsigned int segNo, unsigned int cpu_addr, \
		   unsigned int unmap_size_no)
{
bfc06e20:	27bdffe0 	addiu	sp,sp,-32
bfc06e24:	afbf001c 	sw	ra,28(sp)
bfc06e28:	afa40020 	sw	a0,32(sp)
bfc06e2c:	afa50024 	sw	a1,36(sp)
bfc06e30:	afa60028 	sw	a2,40(sp)
	unsigned int size_in_bytes;
	int          ret_code;

	ret_code = 0;
bfc06e34:	afa00010 	sw	zero,16(sp)

	/* Parameter checking */
	if(segNo >= MEMCTL_UNMAP_REG_SET_NUM){
bfc06e38:	8fa20020 	lw	v0,32(sp)
bfc06e3c:	2c420004 	sltiu	v0,v0,4
bfc06e40:	14400003 	bnez	v0,bfc06e50 <memctl_unmapping+0x30>
bfc06e44:	00000000 	nop
		_memctl_debug_printf("Function:%s , line %d", __FUNCTION__, __LINE__);
		_memctl_debug_printf("Wrong memctl unmapping segment number(%d), only support (0 ~ %d)\n", segNo, (MEMCTL_UNMAP_REG_SET_NUM-1));
		ret_code = -1;
bfc06e48:	2402ffff 	li	v0,-1
bfc06e4c:	afa20010 	sw	v0,16(sp)
	}
	/* Parameter checking */
	if(unmap_size_no > MEMCTL_UNMAP_SIZE_1MB){
bfc06e50:	8fa20028 	lw	v0,40(sp)
bfc06e54:	2c42000e 	sltiu	v0,v0,14
bfc06e58:	14400003 	bnez	v0,bfc06e68 <memctl_unmapping+0x48>
bfc06e5c:	00000000 	nop
		_memctl_debug_printf("Function:%s , line %d", __FUNCTION__, __LINE__);
		_memctl_debug_printf("Wrong unmap_size_no: %d\n");
		ret_code = -1;
bfc06e60:	2402ffff 	li	v0,-1
bfc06e64:	afa20010 	sw	v0,16(sp)
	}


	/* Alignmemt checking */
	size_in_bytes = 128 << unmap_size_no;
bfc06e68:	8fa20028 	lw	v0,40(sp)
bfc06e6c:	24030080 	li	v1,128
bfc06e70:	00431004 	sllv	v0,v1,v0
bfc06e74:	afa20014 	sw	v0,20(sp)

	if((cpu_addr % size_in_bytes) != 0){
bfc06e78:	8fa30024 	lw	v1,36(sp)
bfc06e7c:	8fa20014 	lw	v0,20(sp)
bfc06e80:	0062001b 	divu	zero,v1,v0
bfc06e84:	004001f4 	teq	v0,zero,0x7
bfc06e88:	00001010 	mfhi	v0
bfc06e8c:	10400003 	beqz	v0,bfc06e9c <memctl_unmapping+0x7c>
bfc06e90:	00000000 	nop
		_memctl_debug_printf("Function:%s , line %d", __FUNCTION__, __LINE__);
		_memctl_debug_printf("cpu_addr(0x%08x) isn't nature aligned with unmap size(0x%08x):\n", \
			cpu_addr, size_in_bytes);
		ret_code = -1;
bfc06e94:	2402ffff 	li	v0,-1
bfc06e98:	afa20010 	sw	v0,16(sp)


	/* Overlapping checking */


	if(ret_code >= 0){
bfc06e9c:	8fa20010 	lw	v0,16(sp)
bfc06ea0:	04400006 	bltz	v0,bfc06ebc <memctl_unmapping+0x9c>
bfc06ea4:	00000000 	nop
		__memctl_unmapping(segNo, cpu_addr, unmap_size_no);
bfc06ea8:	8fa40020 	lw	a0,32(sp)
bfc06eac:	8fa50024 	lw	a1,36(sp)
bfc06eb0:	8fa60028 	lw	a2,40(sp)
bfc06eb4:	0ff01b5f 	jal	bfc06d7c <__memctl_unmapping>
bfc06eb8:	00000000 	nop
	}
	return ret_code;
bfc06ebc:	8fa20010 	lw	v0,16(sp)

}
bfc06ec0:	8fbf001c 	lw	ra,28(sp)
bfc06ec4:	27bd0020 	addiu	sp,sp,32
bfc06ec8:	03e00008 	jr	ra
bfc06ecc:	00000000 	nop

bfc06ed0 <__sram_unmapping>:



/* Real SRAM controller setting function. */
void __sram_unmapping(unsigned int segNo)
{
bfc06ed0:	27bdffd8 	addiu	sp,sp,-40
bfc06ed4:	afbf0024 	sw	ra,36(sp)
bfc06ed8:	afa40028 	sw	a0,40(sp)
	unsigned int reg_base_addr;
	volatile unsigned int *p_addr_reg;
	volatile unsigned int *p_size_reg;
	volatile unsigned int *p_base_reg;

	if(_is_Master_CPU()){
bfc06edc:	0ff01b55 	jal	bfc06d54 <_is_Master_CPU>
bfc06ee0:	00000000 	nop
bfc06ee4:	10400006 	beqz	v0,bfc06f00 <__sram_unmapping+0x30>
bfc06ee8:	00000000 	nop
		reg_base_addr = C0SRAMSAR_REG_ADDR;
bfc06eec:	3c02b800 	lui	v0,0xb800
bfc06ef0:	34424000 	ori	v0,v0,0x4000
bfc06ef4:	afa2001c 	sw	v0,28(sp)
bfc06ef8:	0bf01bc3 	j	bfc06f0c <__sram_unmapping+0x3c>
bfc06efc:	00000000 	nop
	}else{
		reg_base_addr = C1SRAMSAR_REG_ADDR;
bfc06f00:	3c02b800 	lui	v0,0xb800
bfc06f04:	34424040 	ori	v0,v0,0x4040
bfc06f08:	afa2001c 	sw	v0,28(sp)
	}

	p_addr_reg = (unsigned int *)(reg_base_addr + (SRAM_REG_SET_SIZE*segNo));
bfc06f0c:	8fa20028 	lw	v0,40(sp)
bfc06f10:	00021900 	sll	v1,v0,0x4
bfc06f14:	8fa2001c 	lw	v0,28(sp)
bfc06f18:	00621021 	addu	v0,v1,v0
bfc06f1c:	afa20018 	sw	v0,24(sp)

	*(p_addr_reg) = *(p_addr_reg) & (~SRAM_SEG_ENABLE);
bfc06f20:	8fa20018 	lw	v0,24(sp)
bfc06f24:	8c430000 	lw	v1,0(v0)
bfc06f28:	2402fffe 	li	v0,-2
bfc06f2c:	00621824 	and	v1,v1,v0
bfc06f30:	8fa20018 	lw	v0,24(sp)
bfc06f34:	ac430000 	sw	v1,0(v0)
	
	return;
}
bfc06f38:	8fbf0024 	lw	ra,36(sp)
bfc06f3c:	27bd0028 	addiu	sp,sp,40
bfc06f40:	03e00008 	jr	ra
bfc06f44:	00000000 	nop

bfc06f48 <sram_unmapping>:


int sram_unmapping(unsigned int segNo)
{
bfc06f48:	27bdffe0 	addiu	sp,sp,-32
bfc06f4c:	afbf001c 	sw	ra,28(sp)
bfc06f50:	afa40020 	sw	a0,32(sp)
	int ret_code;

	ret_code = 0;
bfc06f54:	afa00010 	sw	zero,16(sp)

	if(segNo >= SRAM_REG_SET_NUM){
bfc06f58:	8fa20020 	lw	v0,32(sp)
bfc06f5c:	2c420004 	sltiu	v0,v0,4
bfc06f60:	14400004 	bnez	v0,bfc06f74 <sram_unmapping+0x2c>
bfc06f64:	00000000 	nop
		_memctl_debug_printf("Wrong SRAM segment number(%d), only support (0 ~ %d)\n", segNo, (SRAM_REG_SET_NUM-1));
		return -1;
bfc06f68:	2402ffff 	li	v0,-1
bfc06f6c:	0bf01be4 	j	bfc06f90 <sram_unmapping+0x48>
bfc06f70:	00000000 	nop
	}
	
	if(ret_code >= 0)
bfc06f74:	8fa20010 	lw	v0,16(sp)
bfc06f78:	04400004 	bltz	v0,bfc06f8c <sram_unmapping+0x44>
bfc06f7c:	00000000 	nop
		__sram_unmapping(segNo);
bfc06f80:	8fa40020 	lw	a0,32(sp)
bfc06f84:	0ff01bb4 	jal	bfc06ed0 <__sram_unmapping>
bfc06f88:	00000000 	nop


	return ret_code;
bfc06f8c:	8fa20010 	lw	v0,16(sp)

}
bfc06f90:	8fbf001c 	lw	ra,28(sp)
bfc06f94:	27bd0020 	addiu	sp,sp,32
bfc06f98:	03e00008 	jr	ra
bfc06f9c:	00000000 	nop

bfc06fa0 <__memctl_unmapping_disable>:



/* Real Memory controller setting function. */
void __memctl_unmapping_disable(unsigned int segNo)
{
bfc06fa0:	27bdffe0 	addiu	sp,sp,-32
bfc06fa4:	afbf001c 	sw	ra,28(sp)
bfc06fa8:	afa40020 	sw	a0,32(sp)
	unsigned int reg_base_addr;
	volatile unsigned int *p_addr_reg;

	if(_is_Master_CPU()){
bfc06fac:	0ff01b55 	jal	bfc06d54 <_is_Master_CPU>
bfc06fb0:	00000000 	nop
bfc06fb4:	10400006 	beqz	v0,bfc06fd0 <__memctl_unmapping_disable+0x30>
bfc06fb8:	00000000 	nop
		reg_base_addr = C0UMSAR_REG_ADDR;
bfc06fbc:	3c02b800 	lui	v0,0xb800
bfc06fc0:	34421300 	ori	v0,v0,0x1300
bfc06fc4:	afa20014 	sw	v0,20(sp)
bfc06fc8:	0bf01bf7 	j	bfc06fdc <__memctl_unmapping_disable+0x3c>
bfc06fcc:	00000000 	nop
	}else{
		reg_base_addr = C1UMSAR_REG_ADDR;
bfc06fd0:	3c02b800 	lui	v0,0xb800
bfc06fd4:	34421340 	ori	v0,v0,0x1340
bfc06fd8:	afa20014 	sw	v0,20(sp)
	}

	p_addr_reg = (unsigned int *)(reg_base_addr + (MEMCTL_UNMAP_REG_SET_SIZE*segNo));
bfc06fdc:	8fa20020 	lw	v0,32(sp)
bfc06fe0:	00021900 	sll	v1,v0,0x4
bfc06fe4:	8fa20014 	lw	v0,20(sp)
bfc06fe8:	00621021 	addu	v0,v1,v0
bfc06fec:	afa20010 	sw	v0,16(sp)

	*(p_addr_reg) = *(p_addr_reg) & (~MEMCTL_UNMAP_SEG_ENABLE);
bfc06ff0:	8fa20010 	lw	v0,16(sp)
bfc06ff4:	8c430000 	lw	v1,0(v0)
bfc06ff8:	2402fffe 	li	v0,-2
bfc06ffc:	00621824 	and	v1,v1,v0
bfc07000:	8fa20010 	lw	v0,16(sp)
bfc07004:	ac430000 	sw	v1,0(v0)
	
	return;
}
bfc07008:	8fbf001c 	lw	ra,28(sp)
bfc0700c:	27bd0020 	addiu	sp,sp,32
bfc07010:	03e00008 	jr	ra
bfc07014:	00000000 	nop

bfc07018 <memctl_unmapping_disable>:
 *	<  0: Fail
 * Note:
 * 	None 
 */
int memctl_unmapping_disable(unsigned int segNo)
{
bfc07018:	27bdffe0 	addiu	sp,sp,-32
bfc0701c:	afbf001c 	sw	ra,28(sp)
bfc07020:	afa40020 	sw	a0,32(sp)
	unsigned int size_in_bytes;
	int          ret_code;

	ret_code = 0;
bfc07024:	afa00010 	sw	zero,16(sp)

	/* Parameter checking */
	if(segNo >= MEMCTL_UNMAP_REG_SET_NUM){
bfc07028:	8fa20020 	lw	v0,32(sp)
bfc0702c:	2c420004 	sltiu	v0,v0,4
bfc07030:	14400003 	bnez	v0,bfc07040 <memctl_unmapping_disable+0x28>
bfc07034:	00000000 	nop
		_memctl_debug_printf("Function:%s , line %d", __FUNCTION__, __LINE__);
		_memctl_debug_printf("Wrong memctl unmapping segment number(%d), only support (0 ~ %d)\n", segNo, (MEMCTL_UNMAP_REG_SET_NUM-1));
		ret_code = -1;
bfc07038:	2402ffff 	li	v0,-1
bfc0703c:	afa20010 	sw	v0,16(sp)
	}

	/* Overlapping checking */


	if(ret_code >= 0){
bfc07040:	8fa20010 	lw	v0,16(sp)
bfc07044:	04400004 	bltz	v0,bfc07058 <memctl_unmapping_disable+0x40>
bfc07048:	00000000 	nop
		__memctl_unmapping_disable(segNo);
bfc0704c:	8fa40020 	lw	a0,32(sp)
bfc07050:	0ff01be8 	jal	bfc06fa0 <__memctl_unmapping_disable>
bfc07054:	00000000 	nop
	}
	return ret_code;
bfc07058:	8fa20010 	lw	v0,16(sp)

}
bfc0705c:	8fbf001c 	lw	ra,28(sp)
bfc07060:	27bd0020 	addiu	sp,sp,32
bfc07064:	03e00008 	jr	ra
bfc07068:	00000000 	nop

bfc0706c <memctlc_dram_phy_reset>:
#define MEMCTL_DRAM_MAX_BKS	(8)
#define MEMCTL_DRAM_MIN_CS	(1)
#define MEMCTL_DRAM_MAX_CS	(2)

void memctlc_dram_phy_reset(void)
{
bfc0706c:	27bdfff8 	addiu	sp,sp,-8
	//return;//RTL8198C
	volatile unsigned int *phy_ctl;

	phy_ctl = (volatile unsigned int *)MEMCTL_PHY_CTL_ADDR;
bfc07070:	3c02b800 	lui	v0,0xb800
bfc07074:	34421500 	ori	v0,v0,0x1500
bfc07078:	afa20000 	sw	v0,0(sp)
	*phy_ctl = *phy_ctl & ((unsigned int) 0xFFFFFFEF);
bfc0707c:	8fa20000 	lw	v0,0(sp)
bfc07080:	8c430000 	lw	v1,0(v0)
bfc07084:	2402ffef 	li	v0,-17
bfc07088:	00621824 	and	v1,v1,v0
bfc0708c:	8fa20000 	lw	v0,0(sp)
bfc07090:	ac430000 	sw	v1,0(v0)
	*phy_ctl = *phy_ctl | ((unsigned int) 0x10);
bfc07094:	8fa20000 	lw	v0,0(sp)
bfc07098:	8c420000 	lw	v0,0(v0)
bfc0709c:	34430010 	ori	v1,v0,0x10
bfc070a0:	8fa20000 	lw	v0,0(sp)
bfc070a4:	ac430000 	sw	v1,0(v0)
	//_memctl_debug_printf("memctlc_dram_phy_reset: 0x%x(0x%x)\n", phy_ctl, *phy_ctl);

	return;
}
bfc070a8:	27bd0008 	addiu	sp,sp,8
bfc070ac:	03e00008 	jr	ra
bfc070b0:	00000000 	nop

bfc070b4 <memctlc_ddr2_dll_reset>:

#define DLL_delay_time 0x10000
void memctlc_ddr2_dll_reset(void)
{
bfc070b4:	27bdffb8 	addiu	sp,sp,-72
bfc070b8:	afbf0044 	sw	ra,68(sp)
	volatile unsigned int delay_time;
	unsigned int dtr[3], mr[4];
	unsigned int odt_value;


	odt_value=50;//for RTL8198C ,DQ weak driving needed
bfc070bc:	24020032 	li	v0,50
bfc070c0:	afa20010 	sw	v0,16(sp)

	//odt_value=150;//for RTL8198C ,Solved DQ slew falling rate issue

	dmcr = (volatile unsigned int *)DMCR;
bfc070c4:	3c02b800 	lui	v0,0xb800
bfc070c8:	3442101c 	ori	v0,v0,0x101c
bfc070cc:	afa20018 	sw	v0,24(sp)
	dtr0 = (volatile unsigned int *)DTR0;
bfc070d0:	3c02b800 	lui	v0,0xb800
bfc070d4:	34421008 	ori	v0,v0,0x1008
bfc070d8:	afa20014 	sw	v0,20(sp)
	
	dtr[0]= *dtr0;
bfc070dc:	8fa20014 	lw	v0,20(sp)
bfc070e0:	8c420000 	lw	v0,0(v0)
bfc070e4:	afa20020 	sw	v0,32(sp)
	dtr[1]= *(dtr0 + 1);
bfc070e8:	8fa20014 	lw	v0,20(sp)
bfc070ec:	24420004 	addiu	v0,v0,4
bfc070f0:	8c420000 	lw	v0,0(v0)
bfc070f4:	afa20024 	sw	v0,36(sp)
	dtr[2]= *(dtr0 + 2);
bfc070f8:	8fa20014 	lw	v0,20(sp)
bfc070fc:	24420008 	addiu	v0,v0,8
bfc07100:	8c420000 	lw	v0,0(v0)
bfc07104:	afa20028 	sw	v0,40(sp)

	//_memctl_debug_printf("memctlc_ddr2_dll_reset: Set odt_value RTT=%d ohm\n", odt_value);
	if(1){
		switch (odt_value){
bfc07108:	8fa20010 	lw	v0,16(sp)
bfc0710c:	24030032 	li	v1,50
bfc07110:	10430013 	beq	v0,v1,bfc07160 <memctlc_ddr2_dll_reset+0xac>
bfc07114:	00000000 	nop
bfc07118:	2c430033 	sltiu	v1,v0,51
bfc0711c:	10600005 	beqz	v1,bfc07134 <memctlc_ddr2_dll_reset+0x80>
bfc07120:	00000000 	nop
bfc07124:	1040000b 	beqz	v0,bfc07154 <memctlc_ddr2_dll_reset+0xa0>
bfc07128:	00000000 	nop
bfc0712c:	0bf01c64 	j	bfc07190 <memctlc_ddr2_dll_reset+0xdc>
bfc07130:	00000000 	nop
bfc07134:	2403004b 	li	v1,75
bfc07138:	1043000d 	beq	v0,v1,bfc07170 <memctlc_ddr2_dll_reset+0xbc>
bfc0713c:	00000000 	nop
bfc07140:	24030096 	li	v1,150
bfc07144:	1043000e 	beq	v0,v1,bfc07180 <memctlc_ddr2_dll_reset+0xcc>
bfc07148:	00000000 	nop
bfc0714c:	0bf01c64 	j	bfc07190 <memctlc_ddr2_dll_reset+0xdc>
bfc07150:	00000000 	nop
			case 0:
				odt_value = DDR2_EMR1_RTT_DIS;
bfc07154:	afa00010 	sw	zero,16(sp)
				break;
bfc07158:	0bf01c66 	j	bfc07198 <memctlc_ddr2_dll_reset+0xe4>
bfc0715c:	00000000 	nop
			case 50:
				odt_value = DDR2_EMR1_RTT_50;
bfc07160:	24020044 	li	v0,68
bfc07164:	afa20010 	sw	v0,16(sp)
				break;
bfc07168:	0bf01c66 	j	bfc07198 <memctlc_ddr2_dll_reset+0xe4>
bfc0716c:	00000000 	nop
			case 75:
				odt_value = DDR2_EMR1_RTT_75;
bfc07170:	24020004 	li	v0,4
bfc07174:	afa20010 	sw	v0,16(sp)
				break;
bfc07178:	0bf01c66 	j	bfc07198 <memctlc_ddr2_dll_reset+0xe4>
bfc0717c:	00000000 	nop
			case 150:
				odt_value = DDR2_EMR1_RTT_150;
bfc07180:	24020040 	li	v0,64
bfc07184:	afa20010 	sw	v0,16(sp)
				break;
bfc07188:	0bf01c66 	j	bfc07198 <memctlc_ddr2_dll_reset+0xe4>
bfc0718c:	00000000 	nop
			default: /* 50 */
				odt_value = DDR2_EMR1_RTT_50;
bfc07190:	24020044 	li	v0,68
bfc07194:	afa20010 	sw	v0,16(sp)
				break;
		}
	}else{
		odt_value = DDR2_EMR1_RTT_75;
	}
	_DTR_DDR2_MRS_setting(dtr, mr);
bfc07198:	27a30020 	addiu	v1,sp,32
bfc0719c:	27a2002c 	addiu	v0,sp,44
bfc071a0:	00602021 	move	a0,v1
bfc071a4:	00402821 	move	a1,v0
bfc071a8:	0ff00f5f 	jal	bfc03d7c <_DTR_DDR2_MRS_setting>
bfc071ac:	00000000 	nop

	mr[1] = mr[1] | odt_value;
bfc071b0:	8fa30030 	lw	v1,48(sp)
bfc071b4:	8fa20010 	lw	v0,16(sp)
bfc071b8:	00621025 	or	v0,v1,v0
bfc071bc:	afa20030 	sw	v0,48(sp)

	/* 1. Disable DLL */
	*dmcr = mr[1] | DDR2_EMR1_DLL_DIS;
bfc071c0:	8fa20030 	lw	v0,48(sp)
bfc071c4:	34430001 	ori	v1,v0,0x1
bfc071c8:	8fa20018 	lw	v0,24(sp)
bfc071cc:	ac430000 	sw	v1,0(v0)
	while(*dmcr & DMCR_MRS_BUSY);
bfc071d0:	8fa20018 	lw	v0,24(sp)
bfc071d4:	8c420000 	lw	v0,0(v0)
bfc071d8:	0440fffd 	bltz	v0,bfc071d0 <memctlc_ddr2_dll_reset+0x11c>
bfc071dc:	00000000 	nop

	/* 2. Enable DLL */
	*dmcr = mr[1] & (~DDR2_EMR1_DLL_DIS);
bfc071e0:	8fa30030 	lw	v1,48(sp)
bfc071e4:	2402fffe 	li	v0,-2
bfc071e8:	00621824 	and	v1,v1,v0
bfc071ec:	8fa20018 	lw	v0,24(sp)
bfc071f0:	ac430000 	sw	v1,0(v0)
	while(*dmcr & DMCR_MRS_BUSY);
bfc071f4:	8fa20018 	lw	v0,24(sp)
bfc071f8:	8c420000 	lw	v0,0(v0)
bfc071fc:	0440fffd 	bltz	v0,bfc071f4 <memctlc_ddr2_dll_reset+0x140>
bfc07200:	00000000 	nop
	
	/* 3. Reset DLL */
	*dmcr = mr[0] | DDR2_MR_DLL_RESET_YES ;
bfc07204:	8fa2002c 	lw	v0,44(sp)
bfc07208:	34430100 	ori	v1,v0,0x100
bfc0720c:	8fa20018 	lw	v0,24(sp)
bfc07210:	ac430000 	sw	v1,0(v0)
	while(*dmcr & DMCR_MRS_BUSY);
bfc07214:	8fa20018 	lw	v0,24(sp)
bfc07218:	8c420000 	lw	v0,0(v0)
bfc0721c:	0440fffd 	bltz	v0,bfc07214 <memctlc_ddr2_dll_reset+0x160>
bfc07220:	00000000 	nop

	/* 4. Waiting 512 DRAM clock for tDLLk */
	delay_time = DLL_delay_time ;
bfc07224:	3c020001 	lui	v0,0x1
bfc07228:	afa2001c 	sw	v0,28(sp)
	//delay_time = 0x2000;
	while(delay_time--);
bfc0722c:	8fa2001c 	lw	v0,28(sp)
bfc07230:	0002182b 	sltu	v1,zero,v0
bfc07234:	306300ff 	andi	v1,v1,0xff
bfc07238:	2442ffff 	addiu	v0,v0,-1
bfc0723c:	afa2001c 	sw	v0,28(sp)
bfc07240:	1460fffa 	bnez	v1,bfc0722c <memctlc_ddr2_dll_reset+0x178>
bfc07244:	00000000 	nop

	/* 5. Set EMR2 */
	*dmcr = mr[2];
bfc07248:	8fa30034 	lw	v1,52(sp)
bfc0724c:	8fa20018 	lw	v0,24(sp)
bfc07250:	ac430000 	sw	v1,0(v0)
	while(*dmcr & DMCR_MRS_BUSY);
bfc07254:	8fa20018 	lw	v0,24(sp)
bfc07258:	8c420000 	lw	v0,0(v0)
bfc0725c:	0440fffd 	bltz	v0,bfc07254 <memctlc_ddr2_dll_reset+0x1a0>
bfc07260:	00000000 	nop
	//memctlc_dram_phy_reset();

	

	return;
}
bfc07264:	8fbf0044 	lw	ra,68(sp)
bfc07268:	27bd0048 	addiu	sp,sp,72
bfc0726c:	03e00008 	jr	ra
bfc07270:	00000000 	nop

bfc07274 <_memctl_delay_clkm_cycles>:


void _memctl_delay_clkm_cycles(unsigned int delay_cycles)
{
bfc07274:	27bdfff8 	addiu	sp,sp,-8
bfc07278:	afa40008 	sw	a0,8(sp)
	volatile unsigned int *mcr, read_tmp;

	mcr = (unsigned int *)MCR;
bfc0727c:	3c02b800 	lui	v0,0xb800
bfc07280:	34421000 	ori	v0,v0,0x1000
bfc07284:	afa20000 	sw	v0,0(sp)

	while(delay_cycles--){
bfc07288:	0bf01ca7 	j	bfc0729c <_memctl_delay_clkm_cycles+0x28>
bfc0728c:	00000000 	nop
		read_tmp = *mcr;
bfc07290:	8fa20000 	lw	v0,0(sp)
bfc07294:	8c420000 	lw	v0,0(v0)
bfc07298:	afa20004 	sw	v0,4(sp)
{
	volatile unsigned int *mcr, read_tmp;

	mcr = (unsigned int *)MCR;

	while(delay_cycles--){
bfc0729c:	8fa20008 	lw	v0,8(sp)
bfc072a0:	0002102b 	sltu	v0,zero,v0
bfc072a4:	304200ff 	andi	v0,v0,0xff
bfc072a8:	8fa30008 	lw	v1,8(sp)
bfc072ac:	2463ffff 	addiu	v1,v1,-1
bfc072b0:	afa30008 	sw	v1,8(sp)
bfc072b4:	1440fff6 	bnez	v0,bfc07290 <_memctl_delay_clkm_cycles+0x1c>
bfc072b8:	00000000 	nop
		read_tmp = *mcr;
	}

	return;
}
bfc072bc:	27bd0008 	addiu	sp,sp,8
bfc072c0:	03e00008 	jr	ra
bfc072c4:	00000000 	nop

bfc072c8 <memctlc_DDR3_ZQ_long_calibration>:

//------------------------------------------------------------------

void memctlc_DDR3_ZQ_long_calibration(void)
{
bfc072c8:	27bdffe0 	addiu	sp,sp,-32
bfc072cc:	afbf001c 	sw	ra,28(sp)
	volatile unsigned int *ddr3_zqccr;
	ddr3_zqccr = (volatile unsigned int *)D3ZQCCR;
bfc072d0:	3c02b800 	lui	v0,0xb800
bfc072d4:	34421080 	ori	v0,v0,0x1080
bfc072d8:	afa20010 	sw	v0,16(sp)

	*ddr3_zqccr |= (1<<31);
bfc072dc:	8fa20010 	lw	v0,16(sp)
bfc072e0:	8c430000 	lw	v1,0(v0)
bfc072e4:	3c028000 	lui	v0,0x8000
bfc072e8:	00621825 	or	v1,v1,v0
bfc072ec:	8fa20010 	lw	v0,16(sp)
bfc072f0:	ac430000 	sw	v1,0(v0)
	_memctl_delay_clkm_cycles(DLL_delay_time);
bfc072f4:	3c040001 	lui	a0,0x1
bfc072f8:	0ff01c9d 	jal	bfc07274 <_memctl_delay_clkm_cycles>
bfc072fc:	00000000 	nop
	while(*ddr3_zqccr & (1<<31));
bfc07300:	8fa20010 	lw	v0,16(sp)
bfc07304:	8c420000 	lw	v0,0(v0)
bfc07308:	0440fffd 	bltz	v0,bfc07300 <memctlc_DDR3_ZQ_long_calibration+0x38>
bfc0730c:	00000000 	nop

	return;

}
bfc07310:	8fbf001c 	lw	ra,28(sp)
bfc07314:	27bd0020 	addiu	sp,sp,32
bfc07318:	03e00008 	jr	ra
bfc0731c:	00000000 	nop

bfc07320 <memctlc_ddr3_dll_reset>:

#else


void memctlc_ddr3_dll_reset(void)
{
bfc07320:	27bdffb0 	addiu	sp,sp,-80
bfc07324:	afbf004c 	sw	ra,76(sp)
	volatile unsigned int *dmcr, *dtr0;
	volatile unsigned int delay_time;
	unsigned int dtr[3], mr[4];
	unsigned int rtt_nom_div_value, rtt_wr_div_value, dic_div_value;

	dmcr = (volatile unsigned int *)DMCR;
bfc07328:	3c02b800 	lui	v0,0xb800
bfc0732c:	3442101c 	ori	v0,v0,0x101c
bfc07330:	afa20020 	sw	v0,32(sp)
	dtr0 = (volatile unsigned int *)DTR0;
bfc07334:	3c02b800 	lui	v0,0xb800
bfc07338:	34421008 	ori	v0,v0,0x1008
bfc0733c:	afa2001c 	sw	v0,28(sp)
	
	dtr[0]= *dtr0;
bfc07340:	8fa2001c 	lw	v0,28(sp)
bfc07344:	8c420000 	lw	v0,0(v0)
bfc07348:	afa20028 	sw	v0,40(sp)
	dtr[1]= *(dtr0 + 1);
bfc0734c:	8fa2001c 	lw	v0,28(sp)
bfc07350:	24420004 	addiu	v0,v0,4
bfc07354:	8c420000 	lw	v0,0(v0)
bfc07358:	afa2002c 	sw	v0,44(sp)
	dtr[2]= *(dtr0 + 2);
bfc0735c:	8fa2001c 	lw	v0,28(sp)
bfc07360:	24420008 	addiu	v0,v0,8
bfc07364:	8c420000 	lw	v0,0(v0)
bfc07368:	afa20030 	sw	v0,48(sp)
	


	#if 1

	REG32(0xb800101c)=(1<<24);//disable DRAM refresh 
bfc0736c:	3c02b800 	lui	v0,0xb800
bfc07370:	3442101c 	ori	v0,v0,0x101c
bfc07374:	3c030100 	lui	v1,0x100
bfc07378:	ac430000 	sw	v1,0(v0)
	while(*dmcr & DMCR_MRS_BUSY);
bfc0737c:	8fa20020 	lw	v0,32(sp)
bfc07380:	8c420000 	lw	v0,0(v0)
bfc07384:	0440fffd 	bltz	v0,bfc0737c <memctlc_ddr3_dll_reset+0x5c>
bfc07388:	00000000 	nop
	/* Disable DRAM refresh operation */
	//REG32(0xb800101c)= (REG32(0xb800101c) | DMCR_DIS_DRAM_REF_MASK) & (~DMCR_MR_MODE_EN_MASK);
	//_memctl_debug_printf("\n\n001-Disable DRAM refresh activity \n");
	delay_time = DLL_delay_time; //about 1us
bfc0738c:	3c020001 	lui	v0,0x1
bfc07390:	afa20024 	sw	v0,36(sp)
	while(delay_time--);
bfc07394:	8fa20024 	lw	v0,36(sp)
bfc07398:	0002182b 	sltu	v1,zero,v0
bfc0739c:	306300ff 	andi	v1,v1,0xff
bfc073a0:	2442ffff 	addiu	v0,v0,-1
bfc073a4:	afa20024 	sw	v0,36(sp)
bfc073a8:	1460fffa 	bnez	v1,bfc07394 <memctlc_ddr3_dll_reset+0x74>
bfc073ac:	00000000 	nop

	//_memctl_debug_printf("\n\n002-Enable DRAM power down mode  ->CKE low \n");
	REG32(0xb8001040)|=(1<<28);//Enable DRAM self refresh mode  ->CKE low
bfc073b0:	3c02b800 	lui	v0,0xb800
bfc073b4:	34421040 	ori	v0,v0,0x1040
bfc073b8:	3c03b800 	lui	v1,0xb800
bfc073bc:	34631040 	ori	v1,v1,0x1040
bfc073c0:	8c640000 	lw	a0,0(v1)
bfc073c4:	3c031000 	lui	v1,0x1000
bfc073c8:	00831825 	or	v1,a0,v1
bfc073cc:	ac430000 	sw	v1,0(v0)
	//_memctl_debug_printf("\n005-MPMR normal mode ->CKE low,0xb8001040=(0x%x)\n",REG32(0xb8001040));
	//delay_time = 0x10000;//about 1000us
	//	while(delay_time--);

	while(*dmcr & DMCR_MRS_BUSY);	
bfc073d0:	8fa20020 	lw	v0,32(sp)
bfc073d4:	8c420000 	lw	v0,0(v0)
bfc073d8:	0440fffd 	bltz	v0,bfc073d0 <memctlc_ddr3_dll_reset+0xb0>
bfc073dc:	00000000 	nop
	/*Toggle DDR3 reset pin*/
	//_memctl_debug_printf("\n\n003-Toggle DDR3 reset pin low\n");
	REG32(0xb8001800)&=0xBFFFFFFF; // reset low
bfc073e0:	3c02b800 	lui	v0,0xb800
bfc073e4:	34421800 	ori	v0,v0,0x1800
bfc073e8:	3c03b800 	lui	v1,0xb800
bfc073ec:	34631800 	ori	v1,v1,0x1800
bfc073f0:	8c640000 	lw	a0,0(v1)
bfc073f4:	3c03bfff 	lui	v1,0xbfff
bfc073f8:	3463ffff 	ori	v1,v1,0xffff
bfc073fc:	00831824 	and	v1,a0,v1
bfc07400:	ac430000 	sw	v1,0(v0)
	while(*dmcr & DMCR_MRS_BUSY);
bfc07404:	8fa20020 	lw	v0,32(sp)
bfc07408:	8c420000 	lw	v0,0(v0)
bfc0740c:	0440fffd 	bltz	v0,bfc07404 <memctlc_ddr3_dll_reset+0xe4>
bfc07410:	00000000 	nop
	//delay_time = 0x8000;//about 500us
	delay_time = DLL_delay_time;//about 1000us
bfc07414:	3c020001 	lui	v0,0x1
bfc07418:	afa20024 	sw	v0,36(sp)
		while(delay_time--);
bfc0741c:	8fa20024 	lw	v0,36(sp)
bfc07420:	0002182b 	sltu	v1,zero,v0
bfc07424:	306300ff 	andi	v1,v1,0xff
bfc07428:	2442ffff 	addiu	v0,v0,-1
bfc0742c:	afa20024 	sw	v0,36(sp)
bfc07430:	1460fffa 	bnez	v1,bfc0741c <memctlc_ddr3_dll_reset+0xfc>
bfc07434:	00000000 	nop

	/*Toggle DDR3 reset pin*/
	REG32(0xb8001800)|=(1<<30); // DDR3 reset high
bfc07438:	3c02b800 	lui	v0,0xb800
bfc0743c:	34421800 	ori	v0,v0,0x1800
bfc07440:	3c03b800 	lui	v1,0xb800
bfc07444:	34631800 	ori	v1,v1,0x1800
bfc07448:	8c640000 	lw	a0,0(v1)
bfc0744c:	3c034000 	lui	v1,0x4000
bfc07450:	00831825 	or	v1,a0,v1
bfc07454:	ac430000 	sw	v1,0(v0)
	while(*dmcr & DMCR_MRS_BUSY);
bfc07458:	8fa20020 	lw	v0,32(sp)
bfc0745c:	8c420000 	lw	v0,0(v0)
bfc07460:	0440fffd 	bltz	v0,bfc07458 <memctlc_ddr3_dll_reset+0x138>
bfc07464:	00000000 	nop
	//_memctl_debug_printf("004-Toggle DDR3 reset pin high\n\n");

////////////////////error///////////////////////////////////////
	delay_time = DLL_delay_time;//about 1000us
bfc07468:	3c020001 	lui	v0,0x1
bfc0746c:	afa20024 	sw	v0,36(sp)
	while(delay_time--);
bfc07470:	8fa20024 	lw	v0,36(sp)
bfc07474:	0002182b 	sltu	v1,zero,v0
bfc07478:	306300ff 	andi	v1,v1,0xff
bfc0747c:	2442ffff 	addiu	v0,v0,-1
bfc07480:	afa20024 	sw	v0,36(sp)
bfc07484:	1460fffa 	bnez	v1,bfc07470 <memctlc_ddr3_dll_reset+0x150>
bfc07488:	00000000 	nop

	
	REG32(0xb8001040)&=~(3<<28);//DDR3 MPMR normal mode ->CKE high
bfc0748c:	3c02b800 	lui	v0,0xb800
bfc07490:	34421040 	ori	v0,v0,0x1040
bfc07494:	3c03b800 	lui	v1,0xb800
bfc07498:	34631040 	ori	v1,v1,0x1040
bfc0749c:	8c640000 	lw	a0,0(v1)
bfc074a0:	3c03cfff 	lui	v1,0xcfff
bfc074a4:	3463ffff 	ori	v1,v1,0xffff
bfc074a8:	00831824 	and	v1,a0,v1
bfc074ac:	ac430000 	sw	v1,0(v0)
	while(*dmcr & DMCR_MRS_BUSY);
bfc074b0:	8fa20020 	lw	v0,32(sp)
bfc074b4:	8c420000 	lw	v0,0(v0)
bfc074b8:	0440fffd 	bltz	v0,bfc074b0 <memctlc_ddr3_dll_reset+0x190>
bfc074bc:	00000000 	nop
	//_memctl_debug_printf("004-Toggle DDR3 reset pi

	//_memctl_debug_printf("\n005-MPMR normal mode ->CKE high,0xb8001040=(0x%x)\n",REG32(0xb8001040));	
	delay_time = DLL_delay_time;//about 1000us
bfc074c0:	3c020001 	lui	v0,0x1
bfc074c4:	afa20024 	sw	v0,36(sp)
	while(delay_time--);
bfc074c8:	8fa20024 	lw	v0,36(sp)
bfc074cc:	0002182b 	sltu	v1,zero,v0
bfc074d0:	306300ff 	andi	v1,v1,0xff
bfc074d4:	2442ffff 	addiu	v0,v0,-1
bfc074d8:	afa20024 	sw	v0,36(sp)
bfc074dc:	1460fffa 	bnez	v1,bfc074c8 <memctlc_ddr3_dll_reset+0x1a8>
bfc074e0:	00000000 	nop
		_memctl_debug_printf("Toggle DDR3 reset pin high\n\n");
	
		
	#endif

	_DTR_DDR3_MRS_setting(dtr, mr);
bfc074e4:	27a30028 	addiu	v1,sp,40
bfc074e8:	27a20034 	addiu	v0,sp,52
bfc074ec:	00602021 	move	a0,v1
bfc074f0:	00402821 	move	a1,v0
bfc074f4:	0ff00e18 	jal	bfc03860 <_DTR_DDR3_MRS_setting>
bfc074f8:	00000000 	nop

	
	
	/* 1. Disable DLL */
	*dmcr = mr[1] | DDR3_EMR1_DLL_DIS;
bfc074fc:	8fa20038 	lw	v0,56(sp)
bfc07500:	34430001 	ori	v1,v0,0x1
bfc07504:	8fa20020 	lw	v0,32(sp)
bfc07508:	ac430000 	sw	v1,0(v0)
	while(*dmcr & DMCR_MRS_BUSY);
bfc0750c:	8fa20020 	lw	v0,32(sp)
bfc07510:	8c420000 	lw	v0,0(v0)
bfc07514:	0440fffd 	bltz	v0,bfc0750c <memctlc_ddr3_dll_reset+0x1ec>
bfc07518:	00000000 	nop
	


	/* 5. Set EMR2 */
	*dmcr = mr[2];
bfc0751c:	8fa3003c 	lw	v1,60(sp)
bfc07520:	8fa20020 	lw	v0,32(sp)
bfc07524:	ac430000 	sw	v1,0(v0)
	//_memctl_debug_printf("\nMR[2]=0x%x\n",   mr[2]  );	
	while(*dmcr & DMCR_MRS_BUSY);
bfc07528:	8fa20020 	lw	v0,32(sp)
bfc0752c:	8c420000 	lw	v0,0(v0)
bfc07530:	0440fffd 	bltz	v0,bfc07528 <memctlc_ddr3_dll_reset+0x208>
bfc07534:	00000000 	nop

	/* 6. Set EMR3 */
	*dmcr = mr[3];
bfc07538:	8fa30040 	lw	v1,64(sp)
bfc0753c:	8fa20020 	lw	v0,32(sp)
bfc07540:	ac430000 	sw	v1,0(v0)
	//_memctl_debug_printf("\nMR[3]=0x%x\n",   mr[3]  );	
	while(*dmcr & DMCR_MRS_BUSY);
bfc07544:	8fa20020 	lw	v0,32(sp)
bfc07548:	8c420000 	lw	v0,0(v0)
bfc0754c:	0440fffd 	bltz	v0,bfc07544 <memctlc_ddr3_dll_reset+0x224>
bfc07550:	00000000 	nop

		/* 2. Enable DLL */
	*dmcr = mr[1] & (~DDR3_EMR1_DLL_DIS);
bfc07554:	8fa30038 	lw	v1,56(sp)
bfc07558:	2402fffe 	li	v0,-2
bfc0755c:	00621824 	and	v1,v1,v0
bfc07560:	8fa20020 	lw	v0,32(sp)
bfc07564:	ac430000 	sw	v1,0(v0)

	//_memctl_debug_printf("\nMR[1]=0x%x\n", mr[1] & (~DDR3_EMR1_DLL_DIS));	
	//_memctl_debug_printf("\nEMR1=0x%x\n", REG32(DMCR));	
	while(*dmcr & DMCR_MRS_BUSY);
bfc07568:	8fa20020 	lw	v0,32(sp)
bfc0756c:	8c420000 	lw	v0,0(v0)
bfc07570:	0440fffd 	bltz	v0,bfc07568 <memctlc_ddr3_dll_reset+0x248>
bfc07574:	00000000 	nop

		/* 3. Reset DLL */
	*dmcr = mr[0] | DDR3_MR_DLL_RESET_YES ;
bfc07578:	8fa20034 	lw	v0,52(sp)
bfc0757c:	34430100 	ori	v1,v0,0x100
bfc07580:	8fa20020 	lw	v0,32(sp)
bfc07584:	ac430000 	sw	v1,0(v0)
	//_memctl_debug_printf("\nMR[0]=0x%x\n",  mr[0] | DDR3_MR_DLL_RESET_YES  );	
	while(*dmcr & DMCR_MRS_BUSY);
bfc07588:	8fa20020 	lw	v0,32(sp)
bfc0758c:	8c420000 	lw	v0,0(v0)
bfc07590:	0440fffd 	bltz	v0,bfc07588 <memctlc_ddr3_dll_reset+0x268>
bfc07594:	00000000 	nop

		/* 4. Waiting 200 clock cycles for tDLLk time */
	//delay_time = 0x800;
	delay_time = DLL_delay_time;
bfc07598:	3c020001 	lui	v0,0x1
bfc0759c:	afa20024 	sw	v0,36(sp)
	while(delay_time--);
bfc075a0:	8fa20024 	lw	v0,36(sp)
bfc075a4:	0002182b 	sltu	v1,zero,v0
bfc075a8:	306300ff 	andi	v1,v1,0xff
bfc075ac:	2442ffff 	addiu	v0,v0,-1
bfc075b0:	afa20024 	sw	v0,36(sp)
bfc075b4:	1460fffa 	bnez	v1,bfc075a0 <memctlc_ddr3_dll_reset+0x280>
bfc075b8:	00000000 	nop

	memctlc_DDR3_ZQ_long_calibration();
bfc075bc:	0ff01cb2 	jal	bfc072c8 <memctlc_DDR3_ZQ_long_calibration>
bfc075c0:	00000000 	nop


	delay_time = DLL_delay_time;
bfc075c4:	3c020001 	lui	v0,0x1
bfc075c8:	afa20024 	sw	v0,36(sp)
	while(delay_time--);
bfc075cc:	8fa20024 	lw	v0,36(sp)
bfc075d0:	0002182b 	sltu	v1,zero,v0
bfc075d4:	306300ff 	andi	v1,v1,0xff
bfc075d8:	2442ffff 	addiu	v0,v0,-1
bfc075dc:	afa20024 	sw	v0,36(sp)
bfc075e0:	1460fffa 	bnez	v1,bfc075cc <memctlc_ddr3_dll_reset+0x2ac>
bfc075e4:	00000000 	nop

	
	/* DDR3 Enable DRAM refresh operation */		
	//REG32(0xb800101c) = REG32(0xb800101c) &  (~DMCR_DIS_DRAM_REF_MASK) ;
	REG32(0xb800101c)&=~(1<<24);//enable DRAM refresh	
bfc075e8:	3c02b800 	lui	v0,0xb800
bfc075ec:	3442101c 	ori	v0,v0,0x101c
bfc075f0:	3c03b800 	lui	v1,0xb800
bfc075f4:	3463101c 	ori	v1,v1,0x101c
bfc075f8:	8c640000 	lw	a0,0(v1)
bfc075fc:	3c03feff 	lui	v1,0xfeff
bfc07600:	3463ffff 	ori	v1,v1,0xffff
bfc07604:	00831824 	and	v1,a0,v1
bfc07608:	ac430000 	sw	v1,0(v0)
	delay_time = DLL_delay_time;
bfc0760c:	3c020001 	lui	v0,0x1
bfc07610:	afa20024 	sw	v0,36(sp)
	while(delay_time--);
bfc07614:	8fa20024 	lw	v0,36(sp)
bfc07618:	0002182b 	sltu	v1,zero,v0
bfc0761c:	306300ff 	andi	v1,v1,0xff
bfc07620:	2442ffff 	addiu	v0,v0,-1
bfc07624:	afa20024 	sw	v0,36(sp)
bfc07628:	1460fffa 	bnez	v1,bfc07614 <memctlc_ddr3_dll_reset+0x2f4>
bfc0762c:	00000000 	nop
	while(*dmcr & DMCR_MRS_BUSY);
bfc07630:	8fa20020 	lw	v0,32(sp)
bfc07634:	8c420000 	lw	v0,0(v0)
bfc07638:	0440fffd 	bltz	v0,bfc07630 <memctlc_ddr3_dll_reset+0x310>
bfc0763c:	00000000 	nop

	/* 7. reset phy fifo */
	memctlc_dram_phy_reset();
bfc07640:	0ff01c1b 	jal	bfc0706c <memctlc_dram_phy_reset>
bfc07644:	00000000 	nop

	return;
}
bfc07648:	8fbf004c 	lw	ra,76(sp)
bfc0764c:	27bd0050 	addiu	sp,sp,80
bfc07650:	03e00008 	jr	ra
bfc07654:	00000000 	nop

bfc07658 <memctlc_ZQ_calibration>:
 * 	None
 * Return:
 *	.
 */
int memctlc_ZQ_calibration(unsigned int auto_cali_value)
{
bfc07658:	27bdffe0 	addiu	sp,sp,-32
bfc0765c:	afa40020 	sw	a0,32(sp)
	volatile unsigned int *sys_dram_clk_drv_reg, *socpnr;
	unsigned int polling_limit;



	dmcr = (volatile unsigned int *)DMCR;
bfc07660:	3c02b800 	lui	v0,0xb800
bfc07664:	3442101c 	ori	v0,v0,0x101c
bfc07668:	afa20018 	sw	v0,24(sp)
	//socpnr = (volatile unsigned int *)SOCPNR;//Apollo's chip ID
	daccr = (volatile unsigned int *)DACCR;
bfc0766c:	3c02b800 	lui	v0,0xb800
bfc07670:	34421500 	ori	v0,v0,0x1500
bfc07674:	afa20014 	sw	v0,20(sp)
	zq_cali_reg = (volatile unsigned int *)0xB8001094;//DDZQPCR
bfc07678:	3c02b800 	lui	v0,0xb800
bfc0767c:	34421094 	ori	v0,v0,0x1094
bfc07680:	afa20010 	sw	v0,16(sp)
	zq_cali_status_reg = (volatile unsigned int *)0xB8001098;
bfc07684:	3c02b800 	lui	v0,0xb800
bfc07688:	34421098 	ori	v0,v0,0x1098
bfc0768c:	afa2000c 	sw	v0,12(sp)
	//sys_dram_clk_drv_reg = (volatile unsigned int *)0xB800012c;//RTL8198C N/A

	/* Disable DRAM refresh operation */
	*dmcr = ((*dmcr | DMCR_DIS_DRAM_REF_MASK) & (~DMCR_MR_MODE_EN_MASK));
bfc07690:	8fa20018 	lw	v0,24(sp)
bfc07694:	8c430000 	lw	v1,0(v0)
bfc07698:	3c02feef 	lui	v0,0xfeef
bfc0769c:	3442ffff 	ori	v0,v0,0xffff
bfc076a0:	00621824 	and	v1,v1,v0
bfc076a4:	3c020100 	lui	v0,0x100
bfc076a8:	00621825 	or	v1,v1,v0
bfc076ac:	8fa20018 	lw	v0,24(sp)
bfc076b0:	ac430000 	sw	v1,0(v0)
		*daccr = *daccr | 0x40000000; //single ended
	#else
		//default is differential ended
	#endif

	REG32(0xb8001090)&=~(1<<25);//20140205:Fix tDQSH timing fail issue 
bfc076b4:	3c02b800 	lui	v0,0xb800
bfc076b8:	34421090 	ori	v0,v0,0x1090
bfc076bc:	3c03b800 	lui	v1,0xb800
bfc076c0:	34631090 	ori	v1,v1,0x1090
bfc076c4:	8c640000 	lw	a0,0(v1)
bfc076c8:	3c03fdff 	lui	v1,0xfdff
bfc076cc:	3463ffff 	ori	v1,v1,0xffff
bfc076d0:	00831824 	and	v1,a0,v1
bfc076d4:	ac430000 	sw	v1,0(v0)

	REG32(0xb80000a0)|=(1<<24);//enable ZQ function for RTL8198C
bfc076d8:	3c02b800 	lui	v0,0xb800
bfc076dc:	344200a0 	ori	v0,v0,0xa0
bfc076e0:	3c03b800 	lui	v1,0xb800
bfc076e4:	346300a0 	ori	v1,v1,0xa0
bfc076e8:	8c640000 	lw	a0,0(v1)
bfc076ec:	3c030100 	lui	v1,0x100
bfc076f0:	00831825 	or	v1,a0,v1
bfc076f4:	ac430000 	sw	v1,0(v0)

	REG32(0xb8001090)|=(1<<31);//Force ZQ
bfc076f8:	3c02b800 	lui	v0,0xb800
bfc076fc:	34421090 	ori	v0,v0,0x1090
bfc07700:	3c03b800 	lui	v1,0xb800
bfc07704:	34631090 	ori	v1,v1,0x1090
bfc07708:	8c640000 	lw	a0,0(v1)
bfc0770c:	3c038000 	lui	v1,0x8000
bfc07710:	00831825 	or	v1,a0,v1
bfc07714:	ac430000 	sw	v1,0(v0)

	/* Trigger the calibration */
	//*zq_cali_reg = auto_cali_value | 0x40000000;//Apollo
	*zq_cali_reg = auto_cali_value | 0x80000000;//RTL8198C
bfc07718:	8fa30020 	lw	v1,32(sp)
bfc0771c:	3c028000 	lui	v0,0x8000
bfc07720:	00621825 	or	v1,v1,v0
bfc07724:	8fa20010 	lw	v0,16(sp)
bfc07728:	ac430000 	sw	v1,0(v0)

	/* Polling to ready */
	polling_limit = 0x1000000;
bfc0772c:	3c020100 	lui	v0,0x100
bfc07730:	afa20000 	sw	v0,0(sp)
	while(*zq_cali_reg & 0x80000000){
bfc07734:	0bf01dd5 	j	bfc07754 <memctlc_ZQ_calibration+0xfc>
bfc07738:	00000000 	nop
		polling_limit--;
bfc0773c:	8fa20000 	lw	v0,0(sp)
bfc07740:	2442ffff 	addiu	v0,v0,-1
bfc07744:	afa20000 	sw	v0,0(sp)
		if(polling_limit == 0){
bfc07748:	8fa20000 	lw	v0,0(sp)
bfc0774c:	10400007 	beqz	v0,bfc0776c <memctlc_ZQ_calibration+0x114>
bfc07750:	00000000 	nop
	//*zq_cali_reg = auto_cali_value | 0x40000000;//Apollo
	*zq_cali_reg = auto_cali_value | 0x80000000;//RTL8198C

	/* Polling to ready */
	polling_limit = 0x1000000;
	while(*zq_cali_reg & 0x80000000){
bfc07754:	8fa20010 	lw	v0,16(sp)
bfc07758:	8c420000 	lw	v0,0(v0)
bfc0775c:	0440fff7 	bltz	v0,bfc0773c <memctlc_ZQ_calibration+0xe4>
bfc07760:	00000000 	nop
bfc07764:	0bf01ddc 	j	bfc07770 <memctlc_ZQ_calibration+0x118>
bfc07768:	00000000 	nop
		polling_limit--;
		if(polling_limit == 0){
			_memctl_debug_printf("%s, %d: Error, ZQ auto-calibration ready polling timeout!\n", __FUNCTION__, __LINE__);
			break;
bfc0776c:	00000000 	nop
		}
	}
	
	/* Enable DRAM refresh operation */
	*dmcr = *dmcr &  (~DMCR_DIS_DRAM_REF_MASK) ;
bfc07770:	8fa20018 	lw	v0,24(sp)
bfc07774:	8c430000 	lw	v1,0(v0)
bfc07778:	3c02feff 	lui	v0,0xfeff
bfc0777c:	3442ffff 	ori	v0,v0,0xffff
bfc07780:	00621824 	and	v1,v1,v0
bfc07784:	8fa20018 	lw	v0,24(sp)
bfc07788:	ac430000 	sw	v1,0(v0)
	
	/* Setting the fine tuned DRAM Clock driving */
	//*sys_dram_clk_drv_reg = 0xe300db;

	if(*zq_cali_status_reg & 0x20000000)
bfc0778c:	8fa2000c 	lw	v0,12(sp)
bfc07790:	8c430000 	lw	v1,0(v0)
bfc07794:	3c022000 	lui	v0,0x2000
bfc07798:	00621024 	and	v0,v1,v0
bfc0779c:	10400004 	beqz	v0,bfc077b0 <memctlc_ZQ_calibration+0x158>
bfc077a0:	00000000 	nop
		return 1; /* Error, calibration fail. */
bfc077a4:	24020001 	li	v0,1
bfc077a8:	0bf01ded 	j	bfc077b4 <memctlc_ZQ_calibration+0x15c>
bfc077ac:	00000000 	nop
	else
		return 0; /* Pass, calibration pass.*/
bfc077b0:	00001021 	move	v0,zero


	return 0;
#endif

}
bfc077b4:	27bd0020 	addiu	sp,sp,32
bfc077b8:	03e00008 	jr	ra
bfc077bc:	00000000 	nop

bfc077c0 <memctlc_set_dqm_delay>:




void memctlc_set_dqm_delay(void)
{
bfc077c0:	27bdffd8 	addiu	sp,sp,-40
	volatile unsigned char *src_addr;
	unsigned int src_data_len;
	unsigned char c_data;

	
	dcr    = (volatile unsigned int *)DCR;
bfc077c4:	3c02b800 	lui	v0,0xb800
bfc077c8:	34421004 	ori	v0,v0,0x1004
bfc077cc:	afa2001c 	sw	v0,28(sp)
	dacdqr = (volatile unsigned int *)DACDQR;
bfc077d0:	3c02b800 	lui	v0,0xb800
bfc077d4:	34421510 	ori	v0,v0,0x1510
bfc077d8:	afa20024 	sw	v0,36(sp)
	dcdqmr = (volatile unsigned int *)DCDQMR;
bfc077dc:	3c02b800 	lui	v0,0xb800
bfc077e0:	34421590 	ori	v0,v0,0x1590
bfc077e4:	afa20020 	sw	v0,32(sp)
	bk_dcr = *dcr;
bfc077e8:	8fa2001c 	lw	v0,28(sp)
bfc077ec:	8c420000 	lw	v0,0(v0)
bfc077f0:	afa2000c 	sw	v0,12(sp)
	
	/* Configure to 8bit */
	*dcr = *dcr & (~DCR_DBUSWID_MASK); 
bfc077f4:	8fa2001c 	lw	v0,28(sp)
bfc077f8:	8c430000 	lw	v1,0(v0)
bfc077fc:	3c02f0ff 	lui	v0,0xf0ff
bfc07800:	3442ffff 	ori	v0,v0,0xffff
bfc07804:	00621824 	and	v1,v1,v0
bfc07808:	8fa2001c 	lw	v0,28(sp)
bfc0780c:	ac430000 	sw	v1,0(v0)
	dqm_delay_min = 33;
bfc07810:	24020021 	li	v0,33
bfc07814:	afa20010 	sw	v0,16(sp)
	dqm_delay_max = 32;
bfc07818:	24020020 	li	v0,32
bfc0781c:	afa20014 	sw	v0,20(sp)
	for(dqm_delay=0;dqm_delay<32;dqm_delay++){
bfc07820:	afa00018 	sw	zero,24(sp)
bfc07824:	0bf01e58 	j	bfc07960 <memctlc_set_dqm_delay+0x1a0>
bfc07828:	00000000 	nop
		*dcdqmr = (dqm_delay << DCDQMR_DQM0_PHASE_SHIFT_90_FD_S);
bfc0782c:	8fa20018 	lw	v0,24(sp)
bfc07830:	00021e00 	sll	v1,v0,0x18
bfc07834:	8fa20020 	lw	v0,32(sp)
bfc07838:	ac430000 	sw	v1,0(v0)
		src_addr = (volatile unsigned char *)0xa0000000;
bfc0783c:	3c02a000 	lui	v0,0xa000
bfc07840:	afa20008 	sw	v0,8(sp)
		src_data_len = 0x100;
bfc07844:	24020100 	li	v0,256
bfc07848:	afa20004 	sw	v0,4(sp)
		c_data = 0;
bfc0784c:	a3a00000 	sb	zero,0(sp)
		while(src_data_len){
bfc07850:	0bf01e22 	j	bfc07888 <memctlc_set_dqm_delay+0xc8>
bfc07854:	00000000 	nop
			*src_addr++ = c_data++;
bfc07858:	8fa20008 	lw	v0,8(sp)
bfc0785c:	93a30000 	lbu	v1,0(sp)
bfc07860:	a0430000 	sb	v1,0(v0)
bfc07864:	8fa20008 	lw	v0,8(sp)
bfc07868:	24420001 	addiu	v0,v0,1
bfc0786c:	afa20008 	sw	v0,8(sp)
bfc07870:	93a20000 	lbu	v0,0(sp)
bfc07874:	24420001 	addiu	v0,v0,1
bfc07878:	a3a20000 	sb	v0,0(sp)
			src_data_len--;
bfc0787c:	8fa20004 	lw	v0,4(sp)
bfc07880:	2442ffff 	addiu	v0,v0,-1
bfc07884:	afa20004 	sw	v0,4(sp)
	for(dqm_delay=0;dqm_delay<32;dqm_delay++){
		*dcdqmr = (dqm_delay << DCDQMR_DQM0_PHASE_SHIFT_90_FD_S);
		src_addr = (volatile unsigned char *)0xa0000000;
		src_data_len = 0x100;
		c_data = 0;
		while(src_data_len){
bfc07888:	8fa20004 	lw	v0,4(sp)
bfc0788c:	1440fff2 	bnez	v0,bfc07858 <memctlc_set_dqm_delay+0x98>
bfc07890:	00000000 	nop
			*src_addr++ = c_data++;
			src_data_len--;
		}
		
		src_addr = (volatile unsigned char *)0xa0000000;
bfc07894:	3c02a000 	lui	v0,0xa000
bfc07898:	afa20008 	sw	v0,8(sp)
		src_data_len = 0x100;
bfc0789c:	24020100 	li	v0,256
bfc078a0:	afa20004 	sw	v0,4(sp)
		c_data = 0;
bfc078a4:	a3a00000 	sb	zero,0(sp)
		while(src_data_len){
bfc078a8:	0bf01e3b 	j	bfc078ec <memctlc_set_dqm_delay+0x12c>
bfc078ac:	00000000 	nop
			if(*src_addr != c_data){
bfc078b0:	8fa20008 	lw	v0,8(sp)
bfc078b4:	90420000 	lbu	v0,0(v0)
bfc078b8:	304200ff 	andi	v0,v0,0xff
bfc078bc:	93a30000 	lbu	v1,0(sp)
bfc078c0:	1462000f 	bne	v1,v0,bfc07900 <memctlc_set_dqm_delay+0x140>
bfc078c4:	00000000 	nop
				break;
			}
			src_addr++;
bfc078c8:	8fa20008 	lw	v0,8(sp)
bfc078cc:	24420001 	addiu	v0,v0,1
bfc078d0:	afa20008 	sw	v0,8(sp)
			c_data++;
bfc078d4:	93a20000 	lbu	v0,0(sp)
bfc078d8:	24420001 	addiu	v0,v0,1
bfc078dc:	a3a20000 	sb	v0,0(sp)
			src_data_len--;
bfc078e0:	8fa20004 	lw	v0,4(sp)
bfc078e4:	2442ffff 	addiu	v0,v0,-1
bfc078e8:	afa20004 	sw	v0,4(sp)
		}
		
		src_addr = (volatile unsigned char *)0xa0000000;
		src_data_len = 0x100;
		c_data = 0;
		while(src_data_len){
bfc078ec:	8fa20004 	lw	v0,4(sp)
bfc078f0:	1440ffef 	bnez	v0,bfc078b0 <memctlc_set_dqm_delay+0xf0>
bfc078f4:	00000000 	nop
bfc078f8:	0bf01e41 	j	bfc07904 <memctlc_set_dqm_delay+0x144>
bfc078fc:	00000000 	nop
			if(*src_addr != c_data){
				break;
bfc07900:	00000000 	nop
			}
			src_addr++;
			c_data++;
			src_data_len--;
		}
		if(src_data_len == 0){
bfc07904:	8fa20004 	lw	v0,4(sp)
bfc07908:	14400009 	bnez	v0,bfc07930 <memctlc_set_dqm_delay+0x170>
bfc0790c:	00000000 	nop
			if(dqm_delay_min==33){
bfc07910:	8fa30010 	lw	v1,16(sp)
bfc07914:	24020021 	li	v0,33
bfc07918:	1462000e 	bne	v1,v0,bfc07954 <memctlc_set_dqm_delay+0x194>
bfc0791c:	00000000 	nop
				dqm_delay_min = dqm_delay;
bfc07920:	8fa20018 	lw	v0,24(sp)
bfc07924:	afa20010 	sw	v0,16(sp)
bfc07928:	0bf01e55 	j	bfc07954 <memctlc_set_dqm_delay+0x194>
bfc0792c:	00000000 	nop
			}
		}else{
			if(dqm_delay_min!=33){
bfc07930:	8fa30010 	lw	v1,16(sp)
bfc07934:	24020021 	li	v0,33
bfc07938:	10620006 	beq	v1,v0,bfc07954 <memctlc_set_dqm_delay+0x194>
bfc0793c:	00000000 	nop
				dqm_delay_max = dqm_delay-1;
bfc07940:	8fa20018 	lw	v0,24(sp)
bfc07944:	2442ffff 	addiu	v0,v0,-1
bfc07948:	afa20014 	sw	v0,20(sp)
				break;
bfc0794c:	0bf01e5c 	j	bfc07970 <memctlc_set_dqm_delay+0x1b0>
bfc07950:	00000000 	nop
	
	/* Configure to 8bit */
	*dcr = *dcr & (~DCR_DBUSWID_MASK); 
	dqm_delay_min = 33;
	dqm_delay_max = 32;
	for(dqm_delay=0;dqm_delay<32;dqm_delay++){
bfc07954:	8fa20018 	lw	v0,24(sp)
bfc07958:	24420001 	addiu	v0,v0,1
bfc0795c:	afa20018 	sw	v0,24(sp)
bfc07960:	8fa20018 	lw	v0,24(sp)
bfc07964:	2c420020 	sltiu	v0,v0,32
bfc07968:	1440ffb0 	bnez	v0,bfc0782c <memctlc_set_dqm_delay+0x6c>
bfc0796c:	00000000 	nop
				dqm_delay_max = dqm_delay-1;
				break;
			}
		}
	}
	dqm_delay = (dqm_delay_max + dqm_delay_min)/2;
bfc07970:	8fa30014 	lw	v1,20(sp)
bfc07974:	8fa20010 	lw	v0,16(sp)
bfc07978:	00621021 	addu	v0,v1,v0
bfc0797c:	00021042 	srl	v0,v0,0x1
bfc07980:	afa20018 	sw	v0,24(sp)
	*dcdqmr = (dqm_delay << DCDQMR_DQM0_PHASE_SHIFT_90_FD_S) | (dqm_delay << DCDQMR_DQM1_PHASE_SHIFT_90_FD_S);
bfc07984:	8fa20018 	lw	v0,24(sp)
bfc07988:	00021e00 	sll	v1,v0,0x18
bfc0798c:	8fa20018 	lw	v0,24(sp)
bfc07990:	00021400 	sll	v0,v0,0x10
bfc07994:	00621825 	or	v1,v1,v0
bfc07998:	8fa20020 	lw	v0,32(sp)
bfc0799c:	ac430000 	sw	v1,0(v0)
	/* Restore DCR */
	*dcr = bk_dcr;
bfc079a0:	8fa2001c 	lw	v0,28(sp)
bfc079a4:	8fa3000c 	lw	v1,12(sp)
bfc079a8:	ac430000 	sw	v1,0(v0)
	return;

}
bfc079ac:	27bd0028 	addiu	sp,sp,40
bfc079b0:	03e00008 	jr	ra
bfc079b4:	00000000 	nop

bfc079b8 <_set_dmcr>:
}

#endif

void _set_dmcr(unsigned int dmcr_value)
{
bfc079b8:	afa40000 	sw	a0,0(sp)
	/* Error cheching here ?*/
	REG(DMCR) = dmcr_value;
bfc079bc:	3c02b800 	lui	v0,0xb800
bfc079c0:	3442101c 	ori	v0,v0,0x101c
bfc079c4:	8fa30000 	lw	v1,0(sp)
bfc079c8:	ac430000 	sw	v1,0(v0)
	while(REG(DMCR) & 0x80000000);
bfc079cc:	3c02b800 	lui	v0,0xb800
bfc079d0:	3442101c 	ori	v0,v0,0x101c
bfc079d4:	8c420000 	lw	v0,0(v0)
bfc079d8:	0440fffc 	bltz	v0,bfc079cc <_set_dmcr+0x14>
bfc079dc:	00000000 	nop

	return;
}
bfc079e0:	03e00008 	jr	ra
bfc079e4:	00000000 	nop

bfc079e8 <memctlc_set_DRAM_buswidth>:



void memctlc_set_DRAM_buswidth(unsigned int buswidth)
{
bfc079e8:	27bdffd8 	addiu	sp,sp,-40
bfc079ec:	afbf0024 	sw	ra,36(sp)
bfc079f0:	afa40028 	sw	a0,40(sp)
	volatile unsigned int *dcr;
	unsigned int t_cas, dmcr_value;
	/* get DCR value */
	dcr = (unsigned int *)DCR;
bfc079f4:	3c02b800 	lui	v0,0xb800
bfc079f8:	34421004 	ori	v0,v0,0x1004
bfc079fc:	afa20018 	sw	v0,24(sp)


	switch (buswidth){
bfc07a00:	8fa20028 	lw	v0,40(sp)
bfc07a04:	24030008 	li	v1,8
bfc07a08:	10430006 	beq	v0,v1,bfc07a24 <memctlc_set_DRAM_buswidth+0x3c>
bfc07a0c:	00000000 	nop
bfc07a10:	24030010 	li	v1,16
bfc07a14:	10430031 	beq	v0,v1,bfc07adc <memctlc_set_DRAM_buswidth+0xf4>
bfc07a18:	00000000 	nop
		default:
			_memctl_debug_printf("%s, %d: Error buswidth value(%d)\n", __FUNCTION__, __LINE__, buswidth);
			break;
	}

	return;
bfc07a1c:	0bf01ee9 	j	bfc07ba4 <memctlc_set_DRAM_buswidth+0x1bc>
bfc07a20:	00000000 	nop
	dcr = (unsigned int *)DCR;


	switch (buswidth){
		case 8:
			if(memctlc_is_DDR()){
bfc07a24:	0ff00ca2 	jal	bfc03288 <memctlc_is_DDR>
bfc07a28:	00000000 	nop
bfc07a2c:	10400020 	beqz	v0,bfc07ab0 <memctlc_set_DRAM_buswidth+0xc8>
bfc07a30:	00000000 	nop
				t_cas = ((REG(DTR0) & (~(DTR0_CAS_MASK))) >> DTR0_CAS_FD_S);
bfc07a34:	3c02b800 	lui	v0,0xb800
bfc07a38:	34421008 	ori	v0,v0,0x1008
bfc07a3c:	8c420000 	lw	v0,0(v0)
bfc07a40:	afa00014 	sw	zero,20(sp)
				/*0:2.5, 1:2, 2:3*/
				if(t_cas == 0)
bfc07a44:	8fa20014 	lw	v0,20(sp)
bfc07a48:	14400006 	bnez	v0,bfc07a64 <memctlc_set_DRAM_buswidth+0x7c>
bfc07a4c:	00000000 	nop
					dmcr_value = 0x00100062;
bfc07a50:	3c020010 	lui	v0,0x10
bfc07a54:	34420062 	ori	v0,v0,0x62
bfc07a58:	afa20010 	sw	v0,16(sp)
bfc07a5c:	0bf01ea9 	j	bfc07aa4 <memctlc_set_DRAM_buswidth+0xbc>
bfc07a60:	00000000 	nop
				else if(t_cas == 1)
bfc07a64:	8fa30014 	lw	v1,20(sp)
bfc07a68:	24020001 	li	v0,1
bfc07a6c:	14620006 	bne	v1,v0,bfc07a88 <memctlc_set_DRAM_buswidth+0xa0>
bfc07a70:	00000000 	nop
					dmcr_value = 0x00100022;
bfc07a74:	3c020010 	lui	v0,0x10
bfc07a78:	34420022 	ori	v0,v0,0x22
bfc07a7c:	afa20010 	sw	v0,16(sp)
bfc07a80:	0bf01ea9 	j	bfc07aa4 <memctlc_set_DRAM_buswidth+0xbc>
bfc07a84:	00000000 	nop
				else if(t_cas == 2)
bfc07a88:	8fa30014 	lw	v1,20(sp)
bfc07a8c:	24020002 	li	v0,2
bfc07a90:	14620040 	bne	v1,v0,bfc07b94 <memctlc_set_DRAM_buswidth+0x1ac>
bfc07a94:	00000000 	nop
					dmcr_value = 0x00100032;
bfc07a98:	3c020010 	lui	v0,0x10
bfc07a9c:	34420032 	ori	v0,v0,0x32
bfc07aa0:	afa20010 	sw	v0,16(sp)
				else{
					_memctl_debug_printf("%s, %d: Error t_cas value(%d)\n", __FUNCTION__, __LINE__, t_cas);
					return;
				}
				_set_dmcr(dmcr_value);
bfc07aa4:	8fa40010 	lw	a0,16(sp)
bfc07aa8:	0ff01e6e 	jal	bfc079b8 <_set_dmcr>
bfc07aac:	00000000 	nop
			}
			*dcr = (*dcr & (~((unsigned int)DCR_DBUSWID_MASK)));
bfc07ab0:	8fa20018 	lw	v0,24(sp)
bfc07ab4:	8c430000 	lw	v1,0(v0)
bfc07ab8:	3c02f0ff 	lui	v0,0xf0ff
bfc07abc:	3442ffff 	ori	v0,v0,0xffff
bfc07ac0:	00621824 	and	v1,v1,v0
bfc07ac4:	8fa20018 	lw	v0,24(sp)
bfc07ac8:	ac430000 	sw	v1,0(v0)
	...
		default:
			_memctl_debug_printf("%s, %d: Error buswidth value(%d)\n", __FUNCTION__, __LINE__, buswidth);
			break;
	}

	return;
bfc07ad4:	0bf01ee9 	j	bfc07ba4 <memctlc_set_DRAM_buswidth+0x1bc>
bfc07ad8:	00000000 	nop
			}
			*dcr = (*dcr & (~((unsigned int)DCR_DBUSWID_MASK)));
			break;

		case 16:
			if(memctlc_is_DDR()){
bfc07adc:	0ff00ca2 	jal	bfc03288 <memctlc_is_DDR>
bfc07ae0:	00000000 	nop
bfc07ae4:	10400020 	beqz	v0,bfc07b68 <memctlc_set_DRAM_buswidth+0x180>
bfc07ae8:	00000000 	nop
				t_cas = ((REG(DTR0) & (~(DTR0_CAS_MASK))) >> DTR0_CAS_FD_S);
bfc07aec:	3c02b800 	lui	v0,0xb800
bfc07af0:	34421008 	ori	v0,v0,0x1008
bfc07af4:	8c420000 	lw	v0,0(v0)
bfc07af8:	afa00014 	sw	zero,20(sp)
				/*0:2.5, 1:2, 2:3*/
				if(t_cas == 0)
bfc07afc:	8fa20014 	lw	v0,20(sp)
bfc07b00:	14400006 	bnez	v0,bfc07b1c <memctlc_set_DRAM_buswidth+0x134>
bfc07b04:	00000000 	nop
					dmcr_value = 0x00100062;
bfc07b08:	3c020010 	lui	v0,0x10
bfc07b0c:	34420062 	ori	v0,v0,0x62
bfc07b10:	afa20010 	sw	v0,16(sp)
bfc07b14:	0bf01ed7 	j	bfc07b5c <memctlc_set_DRAM_buswidth+0x174>
bfc07b18:	00000000 	nop
				else if(t_cas == 1)
bfc07b1c:	8fa30014 	lw	v1,20(sp)
bfc07b20:	24020001 	li	v0,1
bfc07b24:	14620006 	bne	v1,v0,bfc07b40 <memctlc_set_DRAM_buswidth+0x158>
bfc07b28:	00000000 	nop
					dmcr_value = 0x00100022;
bfc07b2c:	3c020010 	lui	v0,0x10
bfc07b30:	34420022 	ori	v0,v0,0x22
bfc07b34:	afa20010 	sw	v0,16(sp)
bfc07b38:	0bf01ed7 	j	bfc07b5c <memctlc_set_DRAM_buswidth+0x174>
bfc07b3c:	00000000 	nop
				else if(t_cas == 2)
bfc07b40:	8fa30014 	lw	v1,20(sp)
bfc07b44:	24020002 	li	v0,2
bfc07b48:	14620015 	bne	v1,v0,bfc07ba0 <memctlc_set_DRAM_buswidth+0x1b8>
bfc07b4c:	00000000 	nop
					dmcr_value = 0x00100032;
bfc07b50:	3c020010 	lui	v0,0x10
bfc07b54:	34420032 	ori	v0,v0,0x32
bfc07b58:	afa20010 	sw	v0,16(sp)
				else{
					_memctl_debug_printf("%s, %d: Error t_cas value(%d)\n", __FUNCTION__, __LINE__, t_cas);
					return;
				}
				_set_dmcr(dmcr_value);
bfc07b5c:	8fa40010 	lw	a0,16(sp)
bfc07b60:	0ff01e6e 	jal	bfc079b8 <_set_dmcr>
bfc07b64:	00000000 	nop
			}
			*dcr = (*dcr & (~((unsigned int)DCR_DBUSWID_MASK))) | (unsigned int)(1<<DCR_DBUSWID_FD_S);
bfc07b68:	8fa20018 	lw	v0,24(sp)
bfc07b6c:	8c430000 	lw	v1,0(v0)
bfc07b70:	3c02f0ff 	lui	v0,0xf0ff
bfc07b74:	3442ffff 	ori	v0,v0,0xffff
bfc07b78:	00621824 	and	v1,v1,v0
bfc07b7c:	3c020100 	lui	v0,0x100
bfc07b80:	00621825 	or	v1,v1,v0
bfc07b84:	8fa20018 	lw	v0,24(sp)
bfc07b88:	ac430000 	sw	v1,0(v0)
		default:
			_memctl_debug_printf("%s, %d: Error buswidth value(%d)\n", __FUNCTION__, __LINE__, buswidth);
			break;
	}

	return;
bfc07b8c:	0bf01ee9 	j	bfc07ba4 <memctlc_set_DRAM_buswidth+0x1bc>
bfc07b90:	00000000 	nop
					dmcr_value = 0x00100022;
				else if(t_cas == 2)
					dmcr_value = 0x00100032;
				else{
					_memctl_debug_printf("%s, %d: Error t_cas value(%d)\n", __FUNCTION__, __LINE__, t_cas);
					return;
bfc07b94:	00000000 	nop
bfc07b98:	0bf01ee9 	j	bfc07ba4 <memctlc_set_DRAM_buswidth+0x1bc>
bfc07b9c:	00000000 	nop
					dmcr_value = 0x00100022;
				else if(t_cas == 2)
					dmcr_value = 0x00100032;
				else{
					_memctl_debug_printf("%s, %d: Error t_cas value(%d)\n", __FUNCTION__, __LINE__, t_cas);
					return;
bfc07ba0:	00000000 	nop
			_memctl_debug_printf("%s, %d: Error buswidth value(%d)\n", __FUNCTION__, __LINE__, buswidth);
			break;
	}

	return;
}
bfc07ba4:	8fbf0024 	lw	ra,36(sp)
bfc07ba8:	27bd0028 	addiu	sp,sp,40
bfc07bac:	03e00008 	jr	ra
bfc07bb0:	00000000 	nop

bfc07bb4 <memctlc_set_DRAM_colnum>:
void memctlc_set_DRAM_colnum(unsigned int col_num)
{
bfc07bb4:	27bdfff8 	addiu	sp,sp,-8
bfc07bb8:	afa40008 	sw	a0,8(sp)
	volatile unsigned int *dcr;

	/* get DCR value */
	dcr = (unsigned int *)DCR;
bfc07bbc:	3c02b800 	lui	v0,0xb800
bfc07bc0:	34421004 	ori	v0,v0,0x1004
bfc07bc4:	afa20000 	sw	v0,0(sp)


	switch (col_num){
bfc07bc8:	8fa20008 	lw	v0,8(sp)
bfc07bcc:	24030400 	li	v1,1024
bfc07bd0:	10430028 	beq	v0,v1,bfc07c74 <memctlc_set_DRAM_colnum+0xc0>
bfc07bd4:	00000000 	nop
bfc07bd8:	2c430401 	sltiu	v1,v0,1025
bfc07bdc:	10600009 	beqz	v1,bfc07c04 <memctlc_set_DRAM_colnum+0x50>
bfc07be0:	00000000 	nop
bfc07be4:	24030100 	li	v1,256
bfc07be8:	1043000e 	beq	v0,v1,bfc07c24 <memctlc_set_DRAM_colnum+0x70>
bfc07bec:	00000000 	nop
bfc07bf0:	24030200 	li	v1,512
bfc07bf4:	10430014 	beq	v0,v1,bfc07c48 <memctlc_set_DRAM_colnum+0x94>
bfc07bf8:	00000000 	nop
bfc07bfc:	0bf01f3c 	j	bfc07cf0 <memctlc_set_DRAM_colnum+0x13c>
bfc07c00:	00000000 	nop
bfc07c04:	24030800 	li	v1,2048
bfc07c08:	10430025 	beq	v0,v1,bfc07ca0 <memctlc_set_DRAM_colnum+0xec>
bfc07c0c:	00000000 	nop
bfc07c10:	24031000 	li	v1,4096
bfc07c14:	1043002d 	beq	v0,v1,bfc07ccc <memctlc_set_DRAM_colnum+0x118>
bfc07c18:	00000000 	nop
bfc07c1c:	0bf01f3c 	j	bfc07cf0 <memctlc_set_DRAM_colnum+0x13c>
bfc07c20:	00000000 	nop
		case 256:
			*dcr = (*dcr & (~((unsigned int)DCR_COLCNT_MASK)));
bfc07c24:	8fa20000 	lw	v0,0(sp)
bfc07c28:	8c430000 	lw	v1,0(v0)
bfc07c2c:	3c02fff0 	lui	v0,0xfff0
bfc07c30:	3442ffff 	ori	v0,v0,0xffff
bfc07c34:	00621824 	and	v1,v1,v0
bfc07c38:	8fa20000 	lw	v0,0(sp)
bfc07c3c:	ac430000 	sw	v1,0(v0)
			break;
bfc07c40:	0bf01f3c 	j	bfc07cf0 <memctlc_set_DRAM_colnum+0x13c>
bfc07c44:	00000000 	nop

		case 512:
			*dcr = (*dcr & (~((unsigned int)DCR_COLCNT_MASK))) | (unsigned int)(1<<DCR_COLCNT_FD_S);
bfc07c48:	8fa20000 	lw	v0,0(sp)
bfc07c4c:	8c430000 	lw	v1,0(v0)
bfc07c50:	3c02fff0 	lui	v0,0xfff0
bfc07c54:	3442ffff 	ori	v0,v0,0xffff
bfc07c58:	00621824 	and	v1,v1,v0
bfc07c5c:	3c020001 	lui	v0,0x1
bfc07c60:	00621825 	or	v1,v1,v0
bfc07c64:	8fa20000 	lw	v0,0(sp)
bfc07c68:	ac430000 	sw	v1,0(v0)
			break;
bfc07c6c:	0bf01f3c 	j	bfc07cf0 <memctlc_set_DRAM_colnum+0x13c>
bfc07c70:	00000000 	nop

		case 1024:
			*dcr = (*dcr & (~((unsigned int)DCR_COLCNT_MASK))) | (unsigned int)(2<<DCR_COLCNT_FD_S);
bfc07c74:	8fa20000 	lw	v0,0(sp)
bfc07c78:	8c430000 	lw	v1,0(v0)
bfc07c7c:	3c02fff0 	lui	v0,0xfff0
bfc07c80:	3442ffff 	ori	v0,v0,0xffff
bfc07c84:	00621824 	and	v1,v1,v0
bfc07c88:	3c020002 	lui	v0,0x2
bfc07c8c:	00621825 	or	v1,v1,v0
bfc07c90:	8fa20000 	lw	v0,0(sp)
bfc07c94:	ac430000 	sw	v1,0(v0)
			break;
bfc07c98:	0bf01f3c 	j	bfc07cf0 <memctlc_set_DRAM_colnum+0x13c>
bfc07c9c:	00000000 	nop

		case 2048:
			*dcr = (*dcr & (~((unsigned int)DCR_COLCNT_MASK))) | (unsigned int)(3<<DCR_COLCNT_FD_S);
bfc07ca0:	8fa20000 	lw	v0,0(sp)
bfc07ca4:	8c430000 	lw	v1,0(v0)
bfc07ca8:	3c02fff0 	lui	v0,0xfff0
bfc07cac:	3442ffff 	ori	v0,v0,0xffff
bfc07cb0:	00621824 	and	v1,v1,v0
bfc07cb4:	3c020003 	lui	v0,0x3
bfc07cb8:	00621825 	or	v1,v1,v0
bfc07cbc:	8fa20000 	lw	v0,0(sp)
bfc07cc0:	ac430000 	sw	v1,0(v0)
			break;
bfc07cc4:	0bf01f3c 	j	bfc07cf0 <memctlc_set_DRAM_colnum+0x13c>
bfc07cc8:	00000000 	nop

		case 4096:
			*dcr = (*dcr & (~((unsigned int)DCR_COLCNT_MASK))) | (unsigned int)(4<<DCR_COLCNT_FD_S);
bfc07ccc:	8fa20000 	lw	v0,0(sp)
bfc07cd0:	8c430000 	lw	v1,0(v0)
bfc07cd4:	3c02fff0 	lui	v0,0xfff0
bfc07cd8:	3442ffff 	ori	v0,v0,0xffff
bfc07cdc:	00621824 	and	v1,v1,v0
bfc07ce0:	3c020004 	lui	v0,0x4
bfc07ce4:	00621825 	or	v1,v1,v0
bfc07ce8:	8fa20000 	lw	v0,0(sp)
bfc07cec:	ac430000 	sw	v1,0(v0)
	}

	return;


}
bfc07cf0:	27bd0008 	addiu	sp,sp,8
bfc07cf4:	03e00008 	jr	ra
bfc07cf8:	00000000 	nop

bfc07cfc <memctlc_set_DRAM_rownum>:
void memctlc_set_DRAM_rownum(unsigned int row_num)
{
bfc07cfc:	27bdfff8 	addiu	sp,sp,-8
bfc07d00:	afa40008 	sw	a0,8(sp)
	volatile unsigned int *dcr;

	/* get DCR value */
	dcr = (unsigned int *)DCR;
bfc07d04:	3c02b800 	lui	v0,0xb800
bfc07d08:	34421004 	ori	v0,v0,0x1004
bfc07d0c:	afa20000 	sw	v0,0(sp)


	switch (row_num){
bfc07d10:	8fa20008 	lw	v0,8(sp)
bfc07d14:	24032000 	li	v1,8192
bfc07d18:	1043002b 	beq	v0,v1,bfc07dc8 <memctlc_set_DRAM_rownum+0xcc>
bfc07d1c:	00000000 	nop
bfc07d20:	2c432001 	sltiu	v1,v0,8193
bfc07d24:	10600009 	beqz	v1,bfc07d4c <memctlc_set_DRAM_rownum+0x50>
bfc07d28:	00000000 	nop
bfc07d2c:	24030800 	li	v1,2048
bfc07d30:	10430011 	beq	v0,v1,bfc07d78 <memctlc_set_DRAM_rownum+0x7c>
bfc07d34:	00000000 	nop
bfc07d38:	24031000 	li	v1,4096
bfc07d3c:	10430017 	beq	v0,v1,bfc07d9c <memctlc_set_DRAM_rownum+0xa0>
bfc07d40:	00000000 	nop
bfc07d44:	0bf01f9c 	j	bfc07e70 <memctlc_set_DRAM_rownum+0x174>
bfc07d48:	00000000 	nop
bfc07d4c:	34038000 	li	v1,0x8000
bfc07d50:	10430033 	beq	v0,v1,bfc07e20 <memctlc_set_DRAM_rownum+0x124>
bfc07d54:	00000000 	nop
bfc07d58:	3c030001 	lui	v1,0x1
bfc07d5c:	1043003b 	beq	v0,v1,bfc07e4c <memctlc_set_DRAM_rownum+0x150>
bfc07d60:	00000000 	nop
bfc07d64:	24034000 	li	v1,16384
bfc07d68:	10430022 	beq	v0,v1,bfc07df4 <memctlc_set_DRAM_rownum+0xf8>
bfc07d6c:	00000000 	nop
bfc07d70:	0bf01f9c 	j	bfc07e70 <memctlc_set_DRAM_rownum+0x174>
bfc07d74:	00000000 	nop
		case 2048:
			*dcr = (*dcr & (~((unsigned int)DCR_ROWCNT_MASK)));
bfc07d78:	8fa20000 	lw	v0,0(sp)
bfc07d7c:	8c430000 	lw	v1,0(v0)
bfc07d80:	3c02ff0f 	lui	v0,0xff0f
bfc07d84:	3442ffff 	ori	v0,v0,0xffff
bfc07d88:	00621824 	and	v1,v1,v0
bfc07d8c:	8fa20000 	lw	v0,0(sp)
bfc07d90:	ac430000 	sw	v1,0(v0)
			break;
bfc07d94:	0bf01f9c 	j	bfc07e70 <memctlc_set_DRAM_rownum+0x174>
bfc07d98:	00000000 	nop

		case 4096:
			*dcr = (*dcr & (~((unsigned int)DCR_ROWCNT_MASK))) | (unsigned int)(1<<DCR_ROWCNT_FD_S);
bfc07d9c:	8fa20000 	lw	v0,0(sp)
bfc07da0:	8c430000 	lw	v1,0(v0)
bfc07da4:	3c02ff0f 	lui	v0,0xff0f
bfc07da8:	3442ffff 	ori	v0,v0,0xffff
bfc07dac:	00621824 	and	v1,v1,v0
bfc07db0:	3c020010 	lui	v0,0x10
bfc07db4:	00621825 	or	v1,v1,v0
bfc07db8:	8fa20000 	lw	v0,0(sp)
bfc07dbc:	ac430000 	sw	v1,0(v0)
			break;
bfc07dc0:	0bf01f9c 	j	bfc07e70 <memctlc_set_DRAM_rownum+0x174>
bfc07dc4:	00000000 	nop

		case 8192:
			*dcr = (*dcr & (~((unsigned int)DCR_ROWCNT_MASK))) | (unsigned int)(2<<DCR_ROWCNT_FD_S);
bfc07dc8:	8fa20000 	lw	v0,0(sp)
bfc07dcc:	8c430000 	lw	v1,0(v0)
bfc07dd0:	3c02ff0f 	lui	v0,0xff0f
bfc07dd4:	3442ffff 	ori	v0,v0,0xffff
bfc07dd8:	00621824 	and	v1,v1,v0
bfc07ddc:	3c020020 	lui	v0,0x20
bfc07de0:	00621825 	or	v1,v1,v0
bfc07de4:	8fa20000 	lw	v0,0(sp)
bfc07de8:	ac430000 	sw	v1,0(v0)
			break;
bfc07dec:	0bf01f9c 	j	bfc07e70 <memctlc_set_DRAM_rownum+0x174>
bfc07df0:	00000000 	nop

		case 16384:
			*dcr = (*dcr & (~((unsigned int)DCR_ROWCNT_MASK))) | (unsigned int)(3<<DCR_ROWCNT_FD_S);
bfc07df4:	8fa20000 	lw	v0,0(sp)
bfc07df8:	8c430000 	lw	v1,0(v0)
bfc07dfc:	3c02ff0f 	lui	v0,0xff0f
bfc07e00:	3442ffff 	ori	v0,v0,0xffff
bfc07e04:	00621824 	and	v1,v1,v0
bfc07e08:	3c020030 	lui	v0,0x30
bfc07e0c:	00621825 	or	v1,v1,v0
bfc07e10:	8fa20000 	lw	v0,0(sp)
bfc07e14:	ac430000 	sw	v1,0(v0)
			break;
bfc07e18:	0bf01f9c 	j	bfc07e70 <memctlc_set_DRAM_rownum+0x174>
bfc07e1c:	00000000 	nop

		case (32*1024):
			*dcr = (*dcr & (~((unsigned int)DCR_ROWCNT_MASK))) | (unsigned int)(4<<DCR_ROWCNT_FD_S);
bfc07e20:	8fa20000 	lw	v0,0(sp)
bfc07e24:	8c430000 	lw	v1,0(v0)
bfc07e28:	3c02ff0f 	lui	v0,0xff0f
bfc07e2c:	3442ffff 	ori	v0,v0,0xffff
bfc07e30:	00621824 	and	v1,v1,v0
bfc07e34:	3c020040 	lui	v0,0x40
bfc07e38:	00621825 	or	v1,v1,v0
bfc07e3c:	8fa20000 	lw	v0,0(sp)
bfc07e40:	ac430000 	sw	v1,0(v0)
			break;
bfc07e44:	0bf01f9c 	j	bfc07e70 <memctlc_set_DRAM_rownum+0x174>
bfc07e48:	00000000 	nop

		case (64*1024):
			*dcr = (*dcr & (~((unsigned int)DCR_ROWCNT_MASK))) | (unsigned int)(5<<DCR_ROWCNT_FD_S);
bfc07e4c:	8fa20000 	lw	v0,0(sp)
bfc07e50:	8c430000 	lw	v1,0(v0)
bfc07e54:	3c02ff0f 	lui	v0,0xff0f
bfc07e58:	3442ffff 	ori	v0,v0,0xffff
bfc07e5c:	00621824 	and	v1,v1,v0
bfc07e60:	3c020050 	lui	v0,0x50
bfc07e64:	00621825 	or	v1,v1,v0
bfc07e68:	8fa20000 	lw	v0,0(sp)
bfc07e6c:	ac430000 	sw	v1,0(v0)
	}

	return;


}
bfc07e70:	27bd0008 	addiu	sp,sp,8
bfc07e74:	03e00008 	jr	ra
bfc07e78:	00000000 	nop

bfc07e7c <memctlc_set_DRAM_banknum>:
void memctlc_set_DRAM_banknum(unsigned int bank_num)
{
bfc07e7c:	27bdffe0 	addiu	sp,sp,-32
bfc07e80:	afbf001c 	sw	ra,28(sp)
bfc07e84:	afa40020 	sw	a0,32(sp)
	volatile unsigned int *dcr, *dmcr;

	/* get DCR value */
	dcr = (unsigned int *)DCR;
bfc07e88:	3c02b800 	lui	v0,0xb800
bfc07e8c:	34421004 	ori	v0,v0,0x1004
bfc07e90:	afa20014 	sw	v0,20(sp)
	dmcr = (unsigned int *)DMCR;
bfc07e94:	3c02b800 	lui	v0,0xb800
bfc07e98:	3442101c 	ori	v0,v0,0x101c
bfc07e9c:	afa20010 	sw	v0,16(sp)


	if(memctlc_is_DDR()){
bfc07ea0:	0ff00ca2 	jal	bfc03288 <memctlc_is_DDR>
bfc07ea4:	00000000 	nop
bfc07ea8:	1040001f 	beqz	v0,bfc07f28 <memctlc_set_DRAM_banknum+0xac>
bfc07eac:	00000000 	nop
		switch (bank_num){
bfc07eb0:	8fa20020 	lw	v0,32(sp)
bfc07eb4:	24030002 	li	v1,2
bfc07eb8:	10430006 	beq	v0,v1,bfc07ed4 <memctlc_set_DRAM_banknum+0x58>
bfc07ebc:	00000000 	nop
bfc07ec0:	24030004 	li	v1,4
bfc07ec4:	1043000d 	beq	v0,v1,bfc07efc <memctlc_set_DRAM_banknum+0x80>
bfc07ec8:	00000000 	nop
			case 2:
				*dcr = (*dcr & (~((unsigned int)DCR_BANKCNT_MASK)));
				break;

			case 4:
				*dcr = (*dcr & (~((unsigned int)DCR_BANKCNT_MASK))) | (unsigned int)(1<<DCR_BANKCNT_FD_S);
bfc07ecc:	0bf01fe7 	j	bfc07f9c <memctlc_set_DRAM_banknum+0x120>
bfc07ed0:	00000000 	nop


	if(memctlc_is_DDR()){
		switch (bank_num){
			case 2:
				*dcr = (*dcr & (~((unsigned int)DCR_BANKCNT_MASK)));
bfc07ed4:	8fa20014 	lw	v0,20(sp)
bfc07ed8:	8c430000 	lw	v1,0(v0)
bfc07edc:	3c020fff 	lui	v0,0xfff
bfc07ee0:	3442ffff 	ori	v0,v0,0xffff
bfc07ee4:	00621824 	and	v1,v1,v0
bfc07ee8:	8fa20014 	lw	v0,20(sp)
bfc07eec:	ac430000 	sw	v1,0(v0)
				break;
bfc07ef0:	00000000 	nop
bfc07ef4:	0bf01fe7 	j	bfc07f9c <memctlc_set_DRAM_banknum+0x120>
bfc07ef8:	00000000 	nop

			case 4:
				*dcr = (*dcr & (~((unsigned int)DCR_BANKCNT_MASK))) | (unsigned int)(1<<DCR_BANKCNT_FD_S);
bfc07efc:	8fa20014 	lw	v0,20(sp)
bfc07f00:	8c430000 	lw	v1,0(v0)
bfc07f04:	3c020fff 	lui	v0,0xfff
bfc07f08:	3442ffff 	ori	v0,v0,0xffff
bfc07f0c:	00621824 	and	v1,v1,v0
bfc07f10:	3c021000 	lui	v0,0x1000
bfc07f14:	00621825 	or	v1,v1,v0
bfc07f18:	8fa20014 	lw	v0,20(sp)
bfc07f1c:	ac430000 	sw	v1,0(v0)
bfc07f20:	0bf01fe7 	j	bfc07f9c <memctlc_set_DRAM_banknum+0x120>
bfc07f24:	00000000 	nop
			default:
				_memctl_debug_printf("%s, %d: Error DDR1 bank number value(%d)\n", __FUNCTION__, __LINE__, bank_num);
				break;
		}
	}else{
		switch (bank_num){
bfc07f28:	8fa20020 	lw	v0,32(sp)
bfc07f2c:	24030004 	li	v1,4
bfc07f30:	10430006 	beq	v0,v1,bfc07f4c <memctlc_set_DRAM_banknum+0xd0>
bfc07f34:	00000000 	nop
bfc07f38:	24030008 	li	v1,8
bfc07f3c:	1043000e 	beq	v0,v1,bfc07f78 <memctlc_set_DRAM_banknum+0xfc>
bfc07f40:	00000000 	nop
bfc07f44:	0bf01fe7 	j	bfc07f9c <memctlc_set_DRAM_banknum+0x120>
bfc07f48:	00000000 	nop
			case 4:
				*dcr = (*dcr & (~((unsigned int)DCR_BANKCNT_MASK))) | (unsigned int)(1<<DCR_BANKCNT_FD_S);
bfc07f4c:	8fa20014 	lw	v0,20(sp)
bfc07f50:	8c430000 	lw	v1,0(v0)
bfc07f54:	3c020fff 	lui	v0,0xfff
bfc07f58:	3442ffff 	ori	v0,v0,0xffff
bfc07f5c:	00621824 	and	v1,v1,v0
bfc07f60:	3c021000 	lui	v0,0x1000
bfc07f64:	00621825 	or	v1,v1,v0
bfc07f68:	8fa20014 	lw	v0,20(sp)
bfc07f6c:	ac430000 	sw	v1,0(v0)
				break;
bfc07f70:	0bf01fe7 	j	bfc07f9c <memctlc_set_DRAM_banknum+0x120>
bfc07f74:	00000000 	nop

			case 8:
				*dcr = (*dcr & (~((unsigned int)DCR_BANKCNT_MASK))) | (unsigned int)(2<<DCR_BANKCNT_FD_S);
bfc07f78:	8fa20014 	lw	v0,20(sp)
bfc07f7c:	8c430000 	lw	v1,0(v0)
bfc07f80:	3c020fff 	lui	v0,0xfff
bfc07f84:	3442ffff 	ori	v0,v0,0xffff
bfc07f88:	00621824 	and	v1,v1,v0
bfc07f8c:	3c022000 	lui	v0,0x2000
bfc07f90:	00621825 	or	v1,v1,v0
bfc07f94:	8fa20014 	lw	v0,20(sp)
bfc07f98:	ac430000 	sw	v1,0(v0)
		}
	}

	return;

}
bfc07f9c:	8fbf001c 	lw	ra,28(sp)
bfc07fa0:	27bd0020 	addiu	sp,sp,32
bfc07fa4:	03e00008 	jr	ra
bfc07fa8:	00000000 	nop

bfc07fac <memctlc_set_DRAM_chipnum>:
void memctlc_set_DRAM_chipnum(unsigned int chip_num)
{
bfc07fac:	27bdfff8 	addiu	sp,sp,-8
bfc07fb0:	afa40008 	sw	a0,8(sp)
	volatile unsigned int *dcr;

	/* get DCR value */
	dcr = (unsigned int *)DCR;
bfc07fb4:	3c02b800 	lui	v0,0xb800
bfc07fb8:	34421004 	ori	v0,v0,0x1004
bfc07fbc:	afa20000 	sw	v0,0(sp)


	switch (chip_num){
bfc07fc0:	8fa20008 	lw	v0,8(sp)
bfc07fc4:	24030001 	li	v1,1
bfc07fc8:	10430006 	beq	v0,v1,bfc07fe4 <memctlc_set_DRAM_chipnum+0x38>
bfc07fcc:	00000000 	nop
bfc07fd0:	24030002 	li	v1,2
bfc07fd4:	1043000c 	beq	v0,v1,bfc08008 <memctlc_set_DRAM_chipnum+0x5c>
bfc07fd8:	00000000 	nop
bfc07fdc:	0bf02007 	j	bfc0801c <memctlc_set_DRAM_chipnum+0x70>
bfc07fe0:	00000000 	nop
		case 1:
			*dcr = (*dcr & (~((unsigned int)DCR_DCHIPSEL_MASK)));
bfc07fe4:	8fa20000 	lw	v0,0(sp)
bfc07fe8:	8c430000 	lw	v1,0(v0)
bfc07fec:	3c02ffff 	lui	v0,0xffff
bfc07ff0:	34427fff 	ori	v0,v0,0x7fff
bfc07ff4:	00621824 	and	v1,v1,v0
bfc07ff8:	8fa20000 	lw	v0,0(sp)
bfc07ffc:	ac430000 	sw	v1,0(v0)
			break;
bfc08000:	0bf02007 	j	bfc0801c <memctlc_set_DRAM_chipnum+0x70>
bfc08004:	00000000 	nop

		case 2:
			*dcr = (*dcr & (~((unsigned int)DCR_DCHIPSEL_MASK))) | (unsigned int)(1<<DCR_DCHIPSEL_FD_S);
bfc08008:	8fa20000 	lw	v0,0(sp)
bfc0800c:	8c420000 	lw	v0,0(v0)
bfc08010:	34438000 	ori	v1,v0,0x8000
bfc08014:	8fa20000 	lw	v0,0(sp)
bfc08018:	ac430000 	sw	v1,0(v0)
			break;
	}

	return;

}
bfc0801c:	27bd0008 	addiu	sp,sp,8
bfc08020:	03e00008 	jr	ra
bfc08024:	00000000 	nop

bfc08028 <memctl_dram_para_set>:


int memctl_dram_para_set(unsigned int width, unsigned int row, unsigned int column, \
			 unsigned int bank,  unsigned int cs)
{
bfc08028:	27bdffe0 	addiu	sp,sp,-32
bfc0802c:	afbf001c 	sw	ra,28(sp)
bfc08030:	afa40020 	sw	a0,32(sp)
bfc08034:	afa50024 	sw	a1,36(sp)
bfc08038:	afa60028 	sw	a2,40(sp)
bfc0803c:	afa7002c 	sw	a3,44(sp)
	volatile unsigned int *p_dcr;


	_memctl_debug_printf("%s, %d: width(%d), row(%d), column(%d), bank(%d), cs(%d)\n",\
				 __FUNCTION__, __LINE__, width, row, column, bank, cs);
	memctlc_set_DRAM_buswidth(width);
bfc08040:	8fa40020 	lw	a0,32(sp)
bfc08044:	0ff01e7a 	jal	bfc079e8 <memctlc_set_DRAM_buswidth>
bfc08048:	00000000 	nop
	memctlc_set_DRAM_colnum(column);
bfc0804c:	8fa40028 	lw	a0,40(sp)
bfc08050:	0ff01eed 	jal	bfc07bb4 <memctlc_set_DRAM_colnum>
bfc08054:	00000000 	nop
	memctlc_set_DRAM_rownum(row);
bfc08058:	8fa40024 	lw	a0,36(sp)
bfc0805c:	0ff01f3f 	jal	bfc07cfc <memctlc_set_DRAM_rownum>
bfc08060:	00000000 	nop
	memctlc_set_DRAM_banknum(bank);
bfc08064:	8fa4002c 	lw	a0,44(sp)
bfc08068:	0ff01f9f 	jal	bfc07e7c <memctlc_set_DRAM_banknum>
bfc0806c:	00000000 	nop
	memctlc_set_DRAM_chipnum(cs);
bfc08070:	8fa40030 	lw	a0,48(sp)
bfc08074:	0ff01feb 	jal	bfc07fac <memctlc_set_DRAM_chipnum>
bfc08078:	00000000 	nop

	/* Reset PHY FIFO pointer */
	memctlc_dram_phy_reset();
bfc0807c:	0ff01c1b 	jal	bfc0706c <memctlc_dram_phy_reset>
bfc08080:	00000000 	nop

	return MEMCTL_DRAM_PARAM_OK;
bfc08084:	00001021 	move	v0,zero
}
bfc08088:	8fbf001c 	lw	ra,28(sp)
bfc0808c:	27bd0020 	addiu	sp,sp,32
bfc08090:	03e00008 	jr	ra
bfc08094:	00000000 	nop

bfc08098 <memctlc_dram_size_detect>:
 *	The number of bytes of current DRAM chips
 * Note:
 *	None
 */
unsigned int memctlc_dram_size_detect(void)
{
bfc08098:	27bdffa8 	addiu	sp,sp,-88
bfc0809c:	afbf0054 	sw	ra,84(sp)
	unsigned int i;
	unsigned int width, row, col, bk, cs, max_bk;
	volatile unsigned int *p_dcr;
	volatile unsigned int *test_addr0, *test_addr1;
	volatile unsigned int test_v0, test_v1, tmp;
	p_dcr	    = (volatile unsigned int *)DCR;
bfc080a0:	3c02b800 	lui	v0,0xb800
bfc080a4:	34421004 	ori	v0,v0,0x1004
bfc080a8:	afa20020 	sw	v0,32(sp)

	/* Intialize DRAM parameters */
	width = MEMCTL_DRAM_MIN_WIDTH;
bfc080ac:	24020008 	li	v0,8
bfc080b0:	afa20038 	sw	v0,56(sp)
	row   = MEMCTL_DRAM_MIN_ROWS ;
bfc080b4:	24020800 	li	v0,2048
bfc080b8:	afa20034 	sw	v0,52(sp)
	col   = MEMCTL_DRAM_MIN_COLS ;
bfc080bc:	24020100 	li	v0,256
bfc080c0:	afa20030 	sw	v0,48(sp)
	cs    = MEMCTL_DRAM_MIN_CS;
bfc080c4:	24020001 	li	v0,1

	
	/* Configure to the maximun bank number */
	if(memctlc_is_DDR()){
bfc080c8:	0ff00ca2 	jal	bfc03288 <memctlc_is_DDR>
bfc080cc:	afa20028 	sw	v0,40(sp)
bfc080d0:	10400004 	beqz	v0,bfc080e4 <memctlc_dram_size_detect+0x4c>
bfc080d4:	00000000 	nop
		bk = MEMCTL_DRAM_DDR_MIN_BANK_NUM;
bfc080d8:	24020002 	li	v0,2
bfc080dc:	0bf02042 	j	bfc08108 <memctlc_dram_size_detect+0x70>
bfc080e0:	afa2002c 	sw	v0,44(sp)
	}else if(memctlc_is_DDR2()){
bfc080e4:	0ff00cbd 	jal	bfc032f4 <memctlc_is_DDR2>
bfc080e8:	00000000 	nop
bfc080ec:	10400004 	beqz	v0,bfc08100 <memctlc_dram_size_detect+0x68>
bfc080f0:	00000000 	nop
		bk = MEMCTL_DRAM_DDR2_MIN_BANK_NUM;
bfc080f4:	24020004 	li	v0,4
bfc080f8:	0bf02042 	j	bfc08108 <memctlc_dram_size_detect+0x70>
bfc080fc:	afa2002c 	sw	v0,44(sp)
	}else{
		bk = MEMCTL_DRAM_DDR3_MIN_BANK_NUM;
bfc08100:	24020004 	li	v0,4
bfc08104:	afa2002c 	sw	v0,44(sp)
	}	

	
	/* 0. Buswidth detection */
	test_addr0 = (volatile unsigned int *)(0xA0000000);
bfc08108:	3c02a000 	lui	v0,0xa000
bfc0810c:	afa2001c 	sw	v0,28(sp)
	test_v0 = 0x12345678;
bfc08110:	3c021234 	lui	v0,0x1234
bfc08114:	34425678 	ori	v0,v0,0x5678
bfc08118:	afa20040 	sw	v0,64(sp)
	test_v1 = 0x00000000;
bfc0811c:	afa00044 	sw	zero,68(sp)
	if(MEMCTL_DRAM_PARAM_OK ==  memctl_dram_para_set(MEMCTL_DRAM_MAX_WIDTH, row, col, bk , cs)){
bfc08120:	8fa20028 	lw	v0,40(sp)
bfc08124:	afa20010 	sw	v0,16(sp)
bfc08128:	24040010 	li	a0,16
bfc0812c:	8fa50034 	lw	a1,52(sp)
bfc08130:	8fa60030 	lw	a2,48(sp)
bfc08134:	0ff0200a 	jal	bfc08028 <memctl_dram_para_set>
bfc08138:	8fa7002c 	lw	a3,44(sp)
bfc0813c:	14400013 	bnez	v0,bfc0818c <memctlc_dram_size_detect+0xf4>
bfc08140:	00000000 	nop
			memctlc_dram_phy_reset();
bfc08144:	0ff01c1b 	jal	bfc0706c <memctlc_dram_phy_reset>
bfc08148:	00000000 	nop
			*test_addr0 = test_v1;
bfc0814c:	8fa30044 	lw	v1,68(sp)
bfc08150:	8fa2001c 	lw	v0,28(sp)
bfc08154:	ac430000 	sw	v1,0(v0)
			*test_addr0 = test_v0;
bfc08158:	8fa30040 	lw	v1,64(sp)
bfc0815c:	8fa2001c 	lw	v0,28(sp)
bfc08160:	ac430000 	sw	v1,0(v0)
			//_memctl_debug_printf("test_addr(0x%08x)!= test_v0(0x%08x)\n", *test_addr0, test_v0);
			if( test_v0 !=  *test_addr0 ){
bfc08164:	8fa2001c 	lw	v0,28(sp)
bfc08168:	8c430000 	lw	v1,0(v0)
bfc0816c:	8fa20040 	lw	v0,64(sp)
bfc08170:	10620004 	beq	v1,v0,bfc08184 <memctlc_dram_size_detect+0xec>
bfc08174:	00000000 	nop
				width = MEMCTL_DRAM_MIN_WIDTH;
bfc08178:	24020008 	li	v0,8
bfc0817c:	0bf02063 	j	bfc0818c <memctlc_dram_size_detect+0xf4>
bfc08180:	afa20038 	sw	v0,56(sp)
			}else{
				width = MEMCTL_DRAM_MAX_WIDTH;
bfc08184:	24020010 	li	v0,16
bfc08188:	afa20038 	sw	v0,56(sp)
			}
	}


	/* 1. Chip detection */
	test_addr0 = (volatile unsigned int *)(0xA0000000);
bfc0818c:	3c02a000 	lui	v0,0xa000
bfc08190:	afa2001c 	sw	v0,28(sp)
	test_v0 = 0xCACA0000;
bfc08194:	3c02caca 	lui	v0,0xcaca
bfc08198:	afa20040 	sw	v0,64(sp)
	test_v1 = 0xACAC0000;
bfc0819c:	3c02acac 	lui	v0,0xacac
bfc081a0:	afa20044 	sw	v0,68(sp)
	if(MEMCTL_DRAM_PARAM_OK ==  memctl_dram_para_set(width, row, col, bk , MEMCTL_DRAM_MAX_CS)){
bfc081a4:	24020002 	li	v0,2
bfc081a8:	afa20010 	sw	v0,16(sp)
bfc081ac:	8fa40038 	lw	a0,56(sp)
bfc081b0:	8fa50034 	lw	a1,52(sp)
bfc081b4:	8fa60030 	lw	a2,48(sp)
bfc081b8:	0ff0200a 	jal	bfc08028 <memctl_dram_para_set>
bfc081bc:	8fa7002c 	lw	a3,44(sp)
bfc081c0:	1440003a 	bnez	v0,bfc082ac <memctlc_dram_size_detect+0x214>
bfc081c4:	00000000 	nop
		while(cs < MEMCTL_DRAM_MAX_CS){
bfc081c8:	0bf020a1 	j	bfc08284 <memctlc_dram_size_detect+0x1ec>
bfc081cc:	00000000 	nop
			memctlc_dram_phy_reset();
bfc081d0:	0ff01c1b 	jal	bfc0706c <memctlc_dram_phy_reset>
bfc081d4:	00000000 	nop
			test_addr1 = (volatile unsigned int *)(0xA0000000 + (width/8)*col*row*bk*cs);
bfc081d8:	8fa20038 	lw	v0,56(sp)
bfc081dc:	000218c2 	srl	v1,v0,0x3
bfc081e0:	8fa20030 	lw	v0,48(sp)
bfc081e4:	70621802 	mul	v1,v1,v0
bfc081e8:	8fa20034 	lw	v0,52(sp)
bfc081ec:	70621802 	mul	v1,v1,v0
bfc081f0:	8fa2002c 	lw	v0,44(sp)
bfc081f4:	70621802 	mul	v1,v1,v0
bfc081f8:	8fa20028 	lw	v0,40(sp)
bfc081fc:	70621802 	mul	v1,v1,v0
bfc08200:	3c02a000 	lui	v0,0xa000
bfc08204:	00621021 	addu	v0,v1,v0
bfc08208:	afa20018 	sw	v0,24(sp)
			*test_addr0 = 0x0;
bfc0820c:	8fa2001c 	lw	v0,28(sp)
bfc08210:	ac400000 	sw	zero,0(v0)
			*test_addr1 = 0x0;
bfc08214:	8fa20018 	lw	v0,24(sp)
bfc08218:	ac400000 	sw	zero,0(v0)
			*test_addr0 = test_v0;
bfc0821c:	8fa30040 	lw	v1,64(sp)
bfc08220:	8fa2001c 	lw	v0,28(sp)
bfc08224:	ac430000 	sw	v1,0(v0)
			*test_addr1 = test_v1;
bfc08228:	8fa30044 	lw	v1,68(sp)
bfc0822c:	8fa20018 	lw	v0,24(sp)
bfc08230:	ac430000 	sw	v1,0(v0)
			if( test_v0 ==  *test_addr0 ){
bfc08234:	8fa2001c 	lw	v0,28(sp)
bfc08238:	8c430000 	lw	v1,0(v0)
bfc0823c:	8fa20040 	lw	v0,64(sp)
bfc08240:	14620016 	bne	v1,v0,bfc0829c <memctlc_dram_size_detect+0x204>
bfc08244:	00000000 	nop
				if( test_v1 ==  *test_addr1 ){
bfc08248:	8fa20018 	lw	v0,24(sp)
bfc0824c:	8c430000 	lw	v1,0(v0)
bfc08250:	8fa20044 	lw	v0,68(sp)
bfc08254:	14620014 	bne	v1,v0,bfc082a8 <memctlc_dram_size_detect+0x210>
bfc08258:	00000000 	nop
					cs = cs << 1;
bfc0825c:	8fa20028 	lw	v0,40(sp)
bfc08260:	00021040 	sll	v0,v0,0x1
bfc08264:	afa20028 	sw	v0,40(sp)
					test_v0++;
bfc08268:	8fa20040 	lw	v0,64(sp)
bfc0826c:	24420001 	addiu	v0,v0,1
bfc08270:	afa20040 	sw	v0,64(sp)
					test_v1++;
bfc08274:	8fa20044 	lw	v0,68(sp)
bfc08278:	24420001 	addiu	v0,v0,1
bfc0827c:	afa20044 	sw	v0,68(sp)
					continue;
bfc08280:	00000000 	nop
	/* 1. Chip detection */
	test_addr0 = (volatile unsigned int *)(0xA0000000);
	test_v0 = 0xCACA0000;
	test_v1 = 0xACAC0000;
	if(MEMCTL_DRAM_PARAM_OK ==  memctl_dram_para_set(width, row, col, bk , MEMCTL_DRAM_MAX_CS)){
		while(cs < MEMCTL_DRAM_MAX_CS){
bfc08284:	8fa20028 	lw	v0,40(sp)
bfc08288:	2c420002 	sltiu	v0,v0,2
bfc0828c:	1440ffd0 	bnez	v0,bfc081d0 <memctlc_dram_size_detect+0x138>
bfc08290:	00000000 	nop
bfc08294:	0bf020ab 	j	bfc082ac <memctlc_dram_size_detect+0x214>
bfc08298:	00000000 	nop
					test_v0++;
					test_v1++;
					continue;
				}
			}
			break;
bfc0829c:	00000000 	nop
bfc082a0:	0bf020ab 	j	bfc082ac <memctlc_dram_size_detect+0x214>
bfc082a4:	00000000 	nop
bfc082a8:	00000000 	nop
		}
	}

	/* 2. Bank detction */
	test_addr0 = (volatile unsigned int *)(0xA0000000);
bfc082ac:	3c02a000 	lui	v0,0xa000
bfc082b0:	afa2001c 	sw	v0,28(sp)
	test_v0 = 0x33330000;
bfc082b4:	3c023333 	lui	v0,0x3333
bfc082b8:	afa20040 	sw	v0,64(sp)
	test_v1 = 0xCCCC0000;
bfc082bc:	3c02cccc 	lui	v0,0xcccc
	if(memctlc_is_DDR()){
bfc082c0:	0ff00ca2 	jal	bfc03288 <memctlc_is_DDR>
bfc082c4:	afa20044 	sw	v0,68(sp)
bfc082c8:	10400004 	beqz	v0,bfc082dc <memctlc_dram_size_detect+0x244>
bfc082cc:	00000000 	nop
		max_bk = MEMCTL_DRAM_DDR_MAX_BANK_NUM;
bfc082d0:	24020004 	li	v0,4
bfc082d4:	0bf020c0 	j	bfc08300 <memctlc_dram_size_detect+0x268>
bfc082d8:	afa20024 	sw	v0,36(sp)
	}else if(memctlc_is_DDR2()){
bfc082dc:	0ff00cbd 	jal	bfc032f4 <memctlc_is_DDR2>
bfc082e0:	00000000 	nop
bfc082e4:	10400004 	beqz	v0,bfc082f8 <memctlc_dram_size_detect+0x260>
bfc082e8:	00000000 	nop
		max_bk = MEMCTL_DRAM_DDR2_MAX_BANK_NUM;
bfc082ec:	24020008 	li	v0,8
bfc082f0:	0bf020c0 	j	bfc08300 <memctlc_dram_size_detect+0x268>
bfc082f4:	afa20024 	sw	v0,36(sp)
	}else{
		max_bk = MEMCTL_DRAM_DDR3_MAX_BANK_NUM;
bfc082f8:	24020008 	li	v0,8
bfc082fc:	afa20024 	sw	v0,36(sp)
	}

	//_memctl_debug_printf("%s,%d: width(%d), row(%d), col(%d), max_bk(%d), cs(%d)\n", __FUNCTION__, __LINE__, width, row, col, max_bk, cs);
	if(MEMCTL_DRAM_PARAM_OK ==  memctl_dram_para_set(width, row, col, max_bk, cs)){
bfc08300:	8fa20028 	lw	v0,40(sp)
bfc08304:	afa20010 	sw	v0,16(sp)
bfc08308:	8fa40038 	lw	a0,56(sp)
bfc0830c:	8fa50034 	lw	a1,52(sp)
bfc08310:	8fa60030 	lw	a2,48(sp)
bfc08314:	0ff0200a 	jal	bfc08028 <memctl_dram_para_set>
bfc08318:	8fa70024 	lw	a3,36(sp)
bfc0831c:	1440003f 	bnez	v0,bfc0841c <memctlc_dram_size_detect+0x384>
bfc08320:	00000000 	nop
		while(bk < max_bk){
bfc08324:	0bf020fc 	j	bfc083f0 <memctlc_dram_size_detect+0x358>
bfc08328:	00000000 	nop
			memctlc_dram_phy_reset();
bfc0832c:	0ff01c1b 	jal	bfc0706c <memctlc_dram_phy_reset>
bfc08330:	00000000 	nop
			test_addr1 = (volatile unsigned int *)(0xA0000000 + (width/8)*col*row*bk);
bfc08334:	8fa20038 	lw	v0,56(sp)
bfc08338:	000218c2 	srl	v1,v0,0x3
bfc0833c:	8fa20030 	lw	v0,48(sp)
bfc08340:	70621802 	mul	v1,v1,v0
bfc08344:	8fa20034 	lw	v0,52(sp)
bfc08348:	70621802 	mul	v1,v1,v0
bfc0834c:	8fa2002c 	lw	v0,44(sp)
bfc08350:	70621802 	mul	v1,v1,v0
bfc08354:	3c02a000 	lui	v0,0xa000
bfc08358:	00621021 	addu	v0,v1,v0
bfc0835c:	afa20018 	sw	v0,24(sp)
			_memctl_debug_printf("DCR(0x%08x):", *((volatile unsigned int *)DCR) );
			_memctl_debug_printf("BK:(0x%08p)\n", test_addr1);
			*test_addr0 = 0x0;
bfc08360:	8fa2001c 	lw	v0,28(sp)
bfc08364:	ac400000 	sw	zero,0(v0)
			*test_addr1 = 0x0;
bfc08368:	8fa20018 	lw	v0,24(sp)
bfc0836c:	ac400000 	sw	zero,0(v0)
			*test_addr0 = test_v0;
bfc08370:	8fa30040 	lw	v1,64(sp)
bfc08374:	8fa2001c 	lw	v0,28(sp)
bfc08378:	ac430000 	sw	v1,0(v0)
			*test_addr1 = test_v1;
bfc0837c:	8fa30044 	lw	v1,68(sp)
bfc08380:	8fa20018 	lw	v0,24(sp)
bfc08384:	ac430000 	sw	v1,0(v0)
			tmp = *test_addr0;
bfc08388:	8fa2001c 	lw	v0,28(sp)
bfc0838c:	8c420000 	lw	v0,0(v0)
bfc08390:	afa20048 	sw	v0,72(sp)
			tmp = *test_addr1;
bfc08394:	8fa20018 	lw	v0,24(sp)
bfc08398:	8c420000 	lw	v0,0(v0)
bfc0839c:	afa20048 	sw	v0,72(sp)
			//_memctl_debug_printf("test_addr0(0x%p):0x%x\n", test_addr0, *test_addr0);
			//_memctl_debug_printf("test_addr1(0x%p):0x%x\n", test_addr1, *test_addr1);
			if( test_v0 ==  *test_addr0 ){
bfc083a0:	8fa2001c 	lw	v0,28(sp)
bfc083a4:	8c430000 	lw	v1,0(v0)
bfc083a8:	8fa20040 	lw	v0,64(sp)
bfc083ac:	14620017 	bne	v1,v0,bfc0840c <memctlc_dram_size_detect+0x374>
bfc083b0:	00000000 	nop
				if( test_v1 ==  *test_addr1 ){
bfc083b4:	8fa20018 	lw	v0,24(sp)
bfc083b8:	8c430000 	lw	v1,0(v0)
bfc083bc:	8fa20044 	lw	v0,68(sp)
bfc083c0:	14620015 	bne	v1,v0,bfc08418 <memctlc_dram_size_detect+0x380>
bfc083c4:	00000000 	nop
					bk = bk << 1;
bfc083c8:	8fa2002c 	lw	v0,44(sp)
bfc083cc:	00021040 	sll	v0,v0,0x1
bfc083d0:	afa2002c 	sw	v0,44(sp)
					test_v0++;
bfc083d4:	8fa20040 	lw	v0,64(sp)
bfc083d8:	24420001 	addiu	v0,v0,1
bfc083dc:	afa20040 	sw	v0,64(sp)
					test_v1++;
bfc083e0:	8fa20044 	lw	v0,68(sp)
bfc083e4:	24420001 	addiu	v0,v0,1
bfc083e8:	afa20044 	sw	v0,68(sp)
					continue;
bfc083ec:	00000000 	nop
		max_bk = MEMCTL_DRAM_DDR3_MAX_BANK_NUM;
	}

	//_memctl_debug_printf("%s,%d: width(%d), row(%d), col(%d), max_bk(%d), cs(%d)\n", __FUNCTION__, __LINE__, width, row, col, max_bk, cs);
	if(MEMCTL_DRAM_PARAM_OK ==  memctl_dram_para_set(width, row, col, max_bk, cs)){
		while(bk < max_bk){
bfc083f0:	8fa3002c 	lw	v1,44(sp)
bfc083f4:	8fa20024 	lw	v0,36(sp)
bfc083f8:	0062102b 	sltu	v0,v1,v0
bfc083fc:	1440ffcb 	bnez	v0,bfc0832c <memctlc_dram_size_detect+0x294>
bfc08400:	00000000 	nop
bfc08404:	0bf02107 	j	bfc0841c <memctlc_dram_size_detect+0x384>
bfc08408:	00000000 	nop
					test_v0++;
					test_v1++;
					continue;
				}
			}
			break;
bfc0840c:	00000000 	nop
bfc08410:	0bf02107 	j	bfc0841c <memctlc_dram_size_detect+0x384>
bfc08414:	00000000 	nop
bfc08418:	00000000 	nop
		}
	}

	/* 3. Row detction */
	test_addr0 = (volatile unsigned int *)(0xA0000000);
bfc0841c:	3c02a000 	lui	v0,0xa000
bfc08420:	afa2001c 	sw	v0,28(sp)
	test_v0 = 0xCAFE0000;
bfc08424:	3c02cafe 	lui	v0,0xcafe
bfc08428:	afa20040 	sw	v0,64(sp)
	test_v1 = 0xDEAD0000;
bfc0842c:	3c02dead 	lui	v0,0xdead
bfc08430:	afa20044 	sw	v0,68(sp)
	if(MEMCTL_DRAM_PARAM_OK ==  memctl_dram_para_set(width, MEMCTL_DRAM_MAX_ROWS, col, bk, cs)){
bfc08434:	8fa20028 	lw	v0,40(sp)
bfc08438:	afa20010 	sw	v0,16(sp)
bfc0843c:	8fa40038 	lw	a0,56(sp)
bfc08440:	3c050001 	lui	a1,0x1
bfc08444:	8fa60030 	lw	a2,48(sp)
bfc08448:	0ff0200a 	jal	bfc08028 <memctl_dram_para_set>
bfc0844c:	8fa7002c 	lw	a3,44(sp)
bfc08450:	14400039 	bnez	v0,bfc08538 <memctlc_dram_size_detect+0x4a0>
bfc08454:	00000000 	nop
		while(row < MEMCTL_DRAM_MAX_ROWS){
bfc08458:	0bf02143 	j	bfc0850c <memctlc_dram_size_detect+0x474>
bfc0845c:	00000000 	nop
			memctlc_dram_phy_reset();
bfc08460:	0ff01c1b 	jal	bfc0706c <memctlc_dram_phy_reset>
bfc08464:	00000000 	nop
			test_addr1 = (volatile unsigned int *)(0xA0000000 + (width/8)*col*row);
bfc08468:	8fa20038 	lw	v0,56(sp)
bfc0846c:	000218c2 	srl	v1,v0,0x3
bfc08470:	8fa20030 	lw	v0,48(sp)
bfc08474:	70621802 	mul	v1,v1,v0
bfc08478:	8fa20034 	lw	v0,52(sp)
bfc0847c:	70621802 	mul	v1,v1,v0
bfc08480:	3c02a000 	lui	v0,0xa000
bfc08484:	00621021 	addu	v0,v1,v0
bfc08488:	afa20018 	sw	v0,24(sp)
			_memctl_debug_printf("DCR(0x%08x):", *((volatile unsigned int *)DCR) );
			_memctl_debug_printf("row:(0x%08p)\n", test_addr1);
			*test_addr0 = test_v0;
bfc0848c:	8fa30040 	lw	v1,64(sp)
bfc08490:	8fa2001c 	lw	v0,28(sp)
bfc08494:	ac430000 	sw	v1,0(v0)
			*test_addr1 = test_v1;
bfc08498:	8fa30044 	lw	v1,68(sp)
bfc0849c:	8fa20018 	lw	v0,24(sp)
bfc084a0:	ac430000 	sw	v1,0(v0)
			tmp = *test_addr0;
bfc084a4:	8fa2001c 	lw	v0,28(sp)
bfc084a8:	8c420000 	lw	v0,0(v0)
bfc084ac:	afa20048 	sw	v0,72(sp)
			tmp = *test_addr1;
bfc084b0:	8fa20018 	lw	v0,24(sp)
bfc084b4:	8c420000 	lw	v0,0(v0)
bfc084b8:	afa20048 	sw	v0,72(sp)
			_memctl_debug_printf("test_addr0(0x%p):0x%x\n", test_addr0, *test_addr0);
			_memctl_debug_printf("test_addr1(0x%p):0x%x\n", test_addr1, *test_addr1);
			_memctl_debug_printf("row = %d\n", row);
			if( test_v0 ==  *test_addr0 ){
bfc084bc:	8fa2001c 	lw	v0,28(sp)
bfc084c0:	8c430000 	lw	v1,0(v0)
bfc084c4:	8fa20040 	lw	v0,64(sp)
bfc084c8:	14620017 	bne	v1,v0,bfc08528 <memctlc_dram_size_detect+0x490>
bfc084cc:	00000000 	nop
				if( test_v1 ==  *test_addr1 ){
bfc084d0:	8fa20018 	lw	v0,24(sp)
bfc084d4:	8c430000 	lw	v1,0(v0)
bfc084d8:	8fa20044 	lw	v0,68(sp)
bfc084dc:	14620015 	bne	v1,v0,bfc08534 <memctlc_dram_size_detect+0x49c>
bfc084e0:	00000000 	nop
					row = row << 1;
bfc084e4:	8fa20034 	lw	v0,52(sp)
bfc084e8:	00021040 	sll	v0,v0,0x1
bfc084ec:	afa20034 	sw	v0,52(sp)
					test_v0++;
bfc084f0:	8fa20040 	lw	v0,64(sp)
bfc084f4:	24420001 	addiu	v0,v0,1
bfc084f8:	afa20040 	sw	v0,64(sp)
					test_v1++;
bfc084fc:	8fa20044 	lw	v0,68(sp)
bfc08500:	24420001 	addiu	v0,v0,1
bfc08504:	afa20044 	sw	v0,68(sp)
					continue;
bfc08508:	00000000 	nop
	/* 3. Row detction */
	test_addr0 = (volatile unsigned int *)(0xA0000000);
	test_v0 = 0xCAFE0000;
	test_v1 = 0xDEAD0000;
	if(MEMCTL_DRAM_PARAM_OK ==  memctl_dram_para_set(width, MEMCTL_DRAM_MAX_ROWS, col, bk, cs)){
		while(row < MEMCTL_DRAM_MAX_ROWS){
bfc0850c:	8fa30034 	lw	v1,52(sp)
bfc08510:	3c020001 	lui	v0,0x1
bfc08514:	0062102b 	sltu	v0,v1,v0
bfc08518:	1440ffd1 	bnez	v0,bfc08460 <memctlc_dram_size_detect+0x3c8>
bfc0851c:	00000000 	nop
bfc08520:	0bf0214e 	j	bfc08538 <memctlc_dram_size_detect+0x4a0>
bfc08524:	00000000 	nop
					test_v0++;
					test_v1++;
					continue;
				}
			}
			break;
bfc08528:	00000000 	nop
bfc0852c:	0bf0214e 	j	bfc08538 <memctlc_dram_size_detect+0x4a0>
bfc08530:	00000000 	nop
bfc08534:	00000000 	nop
		}
	}

	/* 4. Column detection */
	test_addr0 = (volatile unsigned int *)(0xA0000000);
bfc08538:	3c02a000 	lui	v0,0xa000
bfc0853c:	afa2001c 	sw	v0,28(sp)
	test_v0 = 0x5A5A0000;
bfc08540:	3c025a5a 	lui	v0,0x5a5a
bfc08544:	afa20040 	sw	v0,64(sp)
	test_v1 = 0xA5A50000;
bfc08548:	3c02a5a5 	lui	v0,0xa5a5
bfc0854c:	afa20044 	sw	v0,68(sp)
	if(MEMCTL_DRAM_PARAM_OK ==  memctl_dram_para_set(width, row, MEMCTL_DRAM_MAX_COLS, bk, cs)){
bfc08550:	8fa20028 	lw	v0,40(sp)
bfc08554:	afa20010 	sw	v0,16(sp)
bfc08558:	8fa40038 	lw	a0,56(sp)
bfc0855c:	8fa50034 	lw	a1,52(sp)
bfc08560:	24061000 	li	a2,4096
bfc08564:	0ff0200a 	jal	bfc08028 <memctl_dram_para_set>
bfc08568:	8fa7002c 	lw	a3,44(sp)
bfc0856c:	1440003a 	bnez	v0,bfc08658 <memctlc_dram_size_detect+0x5c0>
bfc08570:	00000000 	nop
		while(col < MEMCTL_DRAM_MAX_COLS){
bfc08574:	0bf0218c 	j	bfc08630 <memctlc_dram_size_detect+0x598>
bfc08578:	00000000 	nop
			memctlc_dram_phy_reset();
bfc0857c:	0ff01c1b 	jal	bfc0706c <memctlc_dram_phy_reset>
bfc08580:	00000000 	nop
			test_addr1 = (volatile unsigned int *)(0xA0000000 + (width/8)*col);
bfc08584:	8fa20038 	lw	v0,56(sp)
bfc08588:	000218c2 	srl	v1,v0,0x3
bfc0858c:	8fa20030 	lw	v0,48(sp)
bfc08590:	70621802 	mul	v1,v1,v0
bfc08594:	3c02a000 	lui	v0,0xa000
bfc08598:	00621021 	addu	v0,v1,v0
bfc0859c:	afa20018 	sw	v0,24(sp)
			*test_addr0 = 0x0;
bfc085a0:	8fa2001c 	lw	v0,28(sp)
bfc085a4:	ac400000 	sw	zero,0(v0)
			*test_addr1 = 0x0;
bfc085a8:	8fa20018 	lw	v0,24(sp)
bfc085ac:	ac400000 	sw	zero,0(v0)
			_memctl_debug_printf("DCR(0x%08x):", *((volatile unsigned int *)DCR) );
			_memctl_debug_printf("col:(0x%08p)\n", test_addr1);
			*test_addr0 = test_v0;
bfc085b0:	8fa30040 	lw	v1,64(sp)
bfc085b4:	8fa2001c 	lw	v0,28(sp)
bfc085b8:	ac430000 	sw	v1,0(v0)
			*test_addr1 = test_v1;
bfc085bc:	8fa30044 	lw	v1,68(sp)
bfc085c0:	8fa20018 	lw	v0,24(sp)
bfc085c4:	ac430000 	sw	v1,0(v0)
			tmp = *test_addr0;
bfc085c8:	8fa2001c 	lw	v0,28(sp)
bfc085cc:	8c420000 	lw	v0,0(v0)
bfc085d0:	afa20048 	sw	v0,72(sp)
			tmp = *test_addr1;
bfc085d4:	8fa20018 	lw	v0,24(sp)
bfc085d8:	8c420000 	lw	v0,0(v0)
bfc085dc:	afa20048 	sw	v0,72(sp)
			_memctl_debug_printf("test_addr0(0x%p):0x%x\n", test_addr0, *test_addr0);
			_memctl_debug_printf("test_addr1(0x%p):0x%x\n", test_addr1, *test_addr1);
			if( test_v0 ==  *test_addr0 ){
bfc085e0:	8fa2001c 	lw	v0,28(sp)
bfc085e4:	8c430000 	lw	v1,0(v0)
bfc085e8:	8fa20040 	lw	v0,64(sp)
bfc085ec:	14620016 	bne	v1,v0,bfc08648 <memctlc_dram_size_detect+0x5b0>
bfc085f0:	00000000 	nop
				if( test_v1 ==  *test_addr1 ){
bfc085f4:	8fa20018 	lw	v0,24(sp)
bfc085f8:	8c430000 	lw	v1,0(v0)
bfc085fc:	8fa20044 	lw	v0,68(sp)
bfc08600:	14620014 	bne	v1,v0,bfc08654 <memctlc_dram_size_detect+0x5bc>
bfc08604:	00000000 	nop
					col = col << 1;
bfc08608:	8fa20030 	lw	v0,48(sp)
bfc0860c:	00021040 	sll	v0,v0,0x1
bfc08610:	afa20030 	sw	v0,48(sp)
					test_v0++;
bfc08614:	8fa20040 	lw	v0,64(sp)
bfc08618:	24420001 	addiu	v0,v0,1
bfc0861c:	afa20040 	sw	v0,64(sp)
					test_v1++;
bfc08620:	8fa20044 	lw	v0,68(sp)
bfc08624:	24420001 	addiu	v0,v0,1
bfc08628:	afa20044 	sw	v0,68(sp)
					continue;
bfc0862c:	00000000 	nop
	/* 4. Column detection */
	test_addr0 = (volatile unsigned int *)(0xA0000000);
	test_v0 = 0x5A5A0000;
	test_v1 = 0xA5A50000;
	if(MEMCTL_DRAM_PARAM_OK ==  memctl_dram_para_set(width, row, MEMCTL_DRAM_MAX_COLS, bk, cs)){
		while(col < MEMCTL_DRAM_MAX_COLS){
bfc08630:	8fa20030 	lw	v0,48(sp)
bfc08634:	2c421000 	sltiu	v0,v0,4096
bfc08638:	1440ffd0 	bnez	v0,bfc0857c <memctlc_dram_size_detect+0x4e4>
bfc0863c:	00000000 	nop
bfc08640:	0bf02196 	j	bfc08658 <memctlc_dram_size_detect+0x5c0>
bfc08644:	00000000 	nop
					test_v0++;
					test_v1++;
					continue;
				}
			}
			break;
bfc08648:	00000000 	nop
bfc0864c:	0bf02196 	j	bfc08658 <memctlc_dram_size_detect+0x5c0>
bfc08650:	00000000 	nop
bfc08654:	00000000 	nop
		}
	}

	/* 5. Width detction */
	test_addr0 = (volatile unsigned int *)(0xA0000000);
bfc08658:	3c02a000 	lui	v0,0xa000
bfc0865c:	afa2001c 	sw	v0,28(sp)
	test_addr1 = (volatile unsigned int *)(0xA0000000);
bfc08660:	3c02a000 	lui	v0,0xa000
bfc08664:	afa20018 	sw	v0,24(sp)
	if(MEMCTL_DRAM_PARAM_OK ==  memctl_dram_para_set(width, row, col, bk, cs)){
bfc08668:	8fa20028 	lw	v0,40(sp)
bfc0866c:	afa20010 	sw	v0,16(sp)
bfc08670:	8fa40038 	lw	a0,56(sp)
bfc08674:	8fa50034 	lw	a1,52(sp)
bfc08678:	8fa60030 	lw	a2,48(sp)
bfc0867c:	0ff0200a 	jal	bfc08028 <memctl_dram_para_set>
bfc08680:	8fa7002c 	lw	a3,44(sp)
bfc08684:	14400028 	bnez	v0,bfc08728 <memctlc_dram_size_detect+0x690>
bfc08688:	00000000 	nop
		while(width < MEMCTL_DRAM_MAX_WIDTH){
bfc0868c:	0bf021c3 	j	bfc0870c <memctlc_dram_size_detect+0x674>
bfc08690:	00000000 	nop
		memctlc_dram_phy_reset();
bfc08694:	0ff01c1b 	jal	bfc0706c <memctlc_dram_phy_reset>
bfc08698:	00000000 	nop
		*test_addr0 = 0x3333CCCC;
bfc0869c:	8fa2001c 	lw	v0,28(sp)
bfc086a0:	3c033333 	lui	v1,0x3333
bfc086a4:	3463cccc 	ori	v1,v1,0xcccc
bfc086a8:	ac430000 	sw	v1,0(v0)
		__asm__ __volatile__("": : :"memory");
		if( 0x3333CCCC !=  *test_addr0 ){
bfc086ac:	8fa2001c 	lw	v0,28(sp)
bfc086b0:	8c430000 	lw	v1,0(v0)
bfc086b4:	3c023333 	lui	v0,0x3333
bfc086b8:	3442cccc 	ori	v0,v0,0xcccc
bfc086bc:	10620005 	beq	v1,v0,bfc086d4 <memctlc_dram_size_detect+0x63c>
bfc086c0:	00000000 	nop
			width = width >> 1;
bfc086c4:	8fa20038 	lw	v0,56(sp)
bfc086c8:	00021042 	srl	v0,v0,0x1
			continue;
bfc086cc:	0bf021c3 	j	bfc0870c <memctlc_dram_size_detect+0x674>
bfc086d0:	afa20038 	sw	v0,56(sp)
		}
		__asm__ __volatile__("": : :"memory");
		*test_addr1 = 0x12345678;
bfc086d4:	8fa20018 	lw	v0,24(sp)
bfc086d8:	3c031234 	lui	v1,0x1234
bfc086dc:	34635678 	ori	v1,v1,0x5678
bfc086e0:	ac430000 	sw	v1,0(v0)
		__asm__ __volatile__("": : :"memory");
		if( 0x12345678 !=  *test_addr1 ){
bfc086e4:	8fa20018 	lw	v0,24(sp)
bfc086e8:	8c430000 	lw	v1,0(v0)
bfc086ec:	3c021234 	lui	v0,0x1234
bfc086f0:	34425678 	ori	v0,v0,0x5678
bfc086f4:	1062000b 	beq	v1,v0,bfc08724 <memctlc_dram_size_detect+0x68c>
bfc086f8:	00000000 	nop
			width = width >> 1;
bfc086fc:	8fa20038 	lw	v0,56(sp)
bfc08700:	00021042 	srl	v0,v0,0x1
bfc08704:	afa20038 	sw	v0,56(sp)
			continue;
bfc08708:	00000000 	nop

	/* 5. Width detction */
	test_addr0 = (volatile unsigned int *)(0xA0000000);
	test_addr1 = (volatile unsigned int *)(0xA0000000);
	if(MEMCTL_DRAM_PARAM_OK ==  memctl_dram_para_set(width, row, col, bk, cs)){
		while(width < MEMCTL_DRAM_MAX_WIDTH){
bfc0870c:	8fa20038 	lw	v0,56(sp)
bfc08710:	2c420010 	sltiu	v0,v0,16
bfc08714:	1440ffdf 	bnez	v0,bfc08694 <memctlc_dram_size_detect+0x5fc>
bfc08718:	00000000 	nop
bfc0871c:	0bf021ca 	j	bfc08728 <memctlc_dram_size_detect+0x690>
bfc08720:	00000000 	nop
		__asm__ __volatile__("": : :"memory");
		if( 0x12345678 !=  *test_addr1 ){
			width = width >> 1;
			continue;
		}
		break;
bfc08724:	00000000 	nop
		}
	}



	memctlc_dram_phy_reset();
bfc08728:	0ff01c1b 	jal	bfc0706c <memctlc_dram_phy_reset>
bfc0872c:	00000000 	nop
	_memctl_debug_printf("\nAuto DRAM size detect: DCR(0x%xp): 0x%08x\n", p_dcr, *p_dcr);
	if(MEMCTL_DRAM_PARAM_OK ==  memctl_dram_para_set(width, row, col, bk, cs)){
bfc08730:	8fa20028 	lw	v0,40(sp)
bfc08734:	afa20010 	sw	v0,16(sp)
bfc08738:	8fa40038 	lw	a0,56(sp)
bfc0873c:	8fa50034 	lw	a1,52(sp)
bfc08740:	8fa60030 	lw	a2,48(sp)
bfc08744:	0ff0200a 	jal	bfc08028 <memctl_dram_para_set>
bfc08748:	8fa7002c 	lw	a3,44(sp)
bfc0874c:	1440000d 	bnez	v0,bfc08784 <memctlc_dram_size_detect+0x6ec>
bfc08750:	00000000 	nop
		_memctl_debug_printf("total size(Byte): 0x%x\n", (unsigned int)((width/8)*row*col*bk*cs));
		_memctl_debug_printf("total size(MB): %d \n",( (unsigned int)((width/8)*row*col*bk*cs))/0x00100000);
		 #if 0//def CONFIG_RTL8198C_FT1_TEST//write DRAM size to dummy register for FT1/2
			REG32(0xb8000f00)=( (unsigned int)((width/8)*row*col*bk*cs))/0x00100000;
		#endif		
		goto test_pass;
bfc08754:	00000000 	nop
		_memctl_debug_printf("Error! memctl_dram_para_set failed, function: %s, line:%d", __FUNCTION__, __LINE__);
		goto test_fail;
	}

test_pass:
	return (unsigned int)((width/8)*row*col*bk*cs);
bfc08758:	8fa20038 	lw	v0,56(sp)
bfc0875c:	000218c2 	srl	v1,v0,0x3
bfc08760:	8fa20034 	lw	v0,52(sp)
bfc08764:	70621802 	mul	v1,v1,v0
bfc08768:	8fa20030 	lw	v0,48(sp)
bfc0876c:	70621802 	mul	v1,v1,v0
bfc08770:	8fa2002c 	lw	v0,44(sp)
bfc08774:	70621802 	mul	v1,v1,v0
bfc08778:	8fa20028 	lw	v0,40(sp)
bfc0877c:	0bf021e3 	j	bfc0878c <memctlc_dram_size_detect+0x6f4>
bfc08780:	70621002 	mul	v0,v1,v0
			REG32(0xb8000f00)=( (unsigned int)((width/8)*row*col*bk*cs))/0x00100000;
		#endif		
		goto test_pass;
	}else{
		_memctl_debug_printf("Error! memctl_dram_para_set failed, function: %s, line:%d", __FUNCTION__, __LINE__);
		goto test_fail;
bfc08784:	00000000 	nop
	}

test_pass:
	return (unsigned int)((width/8)*row*col*bk*cs);
test_fail:
	return 0;
bfc08788:	00001021 	move	v0,zero
}
bfc0878c:	8fbf0054 	lw	ra,84(sp)
bfc08790:	03e00008 	jr	ra
bfc08794:	27bd0058 	addiu	sp,sp,88

bfc08798 <DDR_cali_API7>:

#endif

#if 1
void DDR_cali_API7(void)
{
bfc08798:	27bdffc8 	addiu	sp,sp,-56
bfc0879c:	afbf0034 	sw	ra,52(sp)
bfc087a0:	afb70030 	sw	s7,48(sp)
bfc087a4:	afb6002c 	sw	s6,44(sp)
bfc087a8:	afb50028 	sw	s5,40(sp)
bfc087ac:	afb40024 	sw	s4,36(sp)
bfc087b0:	afb30020 	sw	s3,32(sp)
bfc087b4:	afb2001c 	sw	s2,28(sp)
bfc087b8:	afb10018 	sw	s1,24(sp)
bfc087bc:	afb00014 	sw	s0,20(sp)
    register int i,j,k;

    register int L0 = 0, R0 = 33, L1 = 0, R1 = 33;
bfc087c0:	00009821 	move	s3,zero
bfc087c4:	24150021 	li	s5,33
bfc087c8:	0000a021 	move	s4,zero
bfc087cc:	24170021 	li	s7,33
    const register int  DRAM_ADR = 0xA0100000;
bfc087d0:	3c12a010 	lui	s2,0xa010
    const register int  DRAM_VAL = 0x5A5AA5A5;
bfc087d4:	3c025a5a 	lui	v0,0x5a5a
bfc087d8:	3450a5a5 	ori	s0,v0,0xa5a5
    const register int  DDCR_ADR = 0xB8001500;
bfc087dc:	3c02b800 	lui	v0,0xb800
bfc087e0:	34561500 	ori	s6,v0,0x1500
    register int  DDCR_VAL = (1<<31);  //digital
bfc087e4:	3c118000 	lui	s1,0x8000
    //register int  DDCR_VAL = (0<<31);  //analog	


    REG32(DRAM_ADR) = DRAM_VAL;
bfc087e8:	02401021 	move	v0,s2
bfc087ec:	02001821 	move	v1,s0
bfc087f0:	ac430000 	sw	v1,0(v0)
    //while( (REG32(DDCR_ADR) & 0x40000000) != 0x40000000);
    //while( (REG32(DDCR_ADR) & 0x40000000) != 0x40000000);


         // Calibrate for DQS0
        for (i = 0; i <= 31; i++)
bfc087f4:	00008021 	move	s0,zero
bfc087f8:	0bf02225 	j	bfc08894 <DDR_cali_API7+0xfc>
bfc087fc:	00000000 	nop
        {
        	_memctl_update_phy_param();
bfc08800:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc08804:	00000000 	nop

            REG32(DDCR_ADR) = (DDCR_VAL & 0x80000000) | ((i-1) << 16);
bfc08808:	02c01021 	move	v0,s6
bfc0880c:	02202021 	move	a0,s1
bfc08810:	3c038000 	lui	v1,0x8000
bfc08814:	00832024 	and	a0,a0,v1
bfc08818:	2603ffff 	addiu	v1,s0,-1
bfc0881c:	00031c00 	sll	v1,v1,0x10
bfc08820:	00831825 	or	v1,a0,v1
bfc08824:	ac430000 	sw	v1,0(v0)

            if (L0 == 0)
bfc08828:	1660000d 	bnez	s3,bfc08860 <DDR_cali_API7+0xc8>
bfc0882c:	00000000 	nop
            {   if ((REG32(DRAM_ADR) & 0x00FF00FF) == 0x005A00A5)        {      L0 = i;         }
bfc08830:	02401021 	move	v0,s2
bfc08834:	8c430000 	lw	v1,0(v0)
bfc08838:	3c0200ff 	lui	v0,0xff
bfc0883c:	344200ff 	ori	v0,v0,0xff
bfc08840:	00621824 	and	v1,v1,v0
bfc08844:	3c02005a 	lui	v0,0x5a
bfc08848:	344200a5 	ori	v0,v0,0xa5
bfc0884c:	14620010 	bne	v1,v0,bfc08890 <DDR_cali_API7+0xf8>
bfc08850:	00000000 	nop
bfc08854:	02009821 	move	s3,s0
bfc08858:	0bf02224 	j	bfc08890 <DDR_cali_API7+0xf8>
bfc0885c:	00000000 	nop
		 

            }
            else
            {   if ((REG32(DRAM_ADR) & 0x00FF00FF) != 0x005A00A5)          {   
bfc08860:	02401021 	move	v0,s2
bfc08864:	8c430000 	lw	v1,0(v0)
bfc08868:	3c0200ff 	lui	v0,0xff
bfc0886c:	344200ff 	ori	v0,v0,0xff
bfc08870:	00621824 	and	v1,v1,v0
bfc08874:	3c02005a 	lui	v0,0x5a
bfc08878:	344200a5 	ori	v0,v0,0xa5
bfc0887c:	10620004 	beq	v1,v0,bfc08890 <DDR_cali_API7+0xf8>
bfc08880:	00000000 	nop
			
			R0 = i - 1;            break;            }
bfc08884:	2615ffff 	addiu	s5,s0,-1
bfc08888:	0bf02228 	j	bfc088a0 <DDR_cali_API7+0x108>
bfc0888c:	00000000 	nop
    //while( (REG32(DDCR_ADR) & 0x40000000) != 0x40000000);
    //while( (REG32(DDCR_ADR) & 0x40000000) != 0x40000000);


         // Calibrate for DQS0
        for (i = 0; i <= 31; i++)
bfc08890:	26100001 	addiu	s0,s0,1
bfc08894:	2a020020 	slti	v0,s0,32
bfc08898:	1440ffd9 	bnez	v0,bfc08800 <DDR_cali_API7+0x68>
bfc0889c:	00000000 	nop
            {   if ((REG32(DRAM_ADR) & 0x00FF00FF) != 0x005A00A5)          {   
			
			R0 = i - 1;            break;            }
            }
        }
        DDCR_VAL = (DDCR_VAL & 0x80000000) | (((L0 + R0) >> 1) << 16);
bfc088a0:	02201821 	move	v1,s1
bfc088a4:	3c028000 	lui	v0,0x8000
bfc088a8:	00621824 	and	v1,v1,v0
bfc088ac:	02751021 	addu	v0,s3,s5
bfc088b0:	00021043 	sra	v0,v0,0x1
bfc088b4:	00021400 	sll	v0,v0,0x10
bfc088b8:	00621025 	or	v0,v1,v0
bfc088bc:	00408821 	move	s1,v0
        REG32(DDCR_ADR) = DDCR_VAL;
bfc088c0:	02c01021 	move	v0,s6
bfc088c4:	02201821 	move	v1,s1
bfc088c8:	ac430000 	sw	v1,0(v0)

                 // Calibrate for DQS1
        for (i = 0; i <= 31; i++)
bfc088cc:	00008021 	move	s0,zero
bfc088d0:	0bf0225b 	j	bfc0896c <DDR_cali_API7+0x1d4>
bfc088d4:	00000000 	nop
        {
        	_memctl_update_phy_param();
bfc088d8:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc088dc:	00000000 	nop

            REG32(DDCR_ADR) = (DDCR_VAL & 0xFFFF0000) | ((i-1) << 8);
bfc088e0:	02c01021 	move	v0,s6
bfc088e4:	02202021 	move	a0,s1
bfc088e8:	3c03ffff 	lui	v1,0xffff
bfc088ec:	00832024 	and	a0,a0,v1
bfc088f0:	2603ffff 	addiu	v1,s0,-1
bfc088f4:	00031a00 	sll	v1,v1,0x8
bfc088f8:	00831825 	or	v1,a0,v1
bfc088fc:	ac430000 	sw	v1,0(v0)
            if (L1 == 0)
bfc08900:	1680000d 	bnez	s4,bfc08938 <DDR_cali_API7+0x1a0>
bfc08904:	00000000 	nop
            {    if ((REG32(DRAM_ADR) & 0xFF00FF00) == 0x5A00A500)        {   L1 = i;     }
bfc08908:	02401021 	move	v0,s2
bfc0890c:	8c430000 	lw	v1,0(v0)
bfc08910:	3c02ff00 	lui	v0,0xff00
bfc08914:	3442ff00 	ori	v0,v0,0xff00
bfc08918:	00621824 	and	v1,v1,v0
bfc0891c:	3c025a00 	lui	v0,0x5a00
bfc08920:	3442a500 	ori	v0,v0,0xa500
bfc08924:	14620010 	bne	v1,v0,bfc08968 <DDR_cali_API7+0x1d0>
bfc08928:	00000000 	nop
bfc0892c:	0200a021 	move	s4,s0
bfc08930:	0bf0225a 	j	bfc08968 <DDR_cali_API7+0x1d0>
bfc08934:	00000000 	nop
		
            }
            else
            {   if ((REG32(DRAM_ADR) & 0xFF00FF00) != 0x5A00A500)        {   
bfc08938:	02401021 	move	v0,s2
bfc0893c:	8c430000 	lw	v1,0(v0)
bfc08940:	3c02ff00 	lui	v0,0xff00
bfc08944:	3442ff00 	ori	v0,v0,0xff00
bfc08948:	00621824 	and	v1,v1,v0
bfc0894c:	3c025a00 	lui	v0,0x5a00
bfc08950:	3442a500 	ori	v0,v0,0xa500
bfc08954:	10620004 	beq	v1,v0,bfc08968 <DDR_cali_API7+0x1d0>
bfc08958:	00000000 	nop
				
			R1 = i - 1;             break;             }
bfc0895c:	2617ffff 	addiu	s7,s0,-1
bfc08960:	0bf0225e 	j	bfc08978 <DDR_cali_API7+0x1e0>
bfc08964:	00000000 	nop
        }
        DDCR_VAL = (DDCR_VAL & 0x80000000) | (((L0 + R0) >> 1) << 16);
        REG32(DDCR_ADR) = DDCR_VAL;

                 // Calibrate for DQS1
        for (i = 0; i <= 31; i++)
bfc08968:	26100001 	addiu	s0,s0,1
bfc0896c:	2a020020 	slti	v0,s0,32
bfc08970:	1440ffd9 	bnez	v0,bfc088d8 <DDR_cali_API7+0x140>
bfc08974:	00000000 	nop
      

#if 1//DDR_DBG
        _memctl_debug_printf("\nLDQS0:%d R0:%d C0:%d\n",  L0, R0, (L0 + R0) >> 1);
       _memctl_debug_printf("LDQS1:%d R1:%d C1:%d\n",  L1, R1, (L1 + R1) >> 1);
	   REG32(0xb8001500) &=0xFFE0E0FF;
bfc08978:	3c02b800 	lui	v0,0xb800
bfc0897c:	34421500 	ori	v0,v0,0x1500
bfc08980:	3c03b800 	lui	v1,0xb800
bfc08984:	34631500 	ori	v1,v1,0x1500
bfc08988:	8c640000 	lw	a0,0(v1)
bfc0898c:	3c03ffe0 	lui	v1,0xffe0
bfc08990:	3463e0ff 	ori	v1,v1,0xe0ff
bfc08994:	00831824 	and	v1,a0,v1
bfc08998:	ac430000 	sw	v1,0(v0)
	   REG32(0xb8001500) |=  ((L0 + R0)/8)<<16;
bfc0899c:	3c02b800 	lui	v0,0xb800
bfc089a0:	34431500 	ori	v1,v0,0x1500
bfc089a4:	3c02b800 	lui	v0,0xb800
bfc089a8:	34421500 	ori	v0,v0,0x1500
bfc089ac:	8c440000 	lw	a0,0(v0)
bfc089b0:	02751021 	addu	v0,s3,s5
bfc089b4:	24450007 	addiu	a1,v0,7
bfc089b8:	28460000 	slti	a2,v0,0
bfc089bc:	00a6100b 	movn	v0,a1,a2
bfc089c0:	000210c3 	sra	v0,v0,0x3
bfc089c4:	00021400 	sll	v0,v0,0x10
bfc089c8:	00821025 	or	v0,a0,v0
bfc089cc:	ac620000 	sw	v0,0(v1)
	   REG32(0xb8001500) |= ((L1 + R1)/8)<<8;
bfc089d0:	3c02b800 	lui	v0,0xb800
bfc089d4:	34431500 	ori	v1,v0,0x1500
bfc089d8:	3c02b800 	lui	v0,0xb800
bfc089dc:	34421500 	ori	v0,v0,0x1500
bfc089e0:	8c440000 	lw	a0,0(v0)
bfc089e4:	02971021 	addu	v0,s4,s7
bfc089e8:	24450007 	addiu	a1,v0,7
bfc089ec:	28460000 	slti	a2,v0,0
bfc089f0:	00a6100b 	movn	v0,a1,a2
bfc089f4:	000210c3 	sra	v0,v0,0x3
bfc089f8:	00021200 	sll	v0,v0,0x8
bfc089fc:	00821025 	or	v0,a0,v0
bfc08a00:	ac620000 	sw	v0,0(v1)
	   // REG32(0xb8001500) |=  (((L0 + R0)/2)-3)<<16;
	  // REG32(0xb8001500) |= (((L1 + R1)/2)-3)<<8;
	_memctl_debug_printf("DACCR(0xb8001500)=0x%x\n",REG32(0xb8001500) );
#endif

}
bfc08a04:	8fbf0034 	lw	ra,52(sp)
bfc08a08:	8fb70030 	lw	s7,48(sp)
bfc08a0c:	8fb6002c 	lw	s6,44(sp)
bfc08a10:	8fb50028 	lw	s5,40(sp)
bfc08a14:	8fb40024 	lw	s4,36(sp)
bfc08a18:	8fb30020 	lw	s3,32(sp)
bfc08a1c:	8fb2001c 	lw	s2,28(sp)
bfc08a20:	8fb10018 	lw	s1,24(sp)
bfc08a24:	8fb00014 	lw	s0,20(sp)
bfc08a28:	27bd0038 	addiu	sp,sp,56
bfc08a2c:	03e00008 	jr	ra
bfc08a30:	00000000 	nop

bfc08a34 <DDR_cali_API5>:


void DDR_cali_API5(void)
{
bfc08a34:	27bdffe0 	addiu	sp,sp,-32
bfc08a38:	afb7001c 	sw	s7,28(sp)
bfc08a3c:	afb60018 	sw	s6,24(sp)
bfc08a40:	afb50014 	sw	s5,20(sp)
bfc08a44:	afb40010 	sw	s4,16(sp)
bfc08a48:	afb3000c 	sw	s3,12(sp)
bfc08a4c:	afb20008 	sw	s2,8(sp)
bfc08a50:	afb10004 	sw	s1,4(sp)
bfc08a54:	afb00000 	sw	s0,0(sp)
    register int i,j,k;

    register int L0 = 0, R0 = 33, L1 = 0, R1 = 33;
bfc08a58:	00009821 	move	s3,zero
bfc08a5c:	24150021 	li	s5,33
bfc08a60:	0000a021 	move	s4,zero
bfc08a64:	24170021 	li	s7,33
    const register int  DRAM_ADR = 0xA0100000;
bfc08a68:	3c12a010 	lui	s2,0xa010
    const register int  DRAM_VAL = 0x5A5AA5A5;
bfc08a6c:	3c025a5a 	lui	v0,0x5a5a
bfc08a70:	3450a5a5 	ori	s0,v0,0xa5a5
    const register int  DDCR_ADR = 0xB8001500;
bfc08a74:	3c02b800 	lui	v0,0xb800
bfc08a78:	34561500 	ori	s6,v0,0x1500
    register int  DDCR_VAL = (1<<31)|(1<<23);  //delay 1/2 memory clock
bfc08a7c:	3c118080 	lui	s1,0x8080
    //register int  DDCR_VAL = (0<<31);  //	


     REG32(DRAM_ADR) = DRAM_VAL;
bfc08a80:	02401021 	move	v0,s2
bfc08a84:	02001821 	move	v1,s0
bfc08a88:	ac430000 	sw	v1,0(v0)
    //while( (REG32(DDCR_ADR) & 0x40000000) != 0x40000000);
    //while( (REG32(DDCR_ADR) & 0x40000000) != 0x40000000);


         // Calibrate for DQS0
        for (i = 0; i <= 31; i++)
bfc08a8c:	00008021 	move	s0,zero
bfc08a90:	0bf022c9 	j	bfc08b24 <DDR_cali_API5+0xf0>
bfc08a94:	00000000 	nop
        {
            REG32(DDCR_ADR) = (DDCR_VAL & 0x80000000) | ((i-1) << 16);
bfc08a98:	02c01021 	move	v0,s6
bfc08a9c:	02202021 	move	a0,s1
bfc08aa0:	3c038000 	lui	v1,0x8000
bfc08aa4:	00832024 	and	a0,a0,v1
bfc08aa8:	2603ffff 	addiu	v1,s0,-1
bfc08aac:	00031c00 	sll	v1,v1,0x10
bfc08ab0:	00831825 	or	v1,a0,v1
bfc08ab4:	ac430000 	sw	v1,0(v0)

            if (L0 == 0)
bfc08ab8:	1660000d 	bnez	s3,bfc08af0 <DDR_cali_API5+0xbc>
bfc08abc:	00000000 	nop
            {   if ((REG32(DRAM_ADR) & 0x00FF00FF) == 0x005A00A5)        {      L0 = i;         }
bfc08ac0:	02401021 	move	v0,s2
bfc08ac4:	8c430000 	lw	v1,0(v0)
bfc08ac8:	3c0200ff 	lui	v0,0xff
bfc08acc:	344200ff 	ori	v0,v0,0xff
bfc08ad0:	00621824 	and	v1,v1,v0
bfc08ad4:	3c02005a 	lui	v0,0x5a
bfc08ad8:	344200a5 	ori	v0,v0,0xa5
bfc08adc:	14620010 	bne	v1,v0,bfc08b20 <DDR_cali_API5+0xec>
bfc08ae0:	00000000 	nop
bfc08ae4:	02009821 	move	s3,s0
bfc08ae8:	0bf022c8 	j	bfc08b20 <DDR_cali_API5+0xec>
bfc08aec:	00000000 	nop
		 

            }
            else
            {   if ((REG32(DRAM_ADR) & 0x00FF00FF) != 0x005A00A5)          {   
bfc08af0:	02401021 	move	v0,s2
bfc08af4:	8c430000 	lw	v1,0(v0)
bfc08af8:	3c0200ff 	lui	v0,0xff
bfc08afc:	344200ff 	ori	v0,v0,0xff
bfc08b00:	00621824 	and	v1,v1,v0
bfc08b04:	3c02005a 	lui	v0,0x5a
bfc08b08:	344200a5 	ori	v0,v0,0xa5
bfc08b0c:	10620004 	beq	v1,v0,bfc08b20 <DDR_cali_API5+0xec>
bfc08b10:	00000000 	nop
			
			R0 = i - 1;            break;            }
bfc08b14:	2615ffff 	addiu	s5,s0,-1
bfc08b18:	0bf022cc 	j	bfc08b30 <DDR_cali_API5+0xfc>
bfc08b1c:	00000000 	nop
    //while( (REG32(DDCR_ADR) & 0x40000000) != 0x40000000);
    //while( (REG32(DDCR_ADR) & 0x40000000) != 0x40000000);


         // Calibrate for DQS0
        for (i = 0; i <= 31; i++)
bfc08b20:	26100001 	addiu	s0,s0,1
bfc08b24:	2a020020 	slti	v0,s0,32
bfc08b28:	1440ffdb 	bnez	v0,bfc08a98 <DDR_cali_API5+0x64>
bfc08b2c:	00000000 	nop
            {   if ((REG32(DRAM_ADR) & 0x00FF00FF) != 0x005A00A5)          {   
			
			R0 = i - 1;            break;            }
            }
        }
        DDCR_VAL = (DDCR_VAL & 0x80000000) | (((L0 + R0) >> 1) << 16);
bfc08b30:	02201821 	move	v1,s1
bfc08b34:	3c028000 	lui	v0,0x8000
bfc08b38:	00621824 	and	v1,v1,v0
bfc08b3c:	02751021 	addu	v0,s3,s5
bfc08b40:	00021043 	sra	v0,v0,0x1
bfc08b44:	00021400 	sll	v0,v0,0x10
bfc08b48:	00621025 	or	v0,v1,v0
bfc08b4c:	00408821 	move	s1,v0
        REG32(DDCR_ADR) = DDCR_VAL;
bfc08b50:	02c01021 	move	v0,s6
bfc08b54:	02201821 	move	v1,s1
bfc08b58:	ac430000 	sw	v1,0(v0)

                 // Calibrate for DQS1
        for (i = 0; i <= 31; i++)
bfc08b5c:	00008021 	move	s0,zero
bfc08b60:	0bf022fd 	j	bfc08bf4 <DDR_cali_API5+0x1c0>
bfc08b64:	00000000 	nop
        {
            REG32(DDCR_ADR) = (DDCR_VAL & 0xFFFF0000) | ((i-1) << 8);
bfc08b68:	02c01021 	move	v0,s6
bfc08b6c:	02202021 	move	a0,s1
bfc08b70:	3c03ffff 	lui	v1,0xffff
bfc08b74:	00832024 	and	a0,a0,v1
bfc08b78:	2603ffff 	addiu	v1,s0,-1
bfc08b7c:	00031a00 	sll	v1,v1,0x8
bfc08b80:	00831825 	or	v1,a0,v1
bfc08b84:	ac430000 	sw	v1,0(v0)
            if (L1 == 0)
bfc08b88:	1680000d 	bnez	s4,bfc08bc0 <DDR_cali_API5+0x18c>
bfc08b8c:	00000000 	nop
            {    if ((REG32(DRAM_ADR) & 0xFF00FF00) == 0x5A00A500)        {   L1 = i;     }
bfc08b90:	02401021 	move	v0,s2
bfc08b94:	8c430000 	lw	v1,0(v0)
bfc08b98:	3c02ff00 	lui	v0,0xff00
bfc08b9c:	3442ff00 	ori	v0,v0,0xff00
bfc08ba0:	00621824 	and	v1,v1,v0
bfc08ba4:	3c025a00 	lui	v0,0x5a00
bfc08ba8:	3442a500 	ori	v0,v0,0xa500
bfc08bac:	14620010 	bne	v1,v0,bfc08bf0 <DDR_cali_API5+0x1bc>
bfc08bb0:	00000000 	nop
bfc08bb4:	0200a021 	move	s4,s0
bfc08bb8:	0bf022fc 	j	bfc08bf0 <DDR_cali_API5+0x1bc>
bfc08bbc:	00000000 	nop
		
            }
            else
            {   if ((REG32(DRAM_ADR) & 0xFF00FF00) != 0x5A00A500)        {   
bfc08bc0:	02401021 	move	v0,s2
bfc08bc4:	8c430000 	lw	v1,0(v0)
bfc08bc8:	3c02ff00 	lui	v0,0xff00
bfc08bcc:	3442ff00 	ori	v0,v0,0xff00
bfc08bd0:	00621824 	and	v1,v1,v0
bfc08bd4:	3c025a00 	lui	v0,0x5a00
bfc08bd8:	3442a500 	ori	v0,v0,0xa500
bfc08bdc:	10620004 	beq	v1,v0,bfc08bf0 <DDR_cali_API5+0x1bc>
bfc08be0:	00000000 	nop
				
			R1 = i - 1;             break;             }
bfc08be4:	2617ffff 	addiu	s7,s0,-1
bfc08be8:	0bf02300 	j	bfc08c00 <DDR_cali_API5+0x1cc>
bfc08bec:	00000000 	nop
        }
        DDCR_VAL = (DDCR_VAL & 0x80000000) | (((L0 + R0) >> 1) << 16);
        REG32(DDCR_ADR) = DDCR_VAL;

                 // Calibrate for DQS1
        for (i = 0; i <= 31; i++)
bfc08bf0:	26100001 	addiu	s0,s0,1
bfc08bf4:	2a020020 	slti	v0,s0,32
bfc08bf8:	1440ffdb 	bnez	v0,bfc08b68 <DDR_cali_API5+0x134>
bfc08bfc:	00000000 	nop
      

#if 1//DDR_DBG
        _memctl_debug_printf("LDQS0:%d R0:%d C0:%d\n",  L0, R0, (L0 + R0) >> 1);
        _memctl_debug_printf("LDQS1:%d R1:%d C1:%d\n",  L1, R1, (L1 + R1) >> 1);
	   REG32(0xb8001500) &=0xFFE0E0FF;
bfc08c00:	3c02b800 	lui	v0,0xb800
bfc08c04:	34421500 	ori	v0,v0,0x1500
bfc08c08:	3c03b800 	lui	v1,0xb800
bfc08c0c:	34631500 	ori	v1,v1,0x1500
bfc08c10:	8c640000 	lw	a0,0(v1)
bfc08c14:	3c03ffe0 	lui	v1,0xffe0
bfc08c18:	3463e0ff 	ori	v1,v1,0xe0ff
bfc08c1c:	00831824 	and	v1,a0,v1
bfc08c20:	ac430000 	sw	v1,0(v0)
	   REG32(0xb8001500) |=  ((L0 + R0)/4)<<16;
bfc08c24:	3c02b800 	lui	v0,0xb800
bfc08c28:	34431500 	ori	v1,v0,0x1500
bfc08c2c:	3c02b800 	lui	v0,0xb800
bfc08c30:	34421500 	ori	v0,v0,0x1500
bfc08c34:	8c440000 	lw	a0,0(v0)
bfc08c38:	02751021 	addu	v0,s3,s5
bfc08c3c:	24450003 	addiu	a1,v0,3
bfc08c40:	28460000 	slti	a2,v0,0
bfc08c44:	00a6100b 	movn	v0,a1,a2
bfc08c48:	00021083 	sra	v0,v0,0x2
bfc08c4c:	00021400 	sll	v0,v0,0x10
bfc08c50:	00821025 	or	v0,a0,v0
bfc08c54:	ac620000 	sw	v0,0(v1)
	   REG32(0xb8001500) |= ((L1 + R1)/4)<<8;
bfc08c58:	3c02b800 	lui	v0,0xb800
bfc08c5c:	34431500 	ori	v1,v0,0x1500
bfc08c60:	3c02b800 	lui	v0,0xb800
bfc08c64:	34421500 	ori	v0,v0,0x1500
bfc08c68:	8c440000 	lw	a0,0(v0)
bfc08c6c:	02971021 	addu	v0,s4,s7
bfc08c70:	24450003 	addiu	a1,v0,3
bfc08c74:	28460000 	slti	a2,v0,0
bfc08c78:	00a6100b 	movn	v0,a1,a2
bfc08c7c:	00021083 	sra	v0,v0,0x2
bfc08c80:	00021200 	sll	v0,v0,0x8
bfc08c84:	00821025 	or	v0,a0,v0
bfc08c88:	ac620000 	sw	v0,0(v1)
	_memctl_debug_printf("DACCR(0xb8001500)=0x%x\n",REG32(0xb8001500) );
#endif

}
bfc08c8c:	8fb7001c 	lw	s7,28(sp)
bfc08c90:	8fb60018 	lw	s6,24(sp)
bfc08c94:	8fb50014 	lw	s5,20(sp)
bfc08c98:	8fb40010 	lw	s4,16(sp)
bfc08c9c:	8fb3000c 	lw	s3,12(sp)
bfc08ca0:	8fb20008 	lw	s2,8(sp)
bfc08ca4:	8fb10004 	lw	s1,4(sp)
bfc08ca8:	8fb00000 	lw	s0,0(sp)
bfc08cac:	27bd0020 	addiu	sp,sp,32
bfc08cb0:	03e00008 	jr	ra
bfc08cb4:	00000000 	nop

bfc08cb8 <RescueMode>:

#endif
//===========================================================

void RescueMode(void)
{
bfc08cb8:	27bdffc0 	addiu	sp,sp,-64
bfc08cbc:	afbf003c 	sw	ra,60(sp)
	
	unsigned char ch;
	unsigned char *p=JUMPADDR;
bfc08cc0:	3c02a010 	lui	v0,0xa010
bfc08cc4:	afa20030 	sw	v0,48(sp)
	unsigned int len=0,csum=0;
bfc08cc8:	afa0002c 	sw	zero,44(sp)
bfc08ccc:	afa00028 	sw	zero,40(sp)
bfc08cd0:	0bf02337 	j	bfc08cdc <RescueMode+0x24>
bfc08cd4:	00000000 	nop
			//_memctl_debug_printf("j:jmp\n");		
			_memctl_debug_printf("b:booting\n");
			_memctl_debug_printf("c:\n");			
#endif
		}
	}
bfc08cd8:	00000000 	nop



	while(1)
	{
		REG32(0xb800311c)=0xa5000000;
bfc08cdc:	3c02b800 	lui	v0,0xb800
bfc08ce0:	3442311c 	ori	v0,v0,0x311c
bfc08ce4:	3c03a500 	lui	v1,0xa500
bfc08ce8:	ac430000 	sw	v1,0(v0)
		REG32(0xb8003504)=0x333;	
bfc08cec:	3c02b800 	lui	v0,0xb800
bfc08cf0:	34423504 	ori	v0,v0,0x3504
bfc08cf4:	24030333 	li	v1,819
bfc08cf8:	ac430000 	sw	v1,0(v0)
		printf("\nRescue: ");
bfc08cfc:	3c02bfc1 	lui	v0,0xbfc1
bfc08d00:	2444b4b4 	addiu	a0,v0,-19276
bfc08d04:	0ff003ac 	jal	bfc00eb0 <printf>
bfc08d08:	00000000 	nop
		ch=uart_inc();
bfc08d0c:	0ff001ff 	jal	bfc007fc <uart_inc>
bfc08d10:	00000000 	nop
bfc08d14:	a3a20034 	sb	v0,52(sp)
	
		//-------------------------		
			
	
		//-------------------------
		if(ch=='b')
bfc08d18:	93a30034 	lbu	v1,52(sp)
bfc08d1c:	24020062 	li	v0,98
bfc08d20:	14620009 	bne	v1,v0,bfc08d48 <RescueMode+0x90>
bfc08d24:	00000000 	nop
		{	printf("booting\n");
bfc08d28:	3c02bfc1 	lui	v0,0xbfc1
bfc08d2c:	2444b4c0 	addiu	a0,v0,-19264
bfc08d30:	0ff003ac 	jal	bfc00eb0 <printf>
bfc08d34:	00000000 	nop
			_memctl_debug_printf("b:booting\n");
			_memctl_debug_printf("c:\n");			
#endif
		}
	}
}
bfc08d38:	8fbf003c 	lw	ra,60(sp)
bfc08d3c:	27bd0040 	addiu	sp,sp,64
bfc08d40:	03e00008 	jr	ra
bfc08d44:	00000000 	nop
		
	
#endif

#if 1//def CONFIG_DRAM_TEST
		if(ch=='1')
bfc08d48:	93a30034 	lbu	v1,52(sp)
bfc08d4c:	24020031 	li	v0,49
bfc08d50:	14620003 	bne	v1,v0,bfc08d60 <RescueMode+0xa8>
bfc08d54:	00000000 	nop
		{	
			_memctl_debug_printf("Show clock TRx delay map:");
			ShowTxRxDelayMap();//Step2: Set TRx delay
bfc08d58:	0ff005b6 	jal	bfc016d8 <ShowTxRxDelayMap>
bfc08d5c:	00000000 	nop

		}

		if(ch=='2')
bfc08d60:	93a30034 	lbu	v1,52(sp)
bfc08d64:	24020032 	li	v0,50
bfc08d68:	14620003 	bne	v1,v0,bfc08d78 <RescueMode+0xc0>
bfc08d6c:	00000000 	nop
		{	
			DDR_cali_API5();
bfc08d70:	0ff0228d 	jal	bfc08a34 <DDR_cali_API5>
bfc08d74:	00000000 	nop
		}
#endif
		
		#if 1
		if(ch=='3')
bfc08d78:	93a30034 	lbu	v1,52(sp)
bfc08d7c:	24020033 	li	v0,51
bfc08d80:	14620003 	bne	v1,v0,bfc08d90 <RescueMode+0xd8>
bfc08d84:	00000000 	nop
		{	
			DDR_cali_API7();//Step3: for calibrate DQS_TAP of DACCR(0xb8001500)
bfc08d88:	0ff021e6 	jal	bfc08798 <DDR_cali_API7>
bfc08d8c:	00000000 	nop
		}	
		#endif

		
		if(ch=='4')
bfc08d90:	93a30034 	lbu	v1,52(sp)
bfc08d94:	24020034 	li	v0,52
bfc08d98:	14620003 	bne	v1,v0,bfc08da8 <RescueMode+0xf0>
bfc08d9c:	00000000 	nop
		{				
			memctlc_dram_size_detect(); //Step4: Size detect , set DMCR to activate DRAM parameter
bfc08da0:	0ff02026 	jal	bfc08098 <memctlc_dram_size_detect>
bfc08da4:	00000000 	nop

		}	

		if(ch=='5')
bfc08da8:	93a30034 	lbu	v1,52(sp)
bfc08dac:	24020035 	li	v0,53
bfc08db0:	14620004 	bne	v1,v0,bfc08dc4 <RescueMode+0x10c>
bfc08db4:	00000000 	nop
		{		
			#if 1 //Check DCR and config DTR
 				chk_dram_cfg(0); //Step5: auto set DTR (check system register's freq setting)
bfc08db8:	00002021 	move	a0,zero
bfc08dbc:	0ff0167a 	jal	bfc059e8 <chk_dram_cfg>
bfc08dc0:	00000000 	nop
 			#endif
		}	

		if(ch=='6')
bfc08dc4:	93a30034 	lbu	v1,52(sp)
bfc08dc8:	24020036 	li	v0,54
bfc08dcc:	14620005 	bne	v1,v0,bfc08de4 <RescueMode+0x12c>
bfc08dd0:	00000000 	nop
		{		
			_memctl_debug_printf("\nAuto set DQ[15:0] calibration loop for read\n"); 
			memctlc_hw_auto_calibration(16,0xa1000000); //Step6
bfc08dd4:	24040010 	li	a0,16
bfc08dd8:	3c05a100 	lui	a1,0xa100
bfc08ddc:	0ff016bc 	jal	bfc05af0 <memctlc_hw_auto_calibration>
bfc08de0:	00000000 	nop
			
		}	


		if(ch=='7')
bfc08de4:	93a30034 	lbu	v1,52(sp)
bfc08de8:	24020037 	li	v0,55
bfc08dec:	14620095 	bne	v1,v0,bfc09044 <RescueMode+0x38c>
bfc08df0:	00000000 	nop
		{		
			 _memctl_debug_printf("\nManual set DQ calibration loop\n"); 
			 for(i=0;i<32;i++)
bfc08df4:	afa00024 	sw	zero,36(sp)
bfc08df8:	0bf0238b 	j	bfc08e2c <RescueMode+0x174>
bfc08dfc:	00000000 	nop
 			REG32( 0xb8001510 +i*4 ) = 0x00040200;
bfc08e00:	8fa30024 	lw	v1,36(sp)
bfc08e04:	3c022e00 	lui	v0,0x2e00
bfc08e08:	34420544 	ori	v0,v0,0x544
bfc08e0c:	00621021 	addu	v0,v1,v0
bfc08e10:	00021080 	sll	v0,v0,0x2
bfc08e14:	3c030004 	lui	v1,0x4
bfc08e18:	34630200 	ori	v1,v1,0x200
bfc08e1c:	ac430000 	sw	v1,0(v0)


		if(ch=='7')
		{		
			 _memctl_debug_printf("\nManual set DQ calibration loop\n"); 
			 for(i=0;i<32;i++)
bfc08e20:	8fa20024 	lw	v0,36(sp)
bfc08e24:	24420001 	addiu	v0,v0,1
bfc08e28:	afa20024 	sw	v0,36(sp)
bfc08e2c:	8fa20024 	lw	v0,36(sp)
bfc08e30:	2c420020 	sltiu	v0,v0,32
bfc08e34:	1440fff2 	bnez	v0,bfc08e00 <RescueMode+0x148>
bfc08e38:	00000000 	nop
 			REG32( 0xb8001510 +i*4 ) = 0x00040200;
 			REG32( 0xb800101c ) = 0x00110401;
bfc08e3c:	3c02b800 	lui	v0,0xb800
bfc08e40:	3442101c 	ori	v0,v0,0x101c
bfc08e44:	3c030011 	lui	v1,0x11
bfc08e48:	34630401 	ori	v1,v1,0x401
bfc08e4c:	ac430000 	sw	v1,0(v0)
 
 			while( 0x80000000  == (REG32(0xb800101c)&0x80000000) ) {}
bfc08e50:	3c02b800 	lui	v0,0xb800
bfc08e54:	3442101c 	ori	v0,v0,0x101c
bfc08e58:	8c420000 	lw	v0,0(v0)
bfc08e5c:	0440fffc 	bltz	v0,bfc08e50 <RescueMode+0x198>
bfc08e60:	00000000 	nop
 

			 for(i=0;i<32;i++)
bfc08e64:	afa00024 	sw	zero,36(sp)
bfc08e68:	0bf023a7 	j	bfc08e9c <RescueMode+0x1e4>
bfc08e6c:	00000000 	nop
			 REG32( 0xb8001510 +i*4 ) = 0x00040200;
bfc08e70:	8fa30024 	lw	v1,36(sp)
bfc08e74:	3c022e00 	lui	v0,0x2e00
bfc08e78:	34420544 	ori	v0,v0,0x544
bfc08e7c:	00621021 	addu	v0,v1,v0
bfc08e80:	00021080 	sll	v0,v0,0x2
bfc08e84:	3c030004 	lui	v1,0x4
bfc08e88:	34630200 	ori	v1,v1,0x200
bfc08e8c:	ac430000 	sw	v1,0(v0)
 			REG32( 0xb800101c ) = 0x00110401;
 
 			while( 0x80000000  == (REG32(0xb800101c)&0x80000000) ) {}
 

			 for(i=0;i<32;i++)
bfc08e90:	8fa20024 	lw	v0,36(sp)
bfc08e94:	24420001 	addiu	v0,v0,1
bfc08e98:	afa20024 	sw	v0,36(sp)
bfc08e9c:	8fa20024 	lw	v0,36(sp)
bfc08ea0:	2c420020 	sltiu	v0,v0,32
bfc08ea4:	1440fff2 	bnez	v0,bfc08e70 <RescueMode+0x1b8>
bfc08ea8:	00000000 	nop
			 REG32( 0xb8001510 +i*4 ) = 0x00040200;
 			REG32( 0xb800101c ) = 0x00110404;
bfc08eac:	3c02b800 	lui	v0,0xb800
bfc08eb0:	3442101c 	ori	v0,v0,0x101c
bfc08eb4:	3c030011 	lui	v1,0x11
bfc08eb8:	34630404 	ori	v1,v1,0x404
bfc08ebc:	ac430000 	sw	v1,0(v0)
 
 			while( 0x80000000 == (REG32(0xb800101c)&0x80000000) ){}
bfc08ec0:	3c02b800 	lui	v0,0xb800
bfc08ec4:	3442101c 	ori	v0,v0,0x101c
bfc08ec8:	8c420000 	lw	v0,0(v0)
bfc08ecc:	0440fffc 	bltz	v0,bfc08ec0 <RescueMode+0x208>
bfc08ed0:	00000000 	nop
 
			 for(i=0;i<32;i++)
bfc08ed4:	afa00024 	sw	zero,36(sp)
bfc08ed8:	0bf023c3 	j	bfc08f0c <RescueMode+0x254>
bfc08edc:	00000000 	nop
 			REG32( 0xb8001510 +i*4 ) = 0x00040200;
bfc08ee0:	8fa30024 	lw	v1,36(sp)
bfc08ee4:	3c022e00 	lui	v0,0x2e00
bfc08ee8:	34420544 	ori	v0,v0,0x544
bfc08eec:	00621021 	addu	v0,v1,v0
bfc08ef0:	00021080 	sll	v0,v0,0x2
bfc08ef4:	3c030004 	lui	v1,0x4
bfc08ef8:	34630200 	ori	v1,v1,0x200
bfc08efc:	ac430000 	sw	v1,0(v0)
			 REG32( 0xb8001510 +i*4 ) = 0x00040200;
 			REG32( 0xb800101c ) = 0x00110404;
 
 			while( 0x80000000 == (REG32(0xb800101c)&0x80000000) ){}
 
			 for(i=0;i<32;i++)
bfc08f00:	8fa20024 	lw	v0,36(sp)
bfc08f04:	24420001 	addiu	v0,v0,1
bfc08f08:	afa20024 	sw	v0,36(sp)
bfc08f0c:	8fa20024 	lw	v0,36(sp)
bfc08f10:	2c420020 	sltiu	v0,v0,32
bfc08f14:	1440fff2 	bnez	v0,bfc08ee0 <RescueMode+0x228>
bfc08f18:	00000000 	nop
 			REG32( 0xb8001510 +i*4 ) = 0x00040200;
 			REG32( 0xb800101c ) = 0x00100762;
bfc08f1c:	3c02b800 	lui	v0,0xb800
bfc08f20:	3442101c 	ori	v0,v0,0x101c
bfc08f24:	3c030010 	lui	v1,0x10
bfc08f28:	34630762 	ori	v1,v1,0x762
bfc08f2c:	ac430000 	sw	v1,0(v0)
 
 			while( 0x80000000 == (REG32(0xb800101c)&0x80000000) ) {}
bfc08f30:	3c02b800 	lui	v0,0xb800
bfc08f34:	3442101c 	ori	v0,v0,0x101c
bfc08f38:	8c420000 	lw	v0,0(v0)
bfc08f3c:	0440fffc 	bltz	v0,bfc08f30 <RescueMode+0x278>
bfc08f40:	00000000 	nop
 
 			for(i=0;i<32;i++)
bfc08f44:	afa00024 	sw	zero,36(sp)
bfc08f48:	0bf023df 	j	bfc08f7c <RescueMode+0x2c4>
bfc08f4c:	00000000 	nop
 			REG32( 0xb8001510 +i*4 ) = 0x00040200;
bfc08f50:	8fa30024 	lw	v1,36(sp)
bfc08f54:	3c022e00 	lui	v0,0x2e00
bfc08f58:	34420544 	ori	v0,v0,0x544
bfc08f5c:	00621021 	addu	v0,v1,v0
bfc08f60:	00021080 	sll	v0,v0,0x2
bfc08f64:	3c030004 	lui	v1,0x4
bfc08f68:	34630200 	ori	v1,v1,0x200
bfc08f6c:	ac430000 	sw	v1,0(v0)
 			REG32( 0xb8001510 +i*4 ) = 0x00040200;
 			REG32( 0xb800101c ) = 0x00100762;
 
 			while( 0x80000000 == (REG32(0xb800101c)&0x80000000) ) {}
 
 			for(i=0;i<32;i++)
bfc08f70:	8fa20024 	lw	v0,36(sp)
bfc08f74:	24420001 	addiu	v0,v0,1
bfc08f78:	afa20024 	sw	v0,36(sp)
bfc08f7c:	8fa20024 	lw	v0,36(sp)
bfc08f80:	2c420020 	sltiu	v0,v0,32
bfc08f84:	1440fff2 	bnez	v0,bfc08f50 <RescueMode+0x298>
bfc08f88:	00000000 	nop
 			REG32( 0xb8001510 +i*4 ) = 0x00040200;
 			REG32( 0xb800101c ) = 0x00120000;
bfc08f8c:	3c02b800 	lui	v0,0xb800
bfc08f90:	3442101c 	ori	v0,v0,0x101c
bfc08f94:	3c030012 	lui	v1,0x12
bfc08f98:	ac430000 	sw	v1,0(v0)
 
 			while( 0x80000000  == (REG32(0xb800101c)&0x80000000) ){}
bfc08f9c:	3c02b800 	lui	v0,0xb800
bfc08fa0:	3442101c 	ori	v0,v0,0x101c
bfc08fa4:	8c420000 	lw	v0,0(v0)
bfc08fa8:	0440fffc 	bltz	v0,bfc08f9c <RescueMode+0x2e4>
bfc08fac:	00000000 	nop
 
 			for(i=0;i<32;i++)
bfc08fb0:	afa00024 	sw	zero,36(sp)
bfc08fb4:	0bf023fa 	j	bfc08fe8 <RescueMode+0x330>
bfc08fb8:	00000000 	nop
 			REG32( 0xb8001510 +i*4 ) = 0x00040200;
bfc08fbc:	8fa30024 	lw	v1,36(sp)
bfc08fc0:	3c022e00 	lui	v0,0x2e00
bfc08fc4:	34420544 	ori	v0,v0,0x544
bfc08fc8:	00621021 	addu	v0,v1,v0
bfc08fcc:	00021080 	sll	v0,v0,0x2
bfc08fd0:	3c030004 	lui	v1,0x4
bfc08fd4:	34630200 	ori	v1,v1,0x200
bfc08fd8:	ac430000 	sw	v1,0(v0)
 			REG32( 0xb8001510 +i*4 ) = 0x00040200;
 			REG32( 0xb800101c ) = 0x00120000;
 
 			while( 0x80000000  == (REG32(0xb800101c)&0x80000000) ){}
 
 			for(i=0;i<32;i++)
bfc08fdc:	8fa20024 	lw	v0,36(sp)
bfc08fe0:	24420001 	addiu	v0,v0,1
bfc08fe4:	afa20024 	sw	v0,36(sp)
bfc08fe8:	8fa20024 	lw	v0,36(sp)
bfc08fec:	2c420020 	sltiu	v0,v0,32
bfc08ff0:	1440fff2 	bnez	v0,bfc08fbc <RescueMode+0x304>
bfc08ff4:	00000000 	nop
 			REG32( 0xb8001510 +i*4 ) = 0x00040200;
 			REG32( 0xb800101c ) = 0x00100662;
bfc08ff8:	3c02b800 	lui	v0,0xb800
bfc08ffc:	3442101c 	ori	v0,v0,0x101c
bfc09000:	3c030010 	lui	v1,0x10
bfc09004:	34630662 	ori	v1,v1,0x662
bfc09008:	ac430000 	sw	v1,0(v0)
 

 			while( 0x80000000  == (REG32(0xb800101c)&0x80000000) ){ }
bfc0900c:	3c02b800 	lui	v0,0xb800
bfc09010:	3442101c 	ori	v0,v0,0x101c
bfc09014:	8c420000 	lw	v0,0(v0)
bfc09018:	0440fffc 	bltz	v0,bfc0900c <RescueMode+0x354>
bfc0901c:	00000000 	nop
 
 			/* Reset phy fifo pointer */
 			REG32( 0xb8001500 ) = 0xc0000000;
bfc09020:	3c02b800 	lui	v0,0xb800
bfc09024:	34421500 	ori	v0,v0,0x1500
bfc09028:	3c03c000 	lui	v1,0xc000
bfc0902c:	ac430000 	sw	v1,0(v0)
 			REG32( 0xb8001500 ) = 0xc0000010;
bfc09030:	3c02b800 	lui	v0,0xb800
bfc09034:	34421500 	ori	v0,v0,0x1500
bfc09038:	3c03c000 	lui	v1,0xc000
bfc0903c:	34630010 	ori	v1,v1,0x10
bfc09040:	ac430000 	sw	v1,0(v0)

			
		}	


		if(ch=='c')
bfc09044:	93a30034 	lbu	v1,52(sp)
bfc09048:	24020063 	li	v0,99
bfc0904c:	14620003 	bne	v1,v0,bfc0905c <RescueMode+0x3a4>
bfc09050:	00000000 	nop
		{
		#if 1
		/* 
		 * Check DTR
		 */	
			memctlc_check_DTR();
bfc09054:	0ff0165e 	jal	bfc05978 <memctlc_check_DTR>
bfc09058:	00000000 	nop
		
		}	

	
		
		if(ch=='d')
bfc0905c:	93a30034 	lbu	v1,52(sp)
bfc09060:	24020064 	li	v0,100
bfc09064:	14620004 	bne	v1,v0,bfc09078 <RescueMode+0x3c0>
bfc09068:	00000000 	nop
		{
			_memctl_debug_printf("dw ");		

			addr=uart_rx8b_val();
bfc0906c:	0ff0070b 	jal	bfc01c2c <uart_rx8b_val>
bfc09070:	00000000 	nop
bfc09074:	afa20020 	sw	v0,32(sp)
			_memctl_debug_printf(" %x",REG32(addr));
		
		}	
		
		if(ch=='e')
bfc09078:	93a30034 	lbu	v1,52(sp)
bfc0907c:	24020065 	li	v0,101
bfc09080:	1462000a 	bne	v1,v0,bfc090ac <RescueMode+0x3f4>
bfc09084:	00000000 	nop
		{
			_memctl_debug_printf("ew ");		

			addr=uart_rx8b_val();
bfc09088:	0ff0070b 	jal	bfc01c2c <uart_rx8b_val>
bfc0908c:	00000000 	nop
bfc09090:	afa20020 	sw	v0,32(sp)
			_memctl_debug_printf(" ");
			val  =uart_rx8b_val();
bfc09094:	0ff0070b 	jal	bfc01c2c <uart_rx8b_val>
bfc09098:	00000000 	nop
bfc0909c:	afa2001c 	sw	v0,28(sp)
			REG32(addr)=val;
bfc090a0:	8fa20020 	lw	v0,32(sp)
bfc090a4:	8fa3001c 	lw	v1,28(sp)
bfc090a8:	ac430000 	sw	v1,0(v0)
		}

		if(ch=='j')
bfc090ac:	93a30034 	lbu	v1,52(sp)
bfc090b0:	2402006a 	li	v0,106
bfc090b4:	1462000b 	bne	v1,v0,bfc090e4 <RescueMode+0x42c>
bfc090b8:	00000000 	nop
		{				
			_memctl_debug_printf("Jmp:");
		#if 1			
			addr=uart_rx8b_val();
bfc090bc:	0ff0070b 	jal	bfc01c2c <uart_rx8b_val>
bfc090c0:	00000000 	nop
bfc090c4:	afa20020 	sw	v0,32(sp)
			jumpF = (void *)(addr);
bfc090c8:	8fa20020 	lw	v0,32(sp)
bfc090cc:	afa20018 	sw	v0,24(sp)
		#else		
			jumpF = (void *)(JUMPADDR);			
		#endif		
			jumpF();	
bfc090d0:	8fa20018 	lw	v0,24(sp)
bfc090d4:	0040f809 	jalr	v0
bfc090d8:	00000000 	nop
			
			_memctl_debug_printf("Hang");
			while(1)  ;		
bfc090dc:	0bf02437 	j	bfc090dc <RescueMode+0x424>
bfc090e0:	00000000 	nop
	

#if 1//def CONFIG_DRAM_TEST	


			if(ch=='l')
bfc090e4:	93a30034 	lbu	v1,52(sp)
bfc090e8:	2402006c 	li	v0,108
bfc090ec:	14620048 	bne	v1,v0,bfc09210 <RescueMode+0x558>
bfc090f0:	00000000 	nop
		{			
			 RTK_ZQ_K();
bfc090f4:	0ff028c8 	jal	bfc0a320 <RTK_ZQ_K>
bfc090f8:	00000000 	nop
			//_memctl_debug_printf("\nDQPR1(0xb8001800)=0xC2100000,CMD/DQS delay\n");	
			REG32(SYS_HW_STRAP)=0x59003E60;//Set memory clock=550MHZ	
bfc090fc:	3c02b800 	lui	v0,0xb800
bfc09100:	34420008 	ori	v0,v0,0x8
bfc09104:	3c035900 	lui	v1,0x5900
bfc09108:	34633e60 	ori	v1,v1,0x3e60
bfc0910c:	ac430000 	sw	v1,0(v0)
			//REG32(0xb8001800)=0xC2100000;
			_memctl_debug_printf("\n2.Set DRAM_CMD_Phase falling of clk\n");	
			REG32(DWPR1)=0xc0000000;
bfc09110:	3c02b800 	lui	v0,0xb800
bfc09114:	34421800 	ori	v0,v0,0x1800
bfc09118:	3c03c000 	lui	v1,0xc000
bfc0911c:	ac430000 	sw	v1,0(v0)

			//Step3 , DCR
			_memctl_debug_printf("\n3.Set DCR(128MB)\n"); 
			REG32(DCR)=0x21220000;//32MB
bfc09120:	3c02b800 	lui	v0,0xb800
bfc09124:	34421004 	ori	v0,v0,0x1004
bfc09128:	3c032122 	lui	v1,0x2122
bfc0912c:	ac430000 	sw	v1,0(v0)

			chk_dram_cfg(0); 
bfc09130:	00002021 	move	a0,zero
bfc09134:	0ff0167a 	jal	bfc059e8 <chk_dram_cfg>
bfc09138:	00000000 	nop

			REG32(DIDER1)=0x1f1f0000;	
bfc0913c:	3c02b800 	lui	v0,0xb800
bfc09140:	34421050 	ori	v0,v0,0x1050
bfc09144:	3c031f1f 	lui	v1,0x1f1f
bfc09148:	ac430000 	sw	v1,0(v0)

	  //REG32_ANDOR(DACCR,    ~( (0x1f<<16) | (0x1f<<8) ),   (rx<<16) | (rx<<8) );

	
	
	   REG32_ANDOR(CLK_MANAGER,    ~( (0x1f<<5) | (0x1f<<0) ),   (0x10<<5)| (0x10 <<0) );
bfc0914c:	3c02b800 	lui	v0,0xb800
bfc09150:	34420010 	ori	v0,v0,0x10
bfc09154:	3c03b800 	lui	v1,0xb800
bfc09158:	34630010 	ori	v1,v1,0x10
bfc0915c:	8c640000 	lw	a0,0(v1)
bfc09160:	2403fc00 	li	v1,-1024
bfc09164:	00831824 	and	v1,a0,v1
bfc09168:	34630210 	ori	v1,v1,0x210
bfc0916c:	ac430000 	sw	v1,0(v0)
       //Tx command
       //REG32_ANDOR(0xb80000a0,    ~( (0x1f<<5) | (0x1f<<10) ),   (0<<5) |  (0<<10) );


	 //Tx DQS	     
       REG32_ANDOR(DWPR1,    ~( (0x1f<<21) | (0x1f<<16) ),   (0x10<<21) |  (0x10<<16) );
bfc09170:	3c02b800 	lui	v0,0xb800
bfc09174:	34421800 	ori	v0,v0,0x1800
bfc09178:	3c03b800 	lui	v1,0xb800
bfc0917c:	34631800 	ori	v1,v1,0x1800
bfc09180:	8c640000 	lw	a0,0(v1)
bfc09184:	3c03fc00 	lui	v1,0xfc00
bfc09188:	3463ffff 	ori	v1,v1,0xffff
bfc0918c:	00832024 	and	a0,a0,v1
bfc09190:	3c030210 	lui	v1,0x210
bfc09194:	00831825 	or	v1,a0,v1
bfc09198:	ac430000 	sw	v1,0(v0)


	 //Tx DQM	   
	REG32_ANDOR(0xb8001590,    ~( (0x1f<<24) | (0x1f<<16) ),   (0x10<<24) |  (0x10<<16) );
bfc0919c:	3c02b800 	lui	v0,0xb800
bfc091a0:	34421590 	ori	v0,v0,0x1590
bfc091a4:	3c03b800 	lui	v1,0xb800
bfc091a8:	34631590 	ori	v1,v1,0x1590
bfc091ac:	8c640000 	lw	a0,0(v1)
bfc091b0:	3c03e0e0 	lui	v1,0xe0e0
bfc091b4:	3463ffff 	ori	v1,v1,0xffff
bfc091b8:	00832024 	and	a0,a0,v1
bfc091bc:	3c031010 	lui	v1,0x1010
bfc091c0:	00831825 	or	v1,a0,v1
bfc091c4:	ac430000 	sw	v1,0(v0)


		
	    #if 1  //Tx DQ
	  
	    for(i=0;i<32;i++)
bfc091c8:	afa00024 	sw	zero,36(sp)
bfc091cc:	0bf02480 	j	bfc09200 <RescueMode+0x548>
bfc091d0:	00000000 	nop
	    {
 	        //REG32( 0xb8001510 +i*4 ) = 0x00040200; //DDR3 Chariot 250MHZ OK.

		 REG32( 0xb8001510 +i*4 )  = (0x10<<24)|0x00040200;
bfc091d4:	8fa30024 	lw	v1,36(sp)
bfc091d8:	3c022e00 	lui	v0,0x2e00
bfc091dc:	34420544 	ori	v0,v0,0x544
bfc091e0:	00621021 	addu	v0,v1,v0
bfc091e4:	00021080 	sll	v0,v0,0x2
bfc091e8:	3c031004 	lui	v1,0x1004
bfc091ec:	34630200 	ori	v1,v1,0x200
bfc091f0:	ac430000 	sw	v1,0(v0)


		
	    #if 1  //Tx DQ
	  
	    for(i=0;i<32;i++)
bfc091f4:	8fa20024 	lw	v0,36(sp)
bfc091f8:	24420001 	addiu	v0,v0,1
bfc091fc:	afa20024 	sw	v0,36(sp)
bfc09200:	8fa20024 	lw	v0,36(sp)
bfc09204:	2c420020 	sltiu	v0,v0,32
bfc09208:	1440fff2 	bnez	v0,bfc091d4 <RescueMode+0x51c>
bfc0920c:	00000000 	nop
			
		
		}
		

		if(ch=='m')
bfc09210:	93a30034 	lbu	v1,52(sp)
bfc09214:	2402006d 	li	v0,109
bfc09218:	14620070 	bne	v1,v0,bfc093dc <RescueMode+0x724>
bfc0921c:	00000000 	nop
		{		
			REG32(SYS_HW_STRAP)=0x59003E60;//Set memory clock=550MHZ	
bfc09220:	3c02b800 	lui	v0,0xb800
bfc09224:	34420008 	ori	v0,v0,0x8
bfc09228:	3c035900 	lui	v1,0x5900
bfc0922c:	34633e60 	ori	v1,v1,0x3e60
bfc09230:	ac430000 	sw	v1,0(v0)
			/* Configure ZQ */
			 RTK_ZQ_K();
bfc09234:	0ff028c8 	jal	bfc0a320 <RTK_ZQ_K>
bfc09238:	00000000 	nop
			#endif
			
			#if 1
			//Step1
			_memctl_debug_printf("\n0.Set clk Tx delay=24\n");	
			REG32(CLK_MANAGE)|=0xAC0;
bfc0923c:	3c02b800 	lui	v0,0xb800
bfc09240:	34420010 	ori	v0,v0,0x10
bfc09244:	3c03b800 	lui	v1,0xb800
bfc09248:	34630010 	ori	v1,v1,0x10
bfc0924c:	8c630000 	lw	v1,0(v1)
bfc09250:	34630ac0 	ori	v1,v1,0xac0
bfc09254:	ac430000 	sw	v1,0(v0)
			//_memctl_debug_printf("CLK_MANAGE(0x%x)=0x%x\n",CLK_MANAGE,REG32(CLK_MANAGE));	

			_memctl_debug_printf("\n1.Set DRAM clk phase inverter \n");	
			REG32(DOR)=0x100000ff;
bfc09258:	3c02b800 	lui	v0,0xb800
bfc0925c:	34421064 	ori	v0,v0,0x1064
bfc09260:	3c031000 	lui	v1,0x1000
bfc09264:	346300ff 	ori	v1,v1,0xff
bfc09268:	ac430000 	sw	v1,0(v0)


			//_memctl_debug_printf("\nDQPR1(0xb8001800)=0xC2100000,CMD/DQS delay\n");	
			//REG32(0xb8001800)=0xC2100000;
			_memctl_debug_printf("\n2.Set DRAM_CMD_Phase falling of clk\n");	
			REG32(DWPR1)=0xC0000000;
bfc0926c:	3c02b800 	lui	v0,0xb800
bfc09270:	34421800 	ori	v0,v0,0x1800
bfc09274:	3c03c000 	lui	v1,0xc000
bfc09278:	ac430000 	sw	v1,0(v0)
			//REG32(DTR2)=0x0800B000; //set DTR2
			//REG32(0xb8001004)=0x21220000; //set DDR2 128MB 		
			
			//Step3 , DCR
			_memctl_debug_printf("\n3.Set DCR(128MB)\n"); 
			REG32(DCR)=0x21220000;//32MB
bfc0927c:	3c02b800 	lui	v0,0xb800
bfc09280:	34421004 	ori	v0,v0,0x1004
bfc09284:	3c032122 	lui	v1,0x2122
bfc09288:	ac430000 	sw	v1,0(v0)

			chk_dram_cfg(0); 
bfc0928c:	00002021 	move	a0,zero
bfc09290:	0ff0167a 	jal	bfc059e8 <chk_dram_cfg>
bfc09294:	00000000 	nop
			#endif

			
				_update_phy_param();
bfc09298:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc0929c:	00000000 	nop
			if(board_DRAM_freq_mhz()>=290)
bfc092a0:	0ff0260d 	jal	bfc09834 <board_DRAM_freq_mhz>
bfc092a4:	00000000 	nop
bfc092a8:	2c420122 	sltiu	v0,v0,290
bfc092ac:	14400007 	bnez	v0,bfc092cc <RescueMode+0x614>
bfc092b0:	00000000 	nop
			{
				//_memctl_debug_printf("\n6.Manual set DIDER1 ,Enable EN_HCLK DQS delay\n"); 
				//REG32(DIDER1)=0x80800000;	
				//REG32(DIDER1)=0x04040000;
				//REG32(DIDER2)=0x80000000;	
				REG32(DIDER1)=0x1f1f0000;	
bfc092b4:	3c02b800 	lui	v0,0xb800
bfc092b8:	34421050 	ori	v0,v0,0x1050
bfc092bc:	3c031f1f 	lui	v1,0x1f1f
bfc092c0:	ac430000 	sw	v1,0(v0)
bfc092c4:	0bf024b7 	j	bfc092dc <RescueMode+0x624>
bfc092c8:	00000000 	nop
			}
			else
			{
					//Step4 , DIDER1
				_memctl_debug_printf("\n4.Manual set DIDER1\n"); 
				REG32(DIDER1)=0x04040000;
bfc092cc:	3c02b800 	lui	v0,0xb800
bfc092d0:	34421050 	ori	v0,v0,0x1050
bfc092d4:	3c030404 	lui	v1,0x404
bfc092d8:	ac430000 	sw	v1,0(v0)


				//Step5 , DACQ0~15
			_memctl_debug_printf("\n5.Manual set DACQ0~15\n"); 
			int i;
			 for(i=0;i<32;i++)
bfc092dc:	afa00014 	sw	zero,20(sp)
bfc092e0:	0bf024c5 	j	bfc09314 <RescueMode+0x65c>
bfc092e4:	00000000 	nop
 			REG32( 0xb8001510 +i*4 ) = 0x00040200;
bfc092e8:	8fa30014 	lw	v1,20(sp)
bfc092ec:	3c022e00 	lui	v0,0x2e00
bfc092f0:	34420544 	ori	v0,v0,0x544
bfc092f4:	00621021 	addu	v0,v1,v0
bfc092f8:	00021080 	sll	v0,v0,0x2
bfc092fc:	3c030004 	lui	v1,0x4
bfc09300:	34630200 	ori	v1,v1,0x200
bfc09304:	ac430000 	sw	v1,0(v0)


				//Step5 , DACQ0~15
			_memctl_debug_printf("\n5.Manual set DACQ0~15\n"); 
			int i;
			 for(i=0;i<32;i++)
bfc09308:	8fa20014 	lw	v0,20(sp)
bfc0930c:	24420001 	addiu	v0,v0,1
bfc09310:	afa20014 	sw	v0,20(sp)
bfc09314:	8fa20014 	lw	v0,20(sp)
bfc09318:	28420020 	slti	v0,v0,32
bfc0931c:	1440fff2 	bnez	v0,bfc092e8 <RescueMode+0x630>
bfc09320:	00000000 	nop
 			REG32( 0xb8001510 +i*4 ) = 0x00040200;
 			//REG32( 0xb8001510 +i*4 ) = 0x10040200;

			_update_phy_param();	
bfc09324:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc09328:	00000000 	nop
 			/* Reset phy fifo pointer */
 			REG32( 0xb8001500 ) = 0x80000000;
bfc0932c:	3c02b800 	lui	v0,0xb800
bfc09330:	34421500 	ori	v0,v0,0x1500
bfc09334:	3c038000 	lui	v1,0x8000
bfc09338:	ac430000 	sw	v1,0(v0)
 			REG32( 0xb8001500 ) = 0x80000010;
bfc0933c:	3c02b800 	lui	v0,0xb800
bfc09340:	34421500 	ori	v0,v0,0x1500
bfc09344:	3c038000 	lui	v1,0x8000
bfc09348:	34630010 	ori	v1,v1,0x10
bfc0934c:	ac430000 	sw	v1,0(v0)


			//_update_phy_param();	
			//memctlc_dram_size_detect(); //Step4: Size detect , set DMCR to activate DRAM parameter
			_update_phy_param();	
bfc09350:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc09354:	00000000 	nop
			/* Reset DRAM DLL */
			//	if(memctlc_is_DDR()){
					//_memctl_debug_printf("Invoke memctlc_ddr1_dll_reset()\n");
					//memctlc_ddr1_dll_reset();
				//}else if(memctlc_is_DDR2()){
				if(memctlc_is_DDR2()){
bfc09358:	0ff00cbd 	jal	bfc032f4 <memctlc_is_DDR2>
bfc0935c:	00000000 	nop
bfc09360:	10400005 	beqz	v0,bfc09378 <RescueMode+0x6c0>
bfc09364:	00000000 	nop
				_memctl_debug_printf("Invoke memctlc_ddr2_dll_reset()\n");
					memctlc_ddr2_dll_reset();
bfc09368:	0ff01c2d 	jal	bfc070b4 <memctlc_ddr2_dll_reset>
bfc0936c:	00000000 	nop
bfc09370:	0bf024e4 	j	bfc09390 <RescueMode+0x6d8>
bfc09374:	00000000 	nop
				}else if(memctlc_is_DDR3()){
bfc09378:	0ff00caf 	jal	bfc032bc <memctlc_is_DDR3>
bfc0937c:	00000000 	nop
bfc09380:	10400003 	beqz	v0,bfc09390 <RescueMode+0x6d8>
bfc09384:	00000000 	nop
					_memctl_debug_printf("Invoke memctlc_ddr3_dll_reset()\n");
					memctlc_ddr3_dll_reset();
bfc09388:	0ff01cc8 	jal	bfc07320 <memctlc_ddr3_dll_reset>
bfc0938c:	00000000 	nop
					//while(1);
				}
			#endif			
			
			
			_update_phy_param();
bfc09390:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc09394:	00000000 	nop
			if(board_DRAM_freq_mhz()>=290)
bfc09398:	0ff0260d 	jal	bfc09834 <board_DRAM_freq_mhz>
bfc0939c:	00000000 	nop
bfc093a0:	2c420122 	sltiu	v0,v0,290
bfc093a4:	14400007 	bnez	v0,bfc093c4 <RescueMode+0x70c>
bfc093a8:	00000000 	nop
			{
				//_memctl_debug_printf("\n6.Manual set DIDER1 ,Enable EN_HCLK DQS delay\n"); 
				//REG32(DIDER1)=0x80800000;	
				//REG32(DIDER1)=0x04040000;
				//REG32(DIDER2)=0x80000000;	
				REG32(DIDER1)=0x1f1f0000;	
bfc093ac:	3c02b800 	lui	v0,0xb800
bfc093b0:	34421050 	ori	v0,v0,0x1050
bfc093b4:	3c031f1f 	lui	v1,0x1f1f
bfc093b8:	ac430000 	sw	v1,0(v0)
bfc093bc:	0bf024f5 	j	bfc093d4 <RescueMode+0x71c>
bfc093c0:	00000000 	nop
			}
			else
			{
					//Step4 , DIDER1
				_memctl_debug_printf("\n4.Manual set DIDER1\n"); 
				REG32(DIDER1)=0x04040000;
bfc093c4:	3c02b800 	lui	v0,0xb800
bfc093c8:	34421050 	ori	v0,v0,0x1050
bfc093cc:	3c030404 	lui	v1,0x404
bfc093d0:	ac430000 	sw	v1,0(v0)
			}
			//memctlc_hw_auto_calibration(16,0xa0800000); //Step6
			_update_phy_param();	
bfc093d4:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc093d8:	00000000 	nop
		}

		

		
		if(ch=='n')
bfc093dc:	93a30034 	lbu	v1,52(sp)
bfc093e0:	2402006e 	li	v0,110
bfc093e4:	14620080 	bne	v1,v0,bfc095e8 <RescueMode+0x930>
bfc093e8:	00000000 	nop
			//_memctl_debug_printf("DWPR1(0x%x)=0x%x\n",DWPR1,REG32(DWPR1));	
			#else
			//RTK_ZQ_K();
			_memctl_debug_printf("\n2.Set DRAM_CMD_Phase falling of clk\n");	
			//REG32(DWPR1)=0xC0000000;
			REG32(DWPR1)=0x40000000;
bfc093ec:	3c02b800 	lui	v0,0xb800
bfc093f0:	34421800 	ori	v0,v0,0x1800
bfc093f4:	3c034000 	lui	v1,0x4000
bfc093f8:	ac430000 	sw	v1,0(v0)
			_memctl_debug_printf("DWPR1(0x%x)=0x%x\n",DWPR1,REG32(DWPR1));	

			_memctl_debug_printf("\n1.Set DRAM clk phase inverter \n");	
			REG32(DOR)=0x100000ff;
bfc093fc:	3c02b800 	lui	v0,0xb800
bfc09400:	34421064 	ori	v0,v0,0x1064
bfc09404:	3c031000 	lui	v1,0x1000
bfc09408:	346300ff 	ori	v1,v1,0xff
bfc0940c:	ac430000 	sw	v1,0(v0)
			_memctl_debug_printf("DOR(0x%x)=0x%x\n",DOR,REG32(DOR));	

			_memctl_debug_printf("\n3.PI phase\n");	
			REG32(0xb80000dc)=0x24900400;
bfc09410:	3c02b800 	lui	v0,0xb800
bfc09414:	344200dc 	ori	v0,v0,0xdc
bfc09418:	3c032490 	lui	v1,0x2490
bfc0941c:	34630400 	ori	v1,v1,0x400
bfc09420:	ac430000 	sw	v1,0(v0)
			_memctl_debug_printf("0xb80000dc(0x%x)=0x%x\n",0xb80000dc,REG32(0xb80000dc));	

			_memctl_debug_printf("\n4.DQ phase inv\n");	
			REG32(0xb8001804)|=(5<<29);
bfc09424:	3c02b800 	lui	v0,0xb800
bfc09428:	34421804 	ori	v0,v0,0x1804
bfc0942c:	3c03b800 	lui	v1,0xb800
bfc09430:	34631804 	ori	v1,v1,0x1804
bfc09434:	8c640000 	lw	a0,0(v1)
bfc09438:	3c03a000 	lui	v1,0xa000
bfc0943c:	00831825 	or	v1,a0,v1
bfc09440:	ac430000 	sw	v1,0(v0)
			_memctl_debug_printf("0xb8001804(0x%x)=0x%x\n",0xb8001804,REG32(0xb8001804));		

			

			_memctl_debug_printf("\n5.PLL div2\n");	
			REG32(0xb80000d8)|=(1<<21);
bfc09444:	3c02b800 	lui	v0,0xb800
bfc09448:	344200d8 	ori	v0,v0,0xd8
bfc0944c:	3c03b800 	lui	v1,0xb800
bfc09450:	346300d8 	ori	v1,v1,0xd8
bfc09454:	8c640000 	lw	a0,0(v1)
bfc09458:	3c030020 	lui	v1,0x20
bfc0945c:	00831825 	or	v1,a0,v1
bfc09460:	ac430000 	sw	v1,0(v0)
			_memctl_debug_printf("0xb80000d8(0x%x)=0x%x\n",0xb80000d8,REG32(0xb80000d8));

			_memctl_debug_printf("\n6.PLL multi 2\n");	
			REG32(0xb80000d8)&=~(1<<21);
bfc09464:	3c02b800 	lui	v0,0xb800
bfc09468:	344200d8 	ori	v0,v0,0xd8
bfc0946c:	3c03b800 	lui	v1,0xb800
bfc09470:	346300d8 	ori	v1,v1,0xd8
bfc09474:	8c640000 	lw	a0,0(v1)
bfc09478:	3c03ffdf 	lui	v1,0xffdf
bfc0947c:	3463ffff 	ori	v1,v1,0xffff
bfc09480:	00831824 	and	v1,a0,v1
bfc09484:	ac430000 	sw	v1,0(v0)
			#else
			
			
			//Step3 , DCR
			_memctl_debug_printf("\n3.Set DCR(128MB)\n"); 
			REG32(DCR)=0x21220000;//
bfc09488:	3c02b800 	lui	v0,0xb800
bfc0948c:	34421004 	ori	v0,v0,0x1004
bfc09490:	3c032122 	lui	v1,0x2122
bfc09494:	ac430000 	sw	v1,0(v0)

			chk_dram_cfg(0); 
bfc09498:	00002021 	move	a0,zero
bfc0949c:	0ff0167a 	jal	bfc059e8 <chk_dram_cfg>
bfc094a0:	00000000 	nop
			#endif

			
				_update_phy_param();
bfc094a4:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc094a8:	00000000 	nop
			if(board_DRAM_freq_mhz()>=250)
bfc094ac:	0ff0260d 	jal	bfc09834 <board_DRAM_freq_mhz>
bfc094b0:	00000000 	nop
bfc094b4:	2c4200fa 	sltiu	v0,v0,250
bfc094b8:	14400007 	bnez	v0,bfc094d8 <RescueMode+0x820>
bfc094bc:	00000000 	nop
			{
				//_memctl_debug_printf("\n6.Manual set DIDER1 ,Enable EN_HCLK DQS delay\n"); 
				//REG32(DIDER1)=0x80800000;	
				//REG32(DIDER1)=0x04040000;
				//REG32(DIDER2)=0x80000000;	
				REG32(DIDER1)=0x1f1f0000;	
bfc094c0:	3c02b800 	lui	v0,0xb800
bfc094c4:	34421050 	ori	v0,v0,0x1050
bfc094c8:	3c031f1f 	lui	v1,0x1f1f
bfc094cc:	ac430000 	sw	v1,0(v0)
bfc094d0:	0bf0253a 	j	bfc094e8 <RescueMode+0x830>
bfc094d4:	00000000 	nop
			}
			else
			{
					//Step4 , DIDER1
				_memctl_debug_printf("\n4.Manual set DIDER1\n"); 
				REG32(DIDER1)=0x04040000;
bfc094d8:	3c02b800 	lui	v0,0xb800
bfc094dc:	34421050 	ori	v0,v0,0x1050
bfc094e0:	3c030404 	lui	v1,0x404
bfc094e4:	ac430000 	sw	v1,0(v0)


				//Step5 , DACQ0~15
			_memctl_debug_printf("\n5.Manual set DACQ0~15\n"); 
			int i;
			 for(i=0;i<32;i++)
bfc094e8:	afa00010 	sw	zero,16(sp)
bfc094ec:	0bf02548 	j	bfc09520 <RescueMode+0x868>
bfc094f0:	00000000 	nop
 			REG32( 0xb8001510 +i*4 ) = 0x00040200;
bfc094f4:	8fa30010 	lw	v1,16(sp)
bfc094f8:	3c022e00 	lui	v0,0x2e00
bfc094fc:	34420544 	ori	v0,v0,0x544
bfc09500:	00621021 	addu	v0,v1,v0
bfc09504:	00021080 	sll	v0,v0,0x2
bfc09508:	3c030004 	lui	v1,0x4
bfc0950c:	34630200 	ori	v1,v1,0x200
bfc09510:	ac430000 	sw	v1,0(v0)


				//Step5 , DACQ0~15
			_memctl_debug_printf("\n5.Manual set DACQ0~15\n"); 
			int i;
			 for(i=0;i<32;i++)
bfc09514:	8fa20010 	lw	v0,16(sp)
bfc09518:	24420001 	addiu	v0,v0,1
bfc0951c:	afa20010 	sw	v0,16(sp)
bfc09520:	8fa20010 	lw	v0,16(sp)
bfc09524:	28420020 	slti	v0,v0,32
bfc09528:	1440fff2 	bnez	v0,bfc094f4 <RescueMode+0x83c>
bfc0952c:	00000000 	nop
 			REG32( 0xb8001510 +i*4 ) = 0x00040200;
 			//REG32( 0xb8001510 +i*4 ) = 0x10040200;

			_update_phy_param();	
bfc09530:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc09534:	00000000 	nop
 			/* Reset phy fifo pointer */
 			REG32( 0xb8001500 ) = 0x80000000;
bfc09538:	3c02b800 	lui	v0,0xb800
bfc0953c:	34421500 	ori	v0,v0,0x1500
bfc09540:	3c038000 	lui	v1,0x8000
bfc09544:	ac430000 	sw	v1,0(v0)
 			REG32( 0xb8001500 ) = 0x80000010;
bfc09548:	3c02b800 	lui	v0,0xb800
bfc0954c:	34421500 	ori	v0,v0,0x1500
bfc09550:	3c038000 	lui	v1,0x8000
bfc09554:	34630010 	ori	v1,v1,0x10
bfc09558:	ac430000 	sw	v1,0(v0)

			
			_update_phy_param();	
bfc0955c:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc09560:	00000000 	nop
			/* Reset DRAM DLL */
			//	if(memctlc_is_DDR()){
					//_memctl_debug_printf("Invoke memctlc_ddr1_dll_reset()\n");
					//memctlc_ddr1_dll_reset();
				//}else if(memctlc_is_DDR2()){
				if(memctlc_is_DDR2()){
bfc09564:	0ff00cbd 	jal	bfc032f4 <memctlc_is_DDR2>
bfc09568:	00000000 	nop
bfc0956c:	10400005 	beqz	v0,bfc09584 <RescueMode+0x8cc>
bfc09570:	00000000 	nop
				_memctl_debug_printf("Invoke memctlc_ddr2_dll_reset()\n");
					memctlc_ddr2_dll_reset();
bfc09574:	0ff01c2d 	jal	bfc070b4 <memctlc_ddr2_dll_reset>
bfc09578:	00000000 	nop
bfc0957c:	0bf02567 	j	bfc0959c <RescueMode+0x8e4>
bfc09580:	00000000 	nop
				}else if(memctlc_is_DDR3()){
bfc09584:	0ff00caf 	jal	bfc032bc <memctlc_is_DDR3>
bfc09588:	00000000 	nop
bfc0958c:	10400003 	beqz	v0,bfc0959c <RescueMode+0x8e4>
bfc09590:	00000000 	nop
					_memctl_debug_printf("Invoke memctlc_ddr3_dll_reset()\n");
					memctlc_ddr3_dll_reset();
bfc09594:	0ff01cc8 	jal	bfc07320 <memctlc_ddr3_dll_reset>
bfc09598:	00000000 	nop
					//while(1);
				}
			#endif			
			
			
			_update_phy_param();
bfc0959c:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc095a0:	00000000 	nop
			if(board_DRAM_freq_mhz()>=290)
bfc095a4:	0ff0260d 	jal	bfc09834 <board_DRAM_freq_mhz>
bfc095a8:	00000000 	nop
bfc095ac:	2c420122 	sltiu	v0,v0,290
bfc095b0:	14400007 	bnez	v0,bfc095d0 <RescueMode+0x918>
bfc095b4:	00000000 	nop
			{
				//_memctl_debug_printf("\n6.Manual set DIDER1 ,Enable EN_HCLK DQS delay\n"); 
				//REG32(DIDER1)=0x80800000;	
				//REG32(DIDER1)=0x04040000;
				//REG32(DIDER2)=0x80000000;	
				REG32(DIDER1)=0x1f1f0000;	
bfc095b8:	3c02b800 	lui	v0,0xb800
bfc095bc:	34421050 	ori	v0,v0,0x1050
bfc095c0:	3c031f1f 	lui	v1,0x1f1f
bfc095c4:	ac430000 	sw	v1,0(v0)
bfc095c8:	0bf02578 	j	bfc095e0 <RescueMode+0x928>
bfc095cc:	00000000 	nop
			}
			else
			{
					//Step4 , DIDER1
				_memctl_debug_printf("\n4.Manual set DIDER1\n"); 
				REG32(DIDER1)=0x04040000;
bfc095d0:	3c02b800 	lui	v0,0xb800
bfc095d4:	34421050 	ori	v0,v0,0x1050
bfc095d8:	3c030404 	lui	v1,0x404
bfc095dc:	ac430000 	sw	v1,0(v0)
			}
			//memctlc_hw_auto_calibration(16,0xa0800000); //Step6
			_update_phy_param();	
bfc095e0:	0ff0168d 	jal	bfc05a34 <_update_phy_param>
bfc095e4:	00000000 	nop
			
		}

		

		if(ch=='o')
bfc095e8:	93a30034 	lbu	v1,52(sp)
bfc095ec:	2402006f 	li	v0,111
bfc095f0:	14620003 	bne	v1,v0,bfc09600 <RescueMode+0x948>
bfc095f4:	00000000 	nop
		{				
			_memctl_debug_printf("\nDram_test_onflash():\n");
			Dram_test_onflash();			
bfc095f8:	0ff02684 	jal	bfc09a10 <Dram_test_onflash>
bfc095fc:	00000000 	nop
		}

	

		if(ch=='q')
bfc09600:	93a30034 	lbu	v1,52(sp)
bfc09604:	24020071 	li	v0,113
bfc09608:	1462000f 	bne	v1,v0,bfc09648 <RescueMode+0x990>
bfc0960c:	00000000 	nop
		/* Reset DRAM DLL */
			//	if(memctlc_is_DDR()){
					//_memctl_debug_printf("Invoke memctlc_ddr1_dll_reset()\n");
					//memctlc_ddr1_dll_reset();
				//}else if(memctlc_is_DDR2()){
				if(memctlc_is_DDR2()){
bfc09610:	0ff00cbd 	jal	bfc032f4 <memctlc_is_DDR2>
bfc09614:	00000000 	nop
bfc09618:	10400005 	beqz	v0,bfc09630 <RescueMode+0x978>
bfc0961c:	00000000 	nop
				_memctl_debug_printf("Invoke memctlc_ddr2_dll_reset()\n");
					memctlc_ddr2_dll_reset();
bfc09620:	0ff01c2d 	jal	bfc070b4 <memctlc_ddr2_dll_reset>
bfc09624:	00000000 	nop
bfc09628:	0bf02592 	j	bfc09648 <RescueMode+0x990>
bfc0962c:	00000000 	nop
				}else if(memctlc_is_DDR3()){
bfc09630:	0ff00caf 	jal	bfc032bc <memctlc_is_DDR3>
bfc09634:	00000000 	nop
bfc09638:	10400003 	beqz	v0,bfc09648 <RescueMode+0x990>
bfc0963c:	00000000 	nop
					_memctl_debug_printf("Invoke memctlc_ddr3_dll_reset()\n");
					memctlc_ddr3_dll_reset();
bfc09640:	0ff01cc8 	jal	bfc07320 <memctlc_ddr3_dll_reset>
bfc09644:	00000000 	nop

			_memctl_debug_printf("0xa0600000=0x%x \n",REG32(0xa0600000) );	
		}	
		

		if(ch=='t')
bfc09648:	93a30034 	lbu	v1,52(sp)
bfc0964c:	24020074 	li	v0,116
bfc09650:	14620011 	bne	v1,v0,bfc09698 <RescueMode+0x9e0>
bfc09654:	00000000 	nop
		{
			_memctl_debug_printf("Test:Write 0xa0400000=0xa5a55a5a\n");
			REG32(0xa0400000)=0xa5a55a5a;
bfc09658:	3c02a040 	lui	v0,0xa040
bfc0965c:	3c03a5a5 	lui	v1,0xa5a5
bfc09660:	34635a5a 	ori	v1,v1,0x5a5a
bfc09664:	ac430000 	sw	v1,0(v0)
			//_memctl_debug_printf("0xa0400000=0x%x \n",REG32(0xa0400000) );	

			_memctl_debug_printf("Test:Write 0xa0400000=0x12345678\n");
			REG32(0xa0400000)=0x12345678;
bfc09668:	3c02a040 	lui	v0,0xa040
bfc0966c:	3c031234 	lui	v1,0x1234
bfc09670:	34635678 	ori	v1,v1,0x5678
bfc09674:	ac430000 	sw	v1,0(v0)
			//_memctl_debug_printf("0xa0400000=0x%x \n",REG32(0xa0400000) );	

			_memctl_debug_printf("Test:Write 0xa0500000=0xa5005a00\n");
			REG32(0xa0500000)=0xa5005a00;
bfc09678:	3c02a050 	lui	v0,0xa050
bfc0967c:	3c03a500 	lui	v1,0xa500
bfc09680:	34635a00 	ori	v1,v1,0x5a00
bfc09684:	ac430000 	sw	v1,0(v0)
			//_memctl_debug_printf("0xa0500000=0x%x \n",REG32(0xa0500000) );	

			_memctl_debug_printf("Test:Write 0xa0600000=0x98765432\n");
			REG32(0xa0600000)=0x98765432;
bfc09688:	3c02a060 	lui	v0,0xa060
bfc0968c:	3c039876 	lui	v1,0x9876
bfc09690:	34635432 	ori	v1,v1,0x5432
bfc09694:	ac430000 	sw	v1,0(v0)
			//_memctl_debug_printf("0xa0600000=0x%x \n",REG32(0xa0600000) );	
		}	
		
		if(ch=='u')
bfc09698:	93a30034 	lbu	v1,52(sp)
bfc0969c:	24020075 	li	v0,117
bfc096a0:	14620018 	bne	v1,v0,bfc09704 <RescueMode+0xa4c>
bfc096a4:	00000000 	nop
		{	_memctl_debug_printf("up ");	
			p=JUMPADDR;
bfc096a8:	3c02a010 	lui	v0,0xa010
bfc096ac:	afa20030 	sw	v0,48(sp)
			
			
			_memctl_debug_printf("len=");		
			len=uart_rx8b_val();
bfc096b0:	0ff0070b 	jal	bfc01c2c <uart_rx8b_val>
bfc096b4:	00000000 	nop
bfc096b8:	afa2002c 	sw	v0,44(sp)

			_memctl_debug_printf(" load...");		

			while(len--)
bfc096bc:	0bf025b9 	j	bfc096e4 <RescueMode+0xa2c>
bfc096c0:	00000000 	nop
			{
				*p=uart_inc();						
bfc096c4:	0ff001ff 	jal	bfc007fc <uart_inc>
bfc096c8:	00000000 	nop
bfc096cc:	00401821 	move	v1,v0
bfc096d0:	8fa20030 	lw	v0,48(sp)
bfc096d4:	a0430000 	sb	v1,0(v0)
				p++;
bfc096d8:	8fa20030 	lw	v0,48(sp)
bfc096dc:	24420001 	addiu	v0,v0,1
bfc096e0:	afa20030 	sw	v0,48(sp)
			_memctl_debug_printf("len=");		
			len=uart_rx8b_val();

			_memctl_debug_printf(" load...");		

			while(len--)
bfc096e4:	8fa2002c 	lw	v0,44(sp)
bfc096e8:	0002102b 	sltu	v0,zero,v0
bfc096ec:	304200ff 	andi	v0,v0,0xff
bfc096f0:	8fa3002c 	lw	v1,44(sp)
bfc096f4:	2463ffff 	addiu	v1,v1,-1
bfc096f8:	afa3002c 	sw	v1,44(sp)
bfc096fc:	1440fff1 	bnez	v0,bfc096c4 <RescueMode+0xa0c>
bfc09700:	00000000 	nop
				p++;
			}

		}	

		if(ch=='v')
bfc09704:	93a30034 	lbu	v1,52(sp)
bfc09708:	24020076 	li	v0,118
bfc0970c:	14620003 	bne	v1,v0,bfc0971c <RescueMode+0xa64>
bfc09710:	00000000 	nop
		{	
			_memctl_debug_printf("\nZQ test\n");	
			RTK_ZQ_K();
bfc09714:	0ff028c8 	jal	bfc0a320 <RTK_ZQ_K>
bfc09718:	00000000 	nop
		}	


		

		if(ch=='x')
bfc0971c:	93a30034 	lbu	v1,52(sp)
bfc09720:	24020078 	li	v0,120
bfc09724:	14620006 	bne	v1,v0,bfc09740 <RescueMode+0xa88>
bfc09728:	00000000 	nop
		{		
				len=xmodem_receive();
bfc0972c:	0ff00760 	jal	bfc01d80 <xmodem_receive>
bfc09730:	00000000 	nop
bfc09734:	afa2002c 	sw	v0,44(sp)
				_memctl_debug_printf("len=%d\n",len);
				ch='j';
bfc09738:	2402006a 	li	v0,106
bfc0973c:	a3a20034 	sb	v0,52(sp)
		}	

		

		if(ch=='z')
bfc09740:	93a30034 	lbu	v1,52(sp)
bfc09744:	2402007a 	li	v0,122
bfc09748:	1462fd63 	bne	v1,v0,bfc08cd8 <RescueMode+0x20>
bfc0974c:	00000000 	nop
		{	
			//250MHZ
			printf("\nDDR2/3 init flow 250MHZ\n"); 
bfc09750:	3c02bfc1 	lui	v0,0xbfc1
bfc09754:	2444b4cc 	addiu	a0,v0,-19252
bfc09758:	0ff003ac 	jal	bfc00eb0 <printf>
bfc0975c:	00000000 	nop
			REG32(SYS_HW_STRAP)=0x59000260; //Set memory clock=250MHZ	
bfc09760:	3c02b800 	lui	v0,0xb800
bfc09764:	34420008 	ori	v0,v0,0x8
bfc09768:	3c035900 	lui	v1,0x5900
bfc0976c:	34630260 	ori	v1,v1,0x260
bfc09770:	ac430000 	sw	v1,0(v0)

			_memctl_update_phy_param();
bfc09774:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc09778:	00000000 	nop

			/*Realtek RTL8198C ZQ pad calibration*/
			RTK_ZQ_K();
bfc0977c:	0ff028c8 	jal	bfc0a320 <RTK_ZQ_K>
bfc09780:	00000000 	nop

			/*For DDR3 must , for DDR2 safe*/
			memctlc_DBFM_enalbe();
bfc09784:	0ff0293f 	jal	bfc0a4fc <memctlc_DBFM_enalbe>
bfc09788:	00000000 	nop

			memctlc_8198C_PI_init();
bfc0978c:	0ff0295a 	jal	bfc0a568 <memctlc_8198C_PI_init>
bfc09790:	00000000 	nop

			_memctl_update_phy_param();
bfc09794:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc09798:	00000000 	nop


				memctlc_config_DTR();
bfc0979c:	0ff00c4c 	jal	bfc03130 <memctlc_config_DTR>
bfc097a0:	00000000 	nop

				if(memctlc_is_DDR2()){
bfc097a4:	0ff00cbd 	jal	bfc032f4 <memctlc_is_DDR2>
bfc097a8:	00000000 	nop
bfc097ac:	10400009 	beqz	v0,bfc097d4 <RescueMode+0xb1c>
bfc097b0:	00000000 	nop
					REG32(DCR)=0x11210000;//32MB				
bfc097b4:	3c02b800 	lui	v0,0xb800
bfc097b8:	34421004 	ori	v0,v0,0x1004
bfc097bc:	3c031121 	lui	v1,0x1121
bfc097c0:	ac430000 	sw	v1,0(v0)
			
					memctlc_ddr2_dll_reset();
bfc097c4:	0ff01c2d 	jal	bfc070b4 <memctlc_ddr2_dll_reset>
bfc097c8:	00000000 	nop
bfc097cc:	0bf025ff 	j	bfc097fc <RescueMode+0xb44>
bfc097d0:	00000000 	nop

					
				}else if(memctlc_is_DDR3()){		
bfc097d4:	0ff00caf 	jal	bfc032bc <memctlc_is_DDR3>
bfc097d8:	00000000 	nop
bfc097dc:	10400007 	beqz	v0,bfc097fc <RescueMode+0xb44>
bfc097e0:	00000000 	nop
					REG32(DCR)=0x21220000;//128MB			
bfc097e4:	3c02b800 	lui	v0,0xb800
bfc097e8:	34421004 	ori	v0,v0,0x1004
bfc097ec:	3c032122 	lui	v1,0x2122
bfc097f0:	ac430000 	sw	v1,0(v0)
					
					memctlc_ddr3_dll_reset();					
bfc097f4:	0ff01cc8 	jal	bfc07320 <memctlc_ddr3_dll_reset>
bfc097f8:	00000000 	nop
					
				}else{
					_memctl_debug_printf("%s, %d: Error, Unknown DRAM type! \n", __FUNCTION__, __LINE__);	
					//while(1);
				}
				_memctl_update_phy_param();
bfc097fc:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc09800:	00000000 	nop

				memctlc_check_DTR();	
bfc09804:	0ff0165e 	jal	bfc05978 <memctlc_check_DTR>
bfc09808:	00000000 	nop

				_memctl_update_phy_param();
bfc0980c:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc09810:	00000000 	nop
			
			 	ShowRxDelayMap(); 				
bfc09814:	0ff003be 	jal	bfc00ef8 <ShowRxDelayMap>
bfc09818:	00000000 	nop
			
				 DDR_cali_API7();
bfc0981c:	0ff021e6 	jal	bfc08798 <DDR_cali_API7>
bfc09820:	00000000 	nop

				 _memctl_debug_printf("DRAM size detect\n");
				memctlc_dram_size_detect(); //Step4: Size detect , set DMCR to activate DRAM parameter
bfc09824:	0ff02026 	jal	bfc08098 <memctlc_dram_size_detect>
bfc09828:	00000000 	nop
			//_memctl_debug_printf("j:jmp\n");		
			_memctl_debug_printf("b:booting\n");
			_memctl_debug_printf("c:\n");			
#endif
		}
	}
bfc0982c:	0bf02337 	j	bfc08cdc <RescueMode+0x24>
bfc09830:	00000000 	nop

bfc09834 <board_DRAM_freq_mhz>:
 * 	None
 * Return:
 *  	DRAM Frequncy in MHz.
 */
unsigned int board_DRAM_freq_mhz(void)
{
bfc09834:	27bdfff0 	addiu	sp,sp,-16

	return mem_clk;
#else		

	
	unsigned int v=REG32(SYS_HW_STRAP);
bfc09838:	3c02b800 	lui	v0,0xb800
bfc0983c:	34420008 	ori	v0,v0,0x8
bfc09840:	8c420000 	lw	v0,0(v0)
bfc09844:	afa2000c 	sw	v0,12(sp)
	_memctl_debug_printf("Strap=%x\n",v);

	//-----------	

	//unsigned char m2x_freq_sel=GET_BITVAL(v, 11, RANG4);  //bit [14:10], but bit 10 is not strap pin
	unsigned char m2x_freq_sel=GET_BITVAL(v, 10, RANG5);  //bit [14:10], but bit 10 is not strap pin
bfc09848:	8fa2000c 	lw	v0,12(sp)
bfc0984c:	30427c00 	andi	v0,v0,0x7c00
bfc09850:	00021282 	srl	v0,v0,0xa
bfc09854:	a3a20008 	sb	v0,8(sp)

	//-----------
	
	
		
	unsigned int m2xclk=m2x_clksel_table[m2x_freq_sel];
bfc09858:	93a30008 	lbu	v1,8(sp)
bfc0985c:	3c02bfc1 	lui	v0,0xbfc1
bfc09860:	00031880 	sll	v1,v1,0x2
bfc09864:	2442b540 	addiu	v0,v0,-19136
bfc09868:	00621021 	addu	v0,v1,v0
bfc0986c:	8c420000 	lw	v0,0(v0)
bfc09870:	afa20004 	sw	v0,4(sp)
	unsigned int m1xclk=m2x_clksel_table[m2x_freq_sel];
bfc09874:	93a30008 	lbu	v1,8(sp)
bfc09878:	3c02bfc1 	lui	v0,0xbfc1
bfc0987c:	00031880 	sll	v1,v1,0x2
bfc09880:	2442b540 	addiu	v0,v0,-19136
bfc09884:	00621021 	addu	v0,v1,v0
bfc09888:	8c420000 	lw	v0,0(v0)
bfc0988c:	afa20000 	sw	v0,0(sp)
	if(REG32(0xb80000d8)=0x562B5DC0) //	clk/2
	{
		return m1xclk/2;//clock div 2
	}
	#else
		return m1xclk;
bfc09890:	8fa20000 	lw	v0,0(sp)
	#endif
	
#endif
}
bfc09894:	27bd0010 	addiu	sp,sp,16
bfc09898:	03e00008 	jr	ra
bfc0989c:	00000000 	nop

bfc098a0 <rand2>:

#if 1//Dramtest on flash

#if 1
unsigned int rand2(void)
{
bfc098a0:	27bdfff0 	addiu	sp,sp,-16
    static unsigned int x = 123456789;
    static unsigned int y = 362436;
    static unsigned int z = 521288629;
    static unsigned int c = 7654321;

    unsigned long long t, a= 698769069;
bfc098a4:	3c0329a6 	lui	v1,0x29a6
bfc098a8:	34635ead 	ori	v1,v1,0x5ead
bfc098ac:	00001021 	move	v0,zero
bfc098b0:	afa30004 	sw	v1,4(sp)
bfc098b4:	afa20000 	sw	v0,0(sp)

    x = 69069 * x + 12345;
bfc098b8:	3c02bfc1 	lui	v0,0xbfc1
bfc098bc:	8c4ab7f8 	lw	t2,-18440(v0)
bfc098c0:	01401021 	move	v0,t2
bfc098c4:	00021080 	sll	v0,v0,0x2
bfc098c8:	00021880 	sll	v1,v0,0x2
bfc098cc:	00431021 	addu	v0,v0,v1
bfc098d0:	00021900 	sll	v1,v0,0x4
bfc098d4:	00621823 	subu	v1,v1,v0
bfc098d8:	006a1823 	subu	v1,v1,t2
bfc098dc:	000310c0 	sll	v0,v1,0x3
bfc098e0:	00431023 	subu	v0,v0,v1
bfc098e4:	00021940 	sll	v1,v0,0x5
bfc098e8:	00431021 	addu	v0,v0,v1
bfc098ec:	24433039 	addiu	v1,v0,12345
bfc098f0:	3c02bfc1 	lui	v0,0xbfc1
bfc098f4:	ac43b7f8 	sw	v1,-18440(v0)
    y ^= (y << 13); y ^= (y >> 17); y ^= (y << 5);
bfc098f8:	3c02bfc1 	lui	v0,0xbfc1
bfc098fc:	8c42b7fc 	lw	v0,-18436(v0)
bfc09900:	00021b40 	sll	v1,v0,0xd
bfc09904:	3c02bfc1 	lui	v0,0xbfc1
bfc09908:	8c42b7fc 	lw	v0,-18436(v0)
bfc0990c:	00621826 	xor	v1,v1,v0
bfc09910:	3c02bfc1 	lui	v0,0xbfc1
bfc09914:	ac43b7fc 	sw	v1,-18436(v0)
bfc09918:	3c02bfc1 	lui	v0,0xbfc1
bfc0991c:	8c42b7fc 	lw	v0,-18436(v0)
bfc09920:	00021c42 	srl	v1,v0,0x11
bfc09924:	3c02bfc1 	lui	v0,0xbfc1
bfc09928:	8c42b7fc 	lw	v0,-18436(v0)
bfc0992c:	00621826 	xor	v1,v1,v0
bfc09930:	3c02bfc1 	lui	v0,0xbfc1
bfc09934:	ac43b7fc 	sw	v1,-18436(v0)
bfc09938:	3c02bfc1 	lui	v0,0xbfc1
bfc0993c:	8c42b7fc 	lw	v0,-18436(v0)
bfc09940:	00021940 	sll	v1,v0,0x5
bfc09944:	3c02bfc1 	lui	v0,0xbfc1
bfc09948:	8c42b7fc 	lw	v0,-18436(v0)
bfc0994c:	00621826 	xor	v1,v1,v0
bfc09950:	3c02bfc1 	lui	v0,0xbfc1
bfc09954:	ac43b7fc 	sw	v1,-18436(v0)
    t = a * z + c; c = (t >> 32); z = t;
bfc09958:	3c02bfc1 	lui	v0,0xbfc1
bfc0995c:	8c42b800 	lw	v0,-18432(v0)
bfc09960:	00402821 	move	a1,v0
bfc09964:	00002021 	move	a0,zero
bfc09968:	8fa20004 	lw	v0,4(sp)
bfc0996c:	70441002 	mul	v0,v0,a0
bfc09970:	8fa30000 	lw	v1,0(sp)
bfc09974:	70651802 	mul	v1,v1,a1
bfc09978:	00431021 	addu	v0,v0,v1
bfc0997c:	8fa30004 	lw	v1,4(sp)
bfc09980:	00650019 	multu	v1,a1
bfc09984:	00002812 	mflo	a1
bfc09988:	00002010 	mfhi	a0
bfc0998c:	00441021 	addu	v0,v0,a0
bfc09990:	00402021 	move	a0,v0
bfc09994:	3c02bfc1 	lui	v0,0xbfc1
bfc09998:	8c42b804 	lw	v0,-18428(v0)
bfc0999c:	00403821 	move	a3,v0
bfc099a0:	00003021 	move	a2,zero
bfc099a4:	00a71821 	addu	v1,a1,a3
bfc099a8:	0065502b 	sltu	t2,v1,a1
bfc099ac:	00861021 	addu	v0,a0,a2
bfc099b0:	01422021 	addu	a0,t2,v0
bfc099b4:	00801021 	move	v0,a0
bfc099b8:	afa3000c 	sw	v1,12(sp)
bfc099bc:	afa20008 	sw	v0,8(sp)
bfc099c0:	8fa20008 	lw	v0,8(sp)
bfc099c4:	00024802 	srl	t1,v0,0x0
bfc099c8:	00004021 	move	t0,zero
bfc099cc:	01201821 	move	v1,t1
bfc099d0:	3c02bfc1 	lui	v0,0xbfc1
bfc099d4:	ac43b804 	sw	v1,-18428(v0)
bfc099d8:	8fa3000c 	lw	v1,12(sp)
bfc099dc:	3c02bfc1 	lui	v0,0xbfc1
bfc099e0:	ac43b800 	sw	v1,-18432(v0)

    return x + y + z;
bfc099e4:	3c02bfc1 	lui	v0,0xbfc1
bfc099e8:	8c43b7f8 	lw	v1,-18440(v0)
bfc099ec:	3c02bfc1 	lui	v0,0xbfc1
bfc099f0:	8c42b7fc 	lw	v0,-18436(v0)
bfc099f4:	00621821 	addu	v1,v1,v0
bfc099f8:	3c02bfc1 	lui	v0,0xbfc1
bfc099fc:	8c42b800 	lw	v0,-18432(v0)
bfc09a00:	00621021 	addu	v0,v1,v0
}
bfc09a04:	27bd0010 	addiu	sp,sp,16
bfc09a08:	03e00008 	jr	ra
bfc09a0c:	00000000 	nop

bfc09a10 <Dram_test_onflash>:
//#define END_ADDR      0x4000000       //64MB
//#define END_ADDR      0x8000000         //128MB      
#define MPMR_REG 0xB8001040
#define BURST_COUNTS  256
void Dram_test_onflash()
{
bfc09a10:	27bdfb98 	addiu	sp,sp,-1128
bfc09a14:	afbf0464 	sw	ra,1124(sp)
bfc09a18:	afb00460 	sw	s0,1120(sp)
    unsigned int i, j,k,k2=0;
bfc09a1c:	afa00050 	sw	zero,80(sp)
    unsigned int cache_type=0;
bfc09a20:	afa0004c 	sw	zero,76(sp)
    unsigned int access_type=0;
bfc09a24:	afa00048 	sw	zero,72(sp)
    unsigned int Data_pattern=0;
bfc09a28:	afa00044 	sw	zero,68(sp)
     unsigned int random_test=1;
bfc09a2c:	24020001 	li	v0,1
bfc09a30:	afa20040 	sw	v0,64(sp)
    unsigned int addr;
    unsigned int burst=0;
bfc09a34:	afa00038 	sw	zero,56(sp)

    if(REG32(DCR_REG)&0x02000000) //DRAM chip select==1
	END_ADDR=END_ADDR*2;	
	
#else
	END_ADDR=0x01000000; //Test 16MB  
bfc09a38:	3c020100 	lui	v0,0x100
bfc09a3c:	afa2001c 	sw	v0,28(sp)
#endif

    unsigned int keep_W_R_mode;
   
    	 keep_W_R_mode= 0;
bfc09a40:	afa00014 	sw	zero,20(sp)
        enable_delay= 0;
bfc09a44:	afa00028 	sw	zero,40(sp)
	 PM_MODE= 0;
bfc09a48:	afa00020 	sw	zero,32(sp)
	 cache_type=1;
bfc09a4c:	24020001 	li	v0,1
bfc09a50:	afa2004c 	sw	v0,76(sp)
	 access_type=2;
bfc09a54:	24020002 	li	v0,2
bfc09a58:	afa20048 	sw	v0,72(sp)
	 Data_pattern=1;//sequential
bfc09a5c:	24020001 	li	v0,1
bfc09a60:	afa20044 	sw	v0,68(sp)
	 random_test=1;
bfc09a64:	24020001 	li	v0,1
bfc09a68:	afa20040 	sw	v0,64(sp)

      

#if 1                                     //RTL8196_208PIN_SUPPORT_DDR
        _memctl_debug_printf("\n================================\n");
        k2++;
bfc09a6c:	8fa20050 	lw	v0,80(sp)
bfc09a70:	24420001 	addiu	v0,v0,1
bfc09a74:	afa20050 	sw	v0,80(sp)
	
#endif

     

        for (samples = 0; samples < MAX_SAMPLE; samples++)
bfc09a78:	afa00030 	sw	zero,48(sp)
bfc09a7c:	0bf028b8 	j	bfc0a2e0 <Dram_test_onflash+0x8d0>
bfc09a80:	00000000 	nop
        {
            if(random_test==1)
bfc09a84:	8fa30040 	lw	v1,64(sp)
bfc09a88:	24020001 	li	v0,1
bfc09a8c:	14620012 	bne	v1,v0,bfc09ad8 <Dram_test_onflash+0xc8>
bfc09a90:	00000000 	nop
            {
            	       cache_type = rand2() % ((unsigned int) 2);
bfc09a94:	0ff02628 	jal	bfc098a0 <rand2>
bfc09a98:	00000000 	nop
bfc09a9c:	30420001 	andi	v0,v0,0x1
bfc09aa0:	afa2004c 	sw	v0,76(sp)
		       access_type = rand2()  % ((unsigned int) 3);            	      
bfc09aa4:	0ff02628 	jal	bfc098a0 <rand2>
bfc09aa8:	00000000 	nop
bfc09aac:	00402021 	move	a0,v0
bfc09ab0:	3c02aaaa 	lui	v0,0xaaaa
bfc09ab4:	3442aaab 	ori	v0,v0,0xaaab
bfc09ab8:	00820019 	multu	a0,v0
bfc09abc:	00001010 	mfhi	v0
bfc09ac0:	00021842 	srl	v1,v0,0x1
bfc09ac4:	00601021 	move	v0,v1
bfc09ac8:	00021040 	sll	v0,v0,0x1
bfc09acc:	00431021 	addu	v0,v0,v1
bfc09ad0:	00821023 	subu	v0,a0,v0
bfc09ad4:	afa20048 	sw	v0,72(sp)
            }	    
           

           // burst = rand2() % (unsigned int) BURST_COUNTS;	
            burst =BURST_COUNTS;	
bfc09ad8:	24020100 	li	v0,256
bfc09adc:	afa20038 	sw	v0,56(sp)

     

            //addr = 0x80000000 + START_ADDR + (rand2() % (unsigned int) (END_ADDR - START_ADDR));
            addr = 0xa0000000 + START_ADDR + (rand2() % (unsigned int) (END_ADDR - START_ADDR));
bfc09ae0:	0ff02628 	jal	bfc098a0 <rand2>
bfc09ae4:	00000000 	nop
bfc09ae8:	00402021 	move	a0,v0
bfc09aec:	8fa3001c 	lw	v1,28(sp)
bfc09af0:	3c02ff90 	lui	v0,0xff90
bfc09af4:	00621021 	addu	v0,v1,v0
bfc09af8:	0082001b 	divu	zero,a0,v0
bfc09afc:	004001f4 	teq	v0,zero,0x7
bfc09b00:	00001010 	mfhi	v0
bfc09b04:	00401821 	move	v1,v0
bfc09b08:	3c02a070 	lui	v0,0xa070
bfc09b0c:	00621021 	addu	v0,v1,v0
bfc09b10:	afa2003c 	sw	v0,60(sp)


   	   
            addr = cache_type ? (addr | 0x20000000) : addr;
bfc09b14:	8fa2004c 	lw	v0,76(sp)
bfc09b18:	10400006 	beqz	v0,bfc09b34 <Dram_test_onflash+0x124>
bfc09b1c:	00000000 	nop
bfc09b20:	8fa3003c 	lw	v1,60(sp)
bfc09b24:	3c022000 	lui	v0,0x2000
bfc09b28:	00621025 	or	v0,v1,v0
bfc09b2c:	0bf026ce 	j	bfc09b38 <Dram_test_onflash+0x128>
bfc09b30:	00000000 	nop
bfc09b34:	8fa2003c 	lw	v0,60(sp)
bfc09b38:	afa2003c 	sw	v0,60(sp)
            wdata = rand2();
bfc09b3c:	0ff02628 	jal	bfc098a0 <rand2>
bfc09b40:	00000000 	nop
bfc09b44:	afa20034 	sw	v0,52(sp)

	  
            if (access_type == 0)  //8 bit
bfc09b48:	8fa20048 	lw	v0,72(sp)
bfc09b4c:	14400006 	bnez	v0,bfc09b68 <Dram_test_onflash+0x158>
bfc09b50:	00000000 	nop
            {
                wdata = wdata & 0xFF;
bfc09b54:	8fa20034 	lw	v0,52(sp)
bfc09b58:	304200ff 	andi	v0,v0,0xff
bfc09b5c:	afa20034 	sw	v0,52(sp)
bfc09b60:	0bf026eb 	j	bfc09bac <Dram_test_onflash+0x19c>
bfc09b64:	00000000 	nop
            }
            else if (access_type == 1) //16 bit
bfc09b68:	8fa30048 	lw	v1,72(sp)
bfc09b6c:	24020001 	li	v0,1
bfc09b70:	1462000a 	bne	v1,v0,bfc09b9c <Dram_test_onflash+0x18c>
bfc09b74:	00000000 	nop
            {
                addr = (addr) & 0xFFFFFFFE;
bfc09b78:	8fa3003c 	lw	v1,60(sp)
bfc09b7c:	2402fffe 	li	v0,-2
bfc09b80:	00621024 	and	v0,v1,v0
bfc09b84:	afa2003c 	sw	v0,60(sp)
                wdata = wdata & 0xFFFF;
bfc09b88:	8fa20034 	lw	v0,52(sp)
bfc09b8c:	3042ffff 	andi	v0,v0,0xffff
bfc09b90:	afa20034 	sw	v0,52(sp)
bfc09b94:	0bf026eb 	j	bfc09bac <Dram_test_onflash+0x19c>
bfc09b98:	00000000 	nop
            }
            else //32 bit
            {
                addr = (addr) & 0xFFFFFFFC;
bfc09b9c:	8fa3003c 	lw	v1,60(sp)
bfc09ba0:	2402fffc 	li	v0,-4
bfc09ba4:	00621024 	and	v0,v1,v0
bfc09ba8:	afa2003c 	sw	v0,60(sp)
            }

        /* Check if Exceed Limit */
            if ( ((addr + (burst << access_type)) & 0x1FFFFFFF) > END_ADDR)
bfc09bac:	8fa20048 	lw	v0,72(sp)
bfc09bb0:	8fa30038 	lw	v1,56(sp)
bfc09bb4:	00431804 	sllv	v1,v1,v0
bfc09bb8:	8fa2003c 	lw	v0,60(sp)
bfc09bbc:	00621821 	addu	v1,v1,v0
bfc09bc0:	3c021fff 	lui	v0,0x1fff
bfc09bc4:	3442ffff 	ori	v0,v0,0xffff
bfc09bc8:	00621824 	and	v1,v1,v0
bfc09bcc:	8fa2001c 	lw	v0,28(sp)
bfc09bd0:	0043102b 	sltu	v0,v0,v1
bfc09bd4:	1040000a 	beqz	v0,bfc09c00 <Dram_test_onflash+0x1f0>
bfc09bd8:	00000000 	nop
            {
                burst = (END_ADDR - ((addr) & 0x1FFFFFFF)) >> access_type;
bfc09bdc:	8fa3003c 	lw	v1,60(sp)
bfc09be0:	3c021fff 	lui	v0,0x1fff
bfc09be4:	3442ffff 	ori	v0,v0,0xffff
bfc09be8:	00621024 	and	v0,v1,v0
bfc09bec:	8fa3001c 	lw	v1,28(sp)
bfc09bf0:	00621823 	subu	v1,v1,v0
bfc09bf4:	8fa20048 	lw	v0,72(sp)
bfc09bf8:	00431006 	srlv	v0,v1,v0
bfc09bfc:	afa20038 	sw	v0,56(sp)
		  _memctl_debug_printf("11.Exceed Limit,burst=%d \n", burst);
            }

#if 1
            if (samples % 100 == 0)
bfc09c00:	8fa30030 	lw	v1,48(sp)
bfc09c04:	3c0251eb 	lui	v0,0x51eb
bfc09c08:	3442851f 	ori	v0,v0,0x851f
bfc09c0c:	00620019 	multu	v1,v0
bfc09c10:	00001010 	mfhi	v0
bfc09c14:	00021142 	srl	v0,v0,0x5
bfc09c18:	00021080 	sll	v0,v0,0x2
bfc09c1c:	00022080 	sll	a0,v0,0x2
bfc09c20:	00441021 	addu	v0,v0,a0
bfc09c24:	00022080 	sll	a0,v0,0x2
bfc09c28:	00441021 	addu	v0,v0,a0
bfc09c2c:	00621023 	subu	v0,v1,v0
bfc09c30:	14400054 	bnez	v0,bfc09d84 <Dram_test_onflash+0x374>
bfc09c34:	00000000 	nop
                _memctl_debug_printf("\nSamples: %d", samples);
		  
		
		 
		   #if 1 //JSW @20091106 :For DRAM Test + Power Management 
		 	if(enable_delay)
bfc09c38:	8fa20028 	lw	v0,40(sp)
bfc09c3c:	1040001e 	beqz	v0,bfc09cb8 <Dram_test_onflash+0x2a8>
bfc09c40:	00000000 	nop
		 	{
			     delay_time=rand2() % ((unsigned int) 1000*1000);
bfc09c44:	0ff02628 	jal	bfc098a0 <rand2>
bfc09c48:	00000000 	nop
bfc09c4c:	00402821 	move	a1,v0
bfc09c50:	3c02431b 	lui	v0,0x431b
bfc09c54:	3442de83 	ori	v0,v0,0xde83
bfc09c58:	00a20019 	multu	a1,v0
bfc09c5c:	00001010 	mfhi	v0
bfc09c60:	00022482 	srl	a0,v0,0x12
bfc09c64:	00801021 	move	v0,a0
bfc09c68:	000210c0 	sll	v0,v0,0x3
bfc09c6c:	00021940 	sll	v1,v0,0x5
bfc09c70:	00621823 	subu	v1,v1,v0
bfc09c74:	00031180 	sll	v0,v1,0x6
bfc09c78:	00431023 	subu	v0,v0,v1
bfc09c7c:	00441021 	addu	v0,v0,a0
bfc09c80:	00021180 	sll	v0,v0,0x6
bfc09c84:	00a21023 	subu	v0,a1,v0
bfc09c88:	afa20024 	sw	v0,36(sp)
			     _memctl_debug_printf(" Delay_time=%d\n",delay_time);
			     for(k=0;k<=delay_time;k++); //delay_loop	
bfc09c8c:	afa00054 	sw	zero,84(sp)
bfc09c90:	0bf02729 	j	bfc09ca4 <Dram_test_onflash+0x294>
bfc09c94:	00000000 	nop
bfc09c98:	8fa20054 	lw	v0,84(sp)
bfc09c9c:	24420001 	addiu	v0,v0,1
bfc09ca0:	afa20054 	sw	v0,84(sp)
bfc09ca4:	8fa30054 	lw	v1,84(sp)
bfc09ca8:	8fa20024 	lw	v0,36(sp)
bfc09cac:	0043102b 	sltu	v0,v0,v1
bfc09cb0:	1040fff9 	beqz	v0,bfc09c98 <Dram_test_onflash+0x288>
bfc09cb4:	00000000 	nop

			    // CmdCPUSleepIMEM();
		 	}

			#if 1
		 	if(PM_MODE)
bfc09cb8:	8fa20020 	lw	v0,32(sp)
bfc09cbc:	10400031 	beqz	v0,bfc09d84 <Dram_test_onflash+0x374>
bfc09cc0:	00000000 	nop
			{
				
			  //set bit[31:30]=0 for default "Normal Mode" and prevent unstable state transition
			  //  REG32(MPMR_REG)= 0x3FFFFFFF ;
			  REG32(MPMR_REG)= 0x040FFFFF ;
bfc09cc4:	3c02b800 	lui	v0,0xb800
bfc09cc8:	34421040 	ori	v0,v0,0x1040
bfc09ccc:	3c03040f 	lui	v1,0x40f
bfc09cd0:	3463ffff 	ori	v1,v1,0xffff
bfc09cd4:	ac430000 	sw	v1,0(v0)

			    switch(PM_MODE)
bfc09cd8:	8fa20020 	lw	v0,32(sp)
bfc09cdc:	24030001 	li	v1,1
bfc09ce0:	1043000c 	beq	v0,v1,bfc09d14 <Dram_test_onflash+0x304>
bfc09ce4:	00000000 	nop
bfc09ce8:	2c430001 	sltiu	v1,v0,1
bfc09cec:	14600024 	bnez	v1,bfc09d80 <Dram_test_onflash+0x370>
bfc09cf0:	00000000 	nop
bfc09cf4:	24030002 	li	v1,2
bfc09cf8:	10430010 	beq	v0,v1,bfc09d3c <Dram_test_onflash+0x32c>
bfc09cfc:	00000000 	nop
bfc09d00:	24030003 	li	v1,3
bfc09d04:	10430017 	beq	v0,v1,bfc09d64 <Dram_test_onflash+0x354>
bfc09d08:	00000000 	nop
bfc09d0c:	0bf02761 	j	bfc09d84 <Dram_test_onflash+0x374>
bfc09d10:	00000000 	nop
				     //return 0;
			            break;

			        case 1:
			            _memctl_debug_printf("\nDRAM :Auto Power Down mode\n");
			            REG32(MPMR_REG)= READ_MEM32(MPMR_REG)|(0x1 <<30) ;
bfc09d14:	3c02b800 	lui	v0,0xb800
bfc09d18:	34421040 	ori	v0,v0,0x1040
bfc09d1c:	3c03b800 	lui	v1,0xb800
bfc09d20:	34631040 	ori	v1,v1,0x1040
bfc09d24:	8c640000 	lw	a0,0(v1)
bfc09d28:	3c034000 	lui	v1,0x4000
bfc09d2c:	00831825 	or	v1,a0,v1
bfc09d30:	ac430000 	sw	v1,0(v0)

				    
			            break;
bfc09d34:	0bf02761 	j	bfc09d84 <Dram_test_onflash+0x374>
bfc09d38:	00000000 	nop

			        case 2:
			            _memctl_debug_printf("\nDRAM : Set to Self Refresh mode\n");				    
			            REG32(MPMR_REG)|= (0x2 <<30) ;	
bfc09d3c:	3c02b800 	lui	v0,0xb800
bfc09d40:	34421040 	ori	v0,v0,0x1040
bfc09d44:	3c03b800 	lui	v1,0xb800
bfc09d48:	34631040 	ori	v1,v1,0x1040
bfc09d4c:	8c640000 	lw	a0,0(v1)
bfc09d50:	3c038000 	lui	v1,0x8000
bfc09d54:	00831825 	or	v1,a0,v1
bfc09d58:	ac430000 	sw	v1,0(v0)
				     
				    
			            break;
bfc09d5c:	0bf02761 	j	bfc09d84 <Dram_test_onflash+0x374>
bfc09d60:	00000000 	nop

			        case 3:
			            _memctl_debug_printf("\nReserved!\n");			            
			            REG32(MPMR_REG)= 0x3FFFFFFF ;
bfc09d64:	3c02b800 	lui	v0,0xb800
bfc09d68:	34421040 	ori	v0,v0,0x1040
bfc09d6c:	3c033fff 	lui	v1,0x3fff
bfc09d70:	3463ffff 	ori	v1,v1,0xffff
bfc09d74:	ac430000 	sw	v1,0(v0)
bfc09d78:	0bf02761 	j	bfc09d84 <Dram_test_onflash+0x374>
bfc09d7c:	00000000 	nop
			    switch(PM_MODE)
			    {
			        case 0:
			            _memctl_debug_printf("\nDRAM : Normal mode\n");
				     //return 0;
			            break;
bfc09d80:	00000000 	nop
            }//end of switch(PM_MODE)
#endif
     

        /* Prepare Write Data */
            for (i = 0; i < burst ; i++)
bfc09d84:	afa0005c 	sw	zero,92(sp)
bfc09d88:	0bf0279c 	j	bfc09e70 <Dram_test_onflash+0x460>
bfc09d8c:	00000000 	nop
            {            
            		
            		if(Data_pattern==0)
bfc09d90:	8fa20044 	lw	v0,68(sp)
bfc09d94:	14400006 	bnez	v0,bfc09db0 <Dram_test_onflash+0x3a0>
bfc09d98:	00000000 	nop
            		{
                  		 wdata = (unsigned int)(rand2());/* Prepare random data */
bfc09d9c:	0ff02628 	jal	bfc098a0 <rand2>
bfc09da0:	00000000 	nop
bfc09da4:	afa20034 	sw	v0,52(sp)
bfc09da8:	0bf02784 	j	bfc09e10 <Dram_test_onflash+0x400>
bfc09dac:	00000000 	nop
            		}
			else if (Data_pattern==1)
bfc09db0:	8fa30044 	lw	v1,68(sp)
bfc09db4:	24020001 	li	v0,1
bfc09db8:	1462000e 	bne	v1,v0,bfc09df4 <Dram_test_onflash+0x3e4>
bfc09dbc:	00000000 	nop
				 wdata =( (i<<0)| (i<<8) |(i<<16) |(i<<23));  /* Prepare Sequential Data */   
bfc09dc0:	8fa2005c 	lw	v0,92(sp)
bfc09dc4:	00021a00 	sll	v1,v0,0x8
bfc09dc8:	8fa2005c 	lw	v0,92(sp)
bfc09dcc:	00621825 	or	v1,v1,v0
bfc09dd0:	8fa2005c 	lw	v0,92(sp)
bfc09dd4:	00021400 	sll	v0,v0,0x10
bfc09dd8:	00621825 	or	v1,v1,v0
bfc09ddc:	8fa2005c 	lw	v0,92(sp)
bfc09de0:	000215c0 	sll	v0,v0,0x17
bfc09de4:	00621025 	or	v0,v1,v0
bfc09de8:	afa20034 	sw	v0,52(sp)
bfc09dec:	0bf02784 	j	bfc09e10 <Dram_test_onflash+0x400>
bfc09df0:	00000000 	nop
			else if (Data_pattern==2)
bfc09df4:	8fa30044 	lw	v1,68(sp)
bfc09df8:	24020002 	li	v0,2
bfc09dfc:	1462013f 	bne	v1,v0,bfc0a2fc <Dram_test_onflash+0x8ec>
bfc09e00:	00000000 	nop
				wdata=0x5a5aa5a5;//fixed data
bfc09e04:	3c025a5a 	lui	v0,0x5a5a
bfc09e08:	3442a5a5 	ori	v0,v0,0xa5a5
bfc09e0c:	afa20034 	sw	v0,52(sp)
				 return;
			}
				
			

                if (access_type == 0)               //8 bit
bfc09e10:	8fa20048 	lw	v0,72(sp)
bfc09e14:	14400006 	bnez	v0,bfc09e30 <Dram_test_onflash+0x420>
bfc09e18:	00000000 	nop
                    wdata = wdata & 0xFF;
bfc09e1c:	8fa20034 	lw	v0,52(sp)
bfc09e20:	304200ff 	andi	v0,v0,0xff
bfc09e24:	afa20034 	sw	v0,52(sp)
bfc09e28:	0bf02793 	j	bfc09e4c <Dram_test_onflash+0x43c>
bfc09e2c:	00000000 	nop
                else if (access_type == 1)          //16bit
bfc09e30:	8fa30048 	lw	v1,72(sp)
bfc09e34:	24020001 	li	v0,1
bfc09e38:	14620004 	bne	v1,v0,bfc09e4c <Dram_test_onflash+0x43c>
bfc09e3c:	00000000 	nop
                    wdata = wdata & 0xFFFF;
bfc09e40:	8fa20034 	lw	v0,52(sp)
bfc09e44:	3042ffff 	andi	v0,v0,0xffff
bfc09e48:	afa20034 	sw	v0,52(sp)

                wdata_array[i] = wdata;
bfc09e4c:	8fa2005c 	lw	v0,92(sp)
bfc09e50:	00021080 	sll	v0,v0,0x2
bfc09e54:	27a30010 	addiu	v1,sp,16
bfc09e58:	00621021 	addu	v0,v1,v0
bfc09e5c:	8fa30034 	lw	v1,52(sp)
bfc09e60:	ac430050 	sw	v1,80(v0)
            }//end of switch(PM_MODE)
#endif
     

        /* Prepare Write Data */
            for (i = 0; i < burst ; i++)
bfc09e64:	8fa2005c 	lw	v0,92(sp)
bfc09e68:	24420001 	addiu	v0,v0,1
bfc09e6c:	afa2005c 	sw	v0,92(sp)
bfc09e70:	8fa3005c 	lw	v1,92(sp)
bfc09e74:	8fa20038 	lw	v0,56(sp)
bfc09e78:	0062102b 	sltu	v0,v1,v0
bfc09e7c:	1440ffc4 	bnez	v0,bfc09d90 <Dram_test_onflash+0x380>
bfc09e80:	00000000 	nop
                wdata_array[i] = wdata;
     
            }            

	    
            for (i = 0, j = addr; i < burst ; i++)
bfc09e84:	afa0005c 	sw	zero,92(sp)
bfc09e88:	8fa2003c 	lw	v0,60(sp)
bfc09e8c:	afa20058 	sw	v0,88(sp)
bfc09e90:	0bf02819 	j	bfc0a064 <Dram_test_onflash+0x654>
bfc09e94:	00000000 	nop
            {
                if (access_type == 0)
bfc09e98:	8fa20048 	lw	v0,72(sp)
bfc09e9c:	1440000b 	bnez	v0,bfc09ecc <Dram_test_onflash+0x4bc>
bfc09ea0:	00000000 	nop
                    *(volatile unsigned char *) (j) = wdata_array[i];//8bit
bfc09ea4:	8fa30058 	lw	v1,88(sp)
bfc09ea8:	8fa2005c 	lw	v0,92(sp)
bfc09eac:	00021080 	sll	v0,v0,0x2
bfc09eb0:	27a40010 	addiu	a0,sp,16
bfc09eb4:	00821021 	addu	v0,a0,v0
bfc09eb8:	8c420050 	lw	v0,80(v0)
bfc09ebc:	304200ff 	andi	v0,v0,0xff
bfc09ec0:	a0620000 	sb	v0,0(v1)
bfc09ec4:	0bf027c8 	j	bfc09f20 <Dram_test_onflash+0x510>
bfc09ec8:	00000000 	nop
                else if (access_type == 1)
bfc09ecc:	8fa30048 	lw	v1,72(sp)
bfc09ed0:	24020001 	li	v0,1
bfc09ed4:	1462000b 	bne	v1,v0,bfc09f04 <Dram_test_onflash+0x4f4>
bfc09ed8:	00000000 	nop
                    *(volatile unsigned short *) (j) = wdata_array[i];//16bit
bfc09edc:	8fa30058 	lw	v1,88(sp)
bfc09ee0:	8fa2005c 	lw	v0,92(sp)
bfc09ee4:	00021080 	sll	v0,v0,0x2
bfc09ee8:	27a40010 	addiu	a0,sp,16
bfc09eec:	00821021 	addu	v0,a0,v0
bfc09ef0:	8c420050 	lw	v0,80(v0)
bfc09ef4:	3042ffff 	andi	v0,v0,0xffff
bfc09ef8:	a4620000 	sh	v0,0(v1)
bfc09efc:	0bf027c8 	j	bfc09f20 <Dram_test_onflash+0x510>
bfc09f00:	00000000 	nop
                else
                    *(volatile unsigned int *) (j) = wdata_array[i];//32bit
bfc09f04:	8fa30058 	lw	v1,88(sp)
bfc09f08:	8fa2005c 	lw	v0,92(sp)
bfc09f0c:	00021080 	sll	v0,v0,0x2
bfc09f10:	27a40010 	addiu	a0,sp,16
bfc09f14:	00821021 	addu	v0,a0,v0
bfc09f18:	8c420050 	lw	v0,80(v0)
bfc09f1c:	ac620000 	sw	v0,0(v1)

                j = j + (1 << access_type);
bfc09f20:	8fa20048 	lw	v0,72(sp)
bfc09f24:	24030001 	li	v1,1
bfc09f28:	00431004 	sllv	v0,v1,v0
bfc09f2c:	8fa30058 	lw	v1,88(sp)
bfc09f30:	00621021 	addu	v0,v1,v0
bfc09f34:	afa20058 	sw	v0,88(sp)
        //keep reading
                if (keep_W_R_mode==1)
bfc09f38:	8fa30014 	lw	v1,20(sp)
bfc09f3c:	24020001 	li	v0,1
bfc09f40:	14620045 	bne	v1,v0,bfc0a058 <Dram_test_onflash+0x648>
bfc09f44:	00000000 	nop
                {

		
				
                	 for (i = 0; i < burst ; i++)	
bfc09f48:	afa0005c 	sw	zero,92(sp)
bfc09f4c:	0bf02804 	j	bfc0a010 <Dram_test_onflash+0x600>
bfc09f50:	00000000 	nop
                	 {
                	 	if(Data_pattern==0)
bfc09f54:	8fa20044 	lw	v0,68(sp)
bfc09f58:	1440000b 	bnez	v0,bfc09f88 <Dram_test_onflash+0x578>
bfc09f5c:	00000000 	nop
            			{
            				WRITE_MEM32(0xa0700000+(i*4), rand2());                  			
bfc09f60:	8fa3005c 	lw	v1,92(sp)
bfc09f64:	3c02281c 	lui	v0,0x281c
bfc09f68:	00621021 	addu	v0,v1,v0
bfc09f6c:	00021080 	sll	v0,v0,0x2
bfc09f70:	00408021 	move	s0,v0
bfc09f74:	0ff02628 	jal	bfc098a0 <rand2>
bfc09f78:	00000000 	nop
bfc09f7c:	ae020000 	sw	v0,0(s0)
bfc09f80:	0bf02801 	j	bfc0a004 <Dram_test_onflash+0x5f4>
bfc09f84:	00000000 	nop
            			}
				else if (Data_pattern==1)
bfc09f88:	8fa30044 	lw	v1,68(sp)
bfc09f8c:	24020001 	li	v0,1
bfc09f90:	14620012 	bne	v1,v0,bfc09fdc <Dram_test_onflash+0x5cc>
bfc09f94:	00000000 	nop
					 /* Prepare Sequential Data */   
					WRITE_MEM32(0xa0700000+(i*4), ( (i<<0)| (i<<8) |(i<<16) |(i<<23)));					  
bfc09f98:	8fa3005c 	lw	v1,92(sp)
bfc09f9c:	3c02281c 	lui	v0,0x281c
bfc09fa0:	00621021 	addu	v0,v1,v0
bfc09fa4:	00021080 	sll	v0,v0,0x2
bfc09fa8:	8fa3005c 	lw	v1,92(sp)
bfc09fac:	00032200 	sll	a0,v1,0x8
bfc09fb0:	8fa3005c 	lw	v1,92(sp)
bfc09fb4:	00832025 	or	a0,a0,v1
bfc09fb8:	8fa3005c 	lw	v1,92(sp)
bfc09fbc:	00031c00 	sll	v1,v1,0x10
bfc09fc0:	00832025 	or	a0,a0,v1
bfc09fc4:	8fa3005c 	lw	v1,92(sp)
bfc09fc8:	00031dc0 	sll	v1,v1,0x17
bfc09fcc:	00831825 	or	v1,a0,v1
bfc09fd0:	ac430000 	sw	v1,0(v0)
bfc09fd4:	0bf02801 	j	bfc0a004 <Dram_test_onflash+0x5f4>
bfc09fd8:	00000000 	nop
				else if (Data_pattern==2)
bfc09fdc:	8fa30044 	lw	v1,68(sp)
bfc09fe0:	24020002 	li	v0,2
bfc09fe4:	14620007 	bne	v1,v0,bfc0a004 <Dram_test_onflash+0x5f4>
bfc09fe8:	00000000 	nop
					WRITE_MEM32(0xa0700000+(i*4), wdata); 			
bfc09fec:	8fa3005c 	lw	v1,92(sp)
bfc09ff0:	3c02281c 	lui	v0,0x281c
bfc09ff4:	00621021 	addu	v0,v1,v0
bfc09ff8:	00021080 	sll	v0,v0,0x2
bfc09ffc:	8fa30034 	lw	v1,52(sp)
bfc0a000:	ac430000 	sw	v1,0(v0)
                if (keep_W_R_mode==1)
                {

		
				
                	 for (i = 0; i < burst ; i++)	
bfc0a004:	8fa2005c 	lw	v0,92(sp)
bfc0a008:	24420001 	addiu	v0,v0,1
bfc0a00c:	afa2005c 	sw	v0,92(sp)
bfc0a010:	8fa3005c 	lw	v1,92(sp)
bfc0a014:	8fa20038 	lw	v0,56(sp)
bfc0a018:	0062102b 	sltu	v0,v1,v0
bfc0a01c:	1440ffcd 	bnez	v0,bfc09f54 <Dram_test_onflash+0x544>
bfc0a020:	00000000 	nop
                		//WRITE_MEM32(0xa0700000+(i*4), 0x5aa5a55a);
					 
                	_memctl_debug_printf("\nkeep reading\n");

			keep_reading:
			 for (i = 0; i < burst ; i++)	
bfc0a024:	afa0005c 	sw	zero,92(sp)
bfc0a028:	0bf0280f 	j	bfc0a03c <Dram_test_onflash+0x62c>
bfc0a02c:	00000000 	nop
bfc0a030:	8fa2005c 	lw	v0,92(sp)
bfc0a034:	24420001 	addiu	v0,v0,1
bfc0a038:	afa2005c 	sw	v0,92(sp)
bfc0a03c:	8fa3005c 	lw	v1,92(sp)
bfc0a040:	8fa20038 	lw	v0,56(sp)
bfc0a044:	0062102b 	sltu	v0,v1,v0
bfc0a048:	1440fff9 	bnez	v0,bfc0a030 <Dram_test_onflash+0x620>
bfc0a04c:	00000000 	nop
			 {
			 		_memctl_debug_printf("\naddr(0x%x),value=0x%x\n",0xa0700000+(i*4),REG32(0xa0700000+(i*4)));
					
			 }

					 goto keep_reading;
bfc0a050:	0bf02809 	j	bfc0a024 <Dram_test_onflash+0x614>
bfc0a054:	00000000 	nop
                wdata_array[i] = wdata;
     
            }            

	    
            for (i = 0, j = addr; i < burst ; i++)
bfc0a058:	8fa2005c 	lw	v0,92(sp)
bfc0a05c:	24420001 	addiu	v0,v0,1
bfc0a060:	afa2005c 	sw	v0,92(sp)
bfc0a064:	8fa3005c 	lw	v1,92(sp)
bfc0a068:	8fa20038 	lw	v0,56(sp)
bfc0a06c:	0062102b 	sltu	v0,v1,v0
bfc0a070:	1440ff89 	bnez	v0,bfc09e98 <Dram_test_onflash+0x488>
bfc0a074:	00000000 	nop
					 goto keep_reading;
                }
            }

	  //keep writing
            if (keep_W_R_mode==2)
bfc0a078:	8fa30014 	lw	v1,20(sp)
bfc0a07c:	24020002 	li	v0,2
bfc0a080:	14620063 	bne	v1,v0,bfc0a210 <Dram_test_onflash+0x800>
bfc0a084:	00000000 	nop
            {
            	  //_memctl_debug_printf("\nkeep writing,writing addr(0xa0800000)=0xa5a55a5a\n");
            	  _memctl_debug_printf("\nkeep writing...\n");	
	
				
		 for (i = 0; i < burst ; i++)
bfc0a088:	afa0005c 	sw	zero,92(sp)
bfc0a08c:	0bf02848 	j	bfc0a120 <Dram_test_onflash+0x710>
bfc0a090:	00000000 	nop
		 {
			  //wdata = rand2();
			  //wdata=0xffffffff;
			  wdata =( (i<<0)| (i<<8) |(i<<16) |(i<<23));  /* Prepare Sequential Data */  
bfc0a094:	8fa2005c 	lw	v0,92(sp)
bfc0a098:	00021a00 	sll	v1,v0,0x8
bfc0a09c:	8fa2005c 	lw	v0,92(sp)
bfc0a0a0:	00621825 	or	v1,v1,v0
bfc0a0a4:	8fa2005c 	lw	v0,92(sp)
bfc0a0a8:	00021400 	sll	v0,v0,0x10
bfc0a0ac:	00621825 	or	v1,v1,v0
bfc0a0b0:	8fa2005c 	lw	v0,92(sp)
bfc0a0b4:	000215c0 	sll	v0,v0,0x17
bfc0a0b8:	00621025 	or	v0,v1,v0
bfc0a0bc:	afa20034 	sw	v0,52(sp)

			  if (access_type == 0)               //8 bit
bfc0a0c0:	8fa20048 	lw	v0,72(sp)
bfc0a0c4:	14400006 	bnez	v0,bfc0a0e0 <Dram_test_onflash+0x6d0>
bfc0a0c8:	00000000 	nop
	                    wdata = wdata & 0xFF;
bfc0a0cc:	8fa20034 	lw	v0,52(sp)
bfc0a0d0:	304200ff 	andi	v0,v0,0xff
bfc0a0d4:	afa20034 	sw	v0,52(sp)
bfc0a0d8:	0bf0283f 	j	bfc0a0fc <Dram_test_onflash+0x6ec>
bfc0a0dc:	00000000 	nop
	                else if (access_type == 1)          //16bit
bfc0a0e0:	8fa30048 	lw	v1,72(sp)
bfc0a0e4:	24020001 	li	v0,1
bfc0a0e8:	14620004 	bne	v1,v0,bfc0a0fc <Dram_test_onflash+0x6ec>
bfc0a0ec:	00000000 	nop
	                    wdata = wdata & 0xFFFF;
bfc0a0f0:	8fa20034 	lw	v0,52(sp)
bfc0a0f4:	3042ffff 	andi	v0,v0,0xffff
bfc0a0f8:	afa20034 	sw	v0,52(sp)

               	 wdata_array[i] = wdata;				 
bfc0a0fc:	8fa2005c 	lw	v0,92(sp)
bfc0a100:	00021080 	sll	v0,v0,0x2
bfc0a104:	27a30010 	addiu	v1,sp,16
bfc0a108:	00621021 	addu	v0,v1,v0
bfc0a10c:	8fa30034 	lw	v1,52(sp)
bfc0a110:	ac430050 	sw	v1,80(v0)
            {
            	  //_memctl_debug_printf("\nkeep writing,writing addr(0xa0800000)=0xa5a55a5a\n");
            	  _memctl_debug_printf("\nkeep writing...\n");	
	
				
		 for (i = 0; i < burst ; i++)
bfc0a114:	8fa2005c 	lw	v0,92(sp)
bfc0a118:	24420001 	addiu	v0,v0,1
bfc0a11c:	afa2005c 	sw	v0,92(sp)
bfc0a120:	8fa3005c 	lw	v1,92(sp)
bfc0a124:	8fa20038 	lw	v0,56(sp)
bfc0a128:	0062102b 	sltu	v0,v1,v0
bfc0a12c:	1440ffd9 	bnez	v0,bfc0a094 <Dram_test_onflash+0x684>
bfc0a130:	00000000 	nop
               	 wdata_array[i] = wdata;				 
		 	  	
		 } 

		  keep_writing:	 
		  for (i = 0, j = addr; i < burst ; i++)
bfc0a134:	afa0005c 	sw	zero,92(sp)
bfc0a138:	8fa2003c 	lw	v0,60(sp)
bfc0a13c:	afa20058 	sw	v0,88(sp)
bfc0a140:	0bf0287d 	j	bfc0a1f4 <Dram_test_onflash+0x7e4>
bfc0a144:	00000000 	nop
		 {
		  if (access_type == 0)
bfc0a148:	8fa20048 	lw	v0,72(sp)
bfc0a14c:	1440000b 	bnez	v0,bfc0a17c <Dram_test_onflash+0x76c>
bfc0a150:	00000000 	nop
                    *(volatile unsigned char *)  (j) = wdata_array[i];//8bit
bfc0a154:	8fa30058 	lw	v1,88(sp)
bfc0a158:	8fa2005c 	lw	v0,92(sp)
bfc0a15c:	00021080 	sll	v0,v0,0x2
bfc0a160:	27a40010 	addiu	a0,sp,16
bfc0a164:	00821021 	addu	v0,a0,v0
bfc0a168:	8c420050 	lw	v0,80(v0)
bfc0a16c:	304200ff 	andi	v0,v0,0xff
bfc0a170:	a0620000 	sb	v0,0(v1)
bfc0a174:	0bf02874 	j	bfc0a1d0 <Dram_test_onflash+0x7c0>
bfc0a178:	00000000 	nop
                else if (access_type == 1)
bfc0a17c:	8fa30048 	lw	v1,72(sp)
bfc0a180:	24020001 	li	v0,1
bfc0a184:	1462000b 	bne	v1,v0,bfc0a1b4 <Dram_test_onflash+0x7a4>
bfc0a188:	00000000 	nop
                    *(volatile unsigned short *)  (j)= wdata_array[i];//16bit
bfc0a18c:	8fa30058 	lw	v1,88(sp)
bfc0a190:	8fa2005c 	lw	v0,92(sp)
bfc0a194:	00021080 	sll	v0,v0,0x2
bfc0a198:	27a40010 	addiu	a0,sp,16
bfc0a19c:	00821021 	addu	v0,a0,v0
bfc0a1a0:	8c420050 	lw	v0,80(v0)
bfc0a1a4:	3042ffff 	andi	v0,v0,0xffff
bfc0a1a8:	a4620000 	sh	v0,0(v1)
bfc0a1ac:	0bf02874 	j	bfc0a1d0 <Dram_test_onflash+0x7c0>
bfc0a1b0:	00000000 	nop
                else
                    *(volatile unsigned int *)  (j) = wdata_array[i];//32bit
bfc0a1b4:	8fa30058 	lw	v1,88(sp)
bfc0a1b8:	8fa2005c 	lw	v0,92(sp)
bfc0a1bc:	00021080 	sll	v0,v0,0x2
bfc0a1c0:	27a40010 	addiu	a0,sp,16
bfc0a1c4:	00821021 	addu	v0,a0,v0
bfc0a1c8:	8c420050 	lw	v0,80(v0)
bfc0a1cc:	ac620000 	sw	v0,0(v1)

		    j = j + (1 << access_type);
bfc0a1d0:	8fa20048 	lw	v0,72(sp)
bfc0a1d4:	24030001 	li	v1,1
bfc0a1d8:	00431004 	sllv	v0,v1,v0
bfc0a1dc:	8fa30058 	lw	v1,88(sp)
bfc0a1e0:	00621021 	addu	v0,v1,v0
bfc0a1e4:	afa20058 	sw	v0,88(sp)
               	 wdata_array[i] = wdata;				 
		 	  	
		 } 

		  keep_writing:	 
		  for (i = 0, j = addr; i < burst ; i++)
bfc0a1e8:	8fa2005c 	lw	v0,92(sp)
bfc0a1ec:	24420001 	addiu	v0,v0,1
bfc0a1f0:	afa2005c 	sw	v0,92(sp)
bfc0a1f4:	8fa3005c 	lw	v1,92(sp)
bfc0a1f8:	8fa20038 	lw	v0,56(sp)
bfc0a1fc:	0062102b 	sltu	v0,v1,v0
bfc0a200:	1440ffd1 	bnez	v0,bfc0a148 <Dram_test_onflash+0x738>
bfc0a204:	00000000 	nop

		    j = j + (1 << access_type);
		 } 
              
       
                goto keep_writing;
bfc0a208:	0bf0284d 	j	bfc0a134 <Dram_test_onflash+0x724>
bfc0a20c:	00000000 	nop
            }

        /* Read Verify */
            for (i = 0, j = addr; i < burst ; i++)
bfc0a210:	afa0005c 	sw	zero,92(sp)
bfc0a214:	8fa2003c 	lw	v0,60(sp)
bfc0a218:	afa20058 	sw	v0,88(sp)
bfc0a21c:	0bf028b0 	j	bfc0a2c0 <Dram_test_onflash+0x8b0>
bfc0a220:	00000000 	nop
            {
                unsigned rdata;

                if (access_type == 0)
bfc0a224:	8fa20048 	lw	v0,72(sp)
bfc0a228:	14400007 	bnez	v0,bfc0a248 <Dram_test_onflash+0x838>
bfc0a22c:	00000000 	nop
                {
                    rdata = *(volatile unsigned char *) (j);
bfc0a230:	8fa20058 	lw	v0,88(sp)
bfc0a234:	90420000 	lbu	v0,0(v0)
bfc0a238:	304200ff 	andi	v0,v0,0xff
bfc0a23c:	afa20010 	sw	v0,16(sp)
bfc0a240:	0bf0289f 	j	bfc0a27c <Dram_test_onflash+0x86c>
bfc0a244:	00000000 	nop
                }
                else if (access_type == 1)
bfc0a248:	8fa30048 	lw	v1,72(sp)
bfc0a24c:	24020001 	li	v0,1
bfc0a250:	14620007 	bne	v1,v0,bfc0a270 <Dram_test_onflash+0x860>
bfc0a254:	00000000 	nop
                {
                    rdata = *(volatile unsigned short *) (j);
bfc0a258:	8fa20058 	lw	v0,88(sp)
bfc0a25c:	94420000 	lhu	v0,0(v0)
bfc0a260:	3042ffff 	andi	v0,v0,0xffff
bfc0a264:	afa20010 	sw	v0,16(sp)
bfc0a268:	0bf0289f 	j	bfc0a27c <Dram_test_onflash+0x86c>
bfc0a26c:	00000000 	nop
                }
                else
                {
                    rdata = *(volatile unsigned int *) (j);
bfc0a270:	8fa20058 	lw	v0,88(sp)
bfc0a274:	8c420000 	lw	v0,0(v0)
bfc0a278:	afa20010 	sw	v0,16(sp)
        //_memctl_debug_printf("\n==========In Read Verify========= \n");
        // _memctl_debug_printf("\nrdata: %d\n", rdata);
        //_memctl_debug_printf("\nwdata_array[i]: %d\n",wdata_array[i]);
        // _memctl_debug_printf("\n==========End Read Verify========= \n");

                if (rdata != wdata_array[i])
bfc0a27c:	8fa2005c 	lw	v0,92(sp)
bfc0a280:	00021080 	sll	v0,v0,0x2
bfc0a284:	27a30010 	addiu	v1,sp,16
bfc0a288:	00621021 	addu	v0,v1,v0
bfc0a28c:	8c430050 	lw	v1,80(v0)
bfc0a290:	8fa20010 	lw	v0,16(sp)
bfc0a294:	1462001c 	bne	v1,v0,bfc0a308 <Dram_test_onflash+0x8f8>
bfc0a298:	00000000 	nop
        //goto HaltLoop;
                    return 0;

                }

                j = j + (1 << access_type);
bfc0a29c:	8fa20048 	lw	v0,72(sp)
bfc0a2a0:	24030001 	li	v1,1
bfc0a2a4:	00431004 	sllv	v0,v1,v0
bfc0a2a8:	8fa30058 	lw	v1,88(sp)
bfc0a2ac:	00621021 	addu	v0,v1,v0
bfc0a2b0:	afa20058 	sw	v0,88(sp)
       
                goto keep_writing;
            }

        /* Read Verify */
            for (i = 0, j = addr; i < burst ; i++)
bfc0a2b4:	8fa2005c 	lw	v0,92(sp)
bfc0a2b8:	24420001 	addiu	v0,v0,1
bfc0a2bc:	afa2005c 	sw	v0,92(sp)
bfc0a2c0:	8fa3005c 	lw	v1,92(sp)
bfc0a2c4:	8fa20038 	lw	v0,56(sp)
bfc0a2c8:	0062102b 	sltu	v0,v1,v0
bfc0a2cc:	1440ffd5 	bnez	v0,bfc0a224 <Dram_test_onflash+0x814>
bfc0a2d0:	00000000 	nop
	
#endif

     

        for (samples = 0; samples < MAX_SAMPLE; samples++)
bfc0a2d4:	8fa20030 	lw	v0,48(sp)
bfc0a2d8:	24420001 	addiu	v0,v0,1
bfc0a2dc:	afa20030 	sw	v0,48(sp)
bfc0a2e0:	8fa30030 	lw	v1,48(sp)
bfc0a2e4:	34028000 	li	v0,0x8000
bfc0a2e8:	0062102b 	sltu	v0,v1,v0
bfc0a2ec:	1440fde5 	bnez	v0,bfc09a84 <Dram_test_onflash+0x74>
bfc0a2f0:	00000000 	nop

            }                                       //end of reading

        }

    }                                               //end while(1)
bfc0a2f4:	0bf0269b 	j	bfc09a6c <Dram_test_onflash+0x5c>
bfc0a2f8:	00000000 	nop
			else if (Data_pattern==2)
				wdata=0x5a5aa5a5;//fixed data
			else
			{
				 _memctl_debug_printf("\nError Data_pattern Input,return \n");
				 return;
bfc0a2fc:	00000000 	nop
bfc0a300:	0bf028c3 	j	bfc0a30c <Dram_test_onflash+0x8fc>
bfc0a304:	00000000 	nop

                    _memctl_debug_printf("\n====> Verify Error! Addr: 0x%x = 0x%x, expected to be 0x%x\n", j, rdata, wdata_array[i]);

        //HaltLoop:
        //goto HaltLoop;
                    return 0;
bfc0a308:	00000000 	nop
            }                                       //end of reading

        }

    }                                               //end while(1)
}
bfc0a30c:	8fbf0464 	lw	ra,1124(sp)
bfc0a310:	8fb00460 	lw	s0,1120(sp)
bfc0a314:	27bd0468 	addiu	sp,sp,1128
bfc0a318:	03e00008 	jr	ra
bfc0a31c:	00000000 	nop

bfc0a320 <RTK_ZQ_K>:

#endif


unsigned int  RTK_ZQ_K()
{
bfc0a320:	27bdffe0 	addiu	sp,sp,-32
bfc0a324:	afbf001c 	sw	ra,28(sp)
			int i;
				
			/* Configure ZQ */		
		
			//for(i=0; i< (sizeof(auto_cali_value)/sizeof(unsigned int));i++)
			unsigned int auto_cali_value=0;
bfc0a328:	afa00010 	sw	zero,16(sp)
			 if(memctlc_is_DDR3())
bfc0a32c:	0ff00caf 	jal	bfc032bc <memctlc_is_DDR3>
bfc0a330:	00000000 	nop
bfc0a334:	10400006 	beqz	v0,bfc0a350 <RTK_ZQ_K+0x30>
bfc0a338:	00000000 	nop
			 {
				auto_cali_value=auto_cali_value_DDR3[0];			
bfc0a33c:	3c02bfc1 	lui	v0,0xbfc1
bfc0a340:	8c42b76c 	lw	v0,-18580(v0)
bfc0a344:	afa20010 	sw	v0,16(sp)
bfc0a348:	0bf028db 	j	bfc0a36c <RTK_ZQ_K+0x4c>
bfc0a34c:	00000000 	nop
			 }
			else if(memctlc_is_DDR2())
bfc0a350:	0ff00cbd 	jal	bfc032f4 <memctlc_is_DDR2>
bfc0a354:	00000000 	nop
bfc0a358:	10400004 	beqz	v0,bfc0a36c <RTK_ZQ_K+0x4c>
bfc0a35c:	00000000 	nop
			{
				auto_cali_value=auto_cali_value_DDR2[0];			
bfc0a360:	3c02bfc1 	lui	v0,0xbfc1
bfc0a364:	8c42b768 	lw	v0,-18584(v0)
bfc0a368:	afa20010 	sw	v0,16(sp)
			}
		
			{
				if(0 == memctlc_ZQ_calibration(auto_cali_value))
bfc0a36c:	8fa40010 	lw	a0,16(sp)
bfc0a370:	0ff01d96 	jal	bfc07658 <memctlc_ZQ_calibration>
bfc0a374:	00000000 	nop
bfc0a378:	14400005 	bnez	v0,bfc0a390 <RTK_ZQ_K+0x70>
bfc0a37c:	00000000 	nop
				{
				/* We found one .*/
				_memctl_debug_printf("\n\nZQ[%d] calibration Pass\n",i);
					memctlc_check_ZQ();
bfc0a380:	0ff00c5c 	jal	bfc03170 <memctlc_check_ZQ>
bfc0a384:	00000000 	nop
bfc0a388:	0bf028e6 	j	bfc0a398 <RTK_ZQ_K+0x78>
bfc0a38c:	00000000 	nop
					//break;
				}
				else
				{
					_memctl_debug_printf("\n\nZQ[%d] calibration fail\n",i);
					memctlc_check_ZQ();
bfc0a390:	0ff00c5c 	jal	bfc03170 <memctlc_check_ZQ>
bfc0a394:	00000000 	nop
				}
			}			
			

}
bfc0a398:	8fbf001c 	lw	ra,28(sp)
bfc0a39c:	27bd0020 	addiu	sp,sp,32
bfc0a3a0:	03e00008 	jr	ra
bfc0a3a4:	00000000 	nop

bfc0a3a8 <_memctl_update_phy_param>:

void _memctl_update_phy_param(void)
{
bfc0a3a8:	27bdffd0 	addiu	sp,sp,-48
bfc0a3ac:	afbf002c 	sw	ra,44(sp)
	volatile unsigned int *dcr;
	volatile unsigned int *dacr;
	volatile unsigned int dacr_tmp1, dacr_tmp2;
	volatile unsigned int dmcr_tmp;

	dmcr = (unsigned int *)DMCR;
bfc0a3b0:	3c02b800 	lui	v0,0xb800
bfc0a3b4:	3442101c 	ori	v0,v0,0x101c
bfc0a3b8:	afa20018 	sw	v0,24(sp)
	dcr = (unsigned int *)DCR;
bfc0a3bc:	3c02b800 	lui	v0,0xb800
bfc0a3c0:	34421004 	ori	v0,v0,0x1004
bfc0a3c4:	afa20014 	sw	v0,20(sp)
	dacr = (unsigned int *)DACCR;
bfc0a3c8:	3c02b800 	lui	v0,0xb800
bfc0a3cc:	34421500 	ori	v0,v0,0x1500
bfc0a3d0:	afa20010 	sw	v0,16(sp)
	
	/* Write DMCR register to sync the parameters to phy control. */
	dmcr_tmp = *dmcr;
bfc0a3d4:	8fa20018 	lw	v0,24(sp)
bfc0a3d8:	8c420000 	lw	v0,0(v0)
bfc0a3dc:	afa20024 	sw	v0,36(sp)
	*dmcr = dmcr_tmp;
bfc0a3e0:	8fa30024 	lw	v1,36(sp)
bfc0a3e4:	8fa20018 	lw	v0,24(sp)
bfc0a3e8:	ac430000 	sw	v1,0(v0)
	_memctl_delay_clkm_cycles(10);	
bfc0a3ec:	0ff01c9d 	jal	bfc07274 <_memctl_delay_clkm_cycles>
bfc0a3f0:	2404000a 	li	a0,10
	/* Waiting for the completion of the update procedure. */
	while((*dmcr & ((unsigned int)DMCR_MRS_BUSY)) != 0);
bfc0a3f4:	8fa20018 	lw	v0,24(sp)
bfc0a3f8:	8c420000 	lw	v0,0(v0)
bfc0a3fc:	0440fffd 	bltz	v0,bfc0a3f4 <_memctl_update_phy_param+0x4c>
bfc0a400:	00000000 	nop

	__asm__ __volatile__("": : :"memory");

	/* reset phy buffer pointer */
	dacr_tmp1 = *dacr;
bfc0a404:	8fa20010 	lw	v0,16(sp)
bfc0a408:	8c420000 	lw	v0,0(v0)
bfc0a40c:	afa2001c 	sw	v0,28(sp)
	dacr_tmp1 = dacr_tmp1 & (0xFFFFFFEF);
bfc0a410:	8fa3001c 	lw	v1,28(sp)
bfc0a414:	2402ffef 	li	v0,-17
bfc0a418:	00621024 	and	v0,v1,v0
bfc0a41c:	afa2001c 	sw	v0,28(sp)
	dacr_tmp2 = dacr_tmp1 | (0x10);
bfc0a420:	8fa2001c 	lw	v0,28(sp)
bfc0a424:	34420010 	ori	v0,v0,0x10
bfc0a428:	afa20020 	sw	v0,32(sp)
	*dacr = dacr_tmp1 ;
bfc0a42c:	8fa3001c 	lw	v1,28(sp)
bfc0a430:	8fa20010 	lw	v0,16(sp)
bfc0a434:	ac430000 	sw	v1,0(v0)

	_memctl_delay_clkm_cycles(10);	
bfc0a438:	0ff01c9d 	jal	bfc07274 <_memctl_delay_clkm_cycles>
bfc0a43c:	2404000a 	li	a0,10
	__asm__ __volatile__("": : :"memory");
	*dacr = dacr_tmp2 ;
bfc0a440:	8fa30020 	lw	v1,32(sp)
bfc0a444:	8fa20010 	lw	v0,16(sp)
bfc0a448:	ac430000 	sw	v1,0(v0)

	return;
}
bfc0a44c:	8fbf002c 	lw	ra,44(sp)
bfc0a450:	03e00008 	jr	ra
bfc0a454:	27bd0030 	addiu	sp,sp,48

bfc0a458 <_memctl_disable_hw_auto_cali>:



void _memctl_disable_hw_auto_cali(void)
{
bfc0a458:	27bdffd8 	addiu	sp,sp,-40
bfc0a45c:	afbf0024 	sw	ra,36(sp)
	unsigned int i;
	volatile unsigned int *dacspcr, *dacdqr;

	dacspcr = (volatile unsigned int *)DACSPCR;
bfc0a460:	3c02b800 	lui	v0,0xb800
bfc0a464:	34421504 	ori	v0,v0,0x1504
bfc0a468:	afa20014 	sw	v0,20(sp)
	dacdqr = (volatile unsigned int *)DACDQR;
bfc0a46c:	3c02b800 	lui	v0,0xb800
bfc0a470:	34421510 	ori	v0,v0,0x1510
bfc0a474:	afa20010 	sw	v0,16(sp)
	
	*dacspcr &= (~(1<<31));
bfc0a478:	8fa20014 	lw	v0,20(sp)
bfc0a47c:	8c430000 	lw	v1,0(v0)
bfc0a480:	3c027fff 	lui	v0,0x7fff
bfc0a484:	3442ffff 	ori	v0,v0,0xffff
bfc0a488:	00621824 	and	v1,v1,v0
bfc0a48c:	8fa20014 	lw	v0,20(sp)
bfc0a490:	ac430000 	sw	v1,0(v0)

	for(i=0;i<32;i++){
bfc0a494:	afa00018 	sw	zero,24(sp)
bfc0a498:	0bf02935 	j	bfc0a4d4 <_memctl_disable_hw_auto_cali+0x7c>
bfc0a49c:	00000000 	nop
		*dacdqr &= (~(1<<31));
bfc0a4a0:	8fa20010 	lw	v0,16(sp)
bfc0a4a4:	8c430000 	lw	v1,0(v0)
bfc0a4a8:	3c027fff 	lui	v0,0x7fff
bfc0a4ac:	3442ffff 	ori	v0,v0,0xffff
bfc0a4b0:	00621824 	and	v1,v1,v0
bfc0a4b4:	8fa20010 	lw	v0,16(sp)
bfc0a4b8:	ac430000 	sw	v1,0(v0)
		dacdqr++;
bfc0a4bc:	8fa20010 	lw	v0,16(sp)
bfc0a4c0:	24420004 	addiu	v0,v0,4
bfc0a4c4:	afa20010 	sw	v0,16(sp)
	dacspcr = (volatile unsigned int *)DACSPCR;
	dacdqr = (volatile unsigned int *)DACDQR;
	
	*dacspcr &= (~(1<<31));

	for(i=0;i<32;i++){
bfc0a4c8:	8fa20018 	lw	v0,24(sp)
bfc0a4cc:	24420001 	addiu	v0,v0,1
bfc0a4d0:	afa20018 	sw	v0,24(sp)
bfc0a4d4:	8fa20018 	lw	v0,24(sp)
bfc0a4d8:	2c420020 	sltiu	v0,v0,32
bfc0a4dc:	1440fff0 	bnez	v0,bfc0a4a0 <_memctl_disable_hw_auto_cali+0x48>
bfc0a4e0:	00000000 	nop
		*dacdqr &= (~(1<<31));
		dacdqr++;
	}

	_memctl_update_phy_param();
bfc0a4e4:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc0a4e8:	00000000 	nop

	return;
}
bfc0a4ec:	8fbf0024 	lw	ra,36(sp)
bfc0a4f0:	27bd0028 	addiu	sp,sp,40
bfc0a4f4:	03e00008 	jr	ra
bfc0a4f8:	00000000 	nop

bfc0a4fc <memctlc_DBFM_enalbe>:

}
#endif

void memctlc_DBFM_enalbe(void)
{
bfc0a4fc:	27bdfff8 	addiu	sp,sp,-8
	volatile unsigned int *mcr;

	mcr = (volatile unsigned int *)MCR;
bfc0a500:	3c02b800 	lui	v0,0xb800
bfc0a504:	34421000 	ori	v0,v0,0x1000
bfc0a508:	afa20000 	sw	v0,0(sp)

	*mcr = *mcr |0x1e0;
bfc0a50c:	8fa20000 	lw	v0,0(sp)
bfc0a510:	8c420000 	lw	v0,0(v0)
bfc0a514:	344301e0 	ori	v1,v0,0x1e0
bfc0a518:	8fa20000 	lw	v0,0(sp)
bfc0a51c:	ac430000 	sw	v1,0(v0)

	return;

}
bfc0a520:	27bd0008 	addiu	sp,sp,8
bfc0a524:	03e00008 	jr	ra
bfc0a528:	00000000 	nop

bfc0a52c <memctlc_show_reg_info>:

void memctlc_show_reg_info(void)
{
bfc0a52c:	27bdffe8 	addiu	sp,sp,-24
bfc0a530:	afbf0014 	sw	ra,20(sp)
#if 1
				/* Show register informantion. */	
	//_memctl_debug_printf("\nMem Final setting info:\n");
	printf("\tDRAM frequency: %dMHz\n", board_DRAM_freq_mhz());
bfc0a534:	0ff0260d 	jal	bfc09834 <board_DRAM_freq_mhz>
bfc0a538:	00000000 	nop
bfc0a53c:	3c03bfc1 	lui	v1,0xbfc1
bfc0a540:	2464b5c0 	addiu	a0,v1,-19008
bfc0a544:	00402821 	move	a1,v0
bfc0a548:	0ff003ac 	jal	bfc00eb0 <printf>
bfc0a54c:	00000000 	nop
	  memctlc_check_DCR();
bfc0a550:	0ff01197 	jal	bfc0465c <memctlc_check_DCR>
bfc0a554:	00000000 	nop
	_memctl_debug_printf("\tDIDER1(0x%08x):0x%08x\n", DIDER1,REG(DIDER1));
	_memctl_debug_printf("\tDIDER2(0x%08x):0x%08x\n", DIDER2,REG(DIDER2));
	_memctl_debug_printf("\tDIDER3(0x%08x):0x%08x\n", DIDER3,REG(DIDER3));
	_memctl_debug_printf("\tDACDQ0(0x%08x):0x%08x\n", DACDQ0,REG(DACDQ0));
#endif
}
bfc0a558:	8fbf0014 	lw	ra,20(sp)
bfc0a55c:	27bd0018 	addiu	sp,sp,24
bfc0a560:	03e00008 	jr	ra
bfc0a564:	00000000 	nop

bfc0a568 <memctlc_8198C_PI_init>:

void memctlc_8198C_PI_init(void)
{
bfc0a568:	27bdffe0 	addiu	sp,sp,-32
bfc0a56c:	afbf001c 	sw	ra,28(sp)
			//Step1
			
		
			int i,PI_freq_DDR;

			if(memctlc_is_DDR3())
bfc0a570:	0ff00caf 	jal	bfc032bc <memctlc_is_DDR3>
bfc0a574:	00000000 	nop
bfc0a578:	10400003 	beqz	v0,bfc0a588 <memctlc_8198C_PI_init+0x20>
bfc0a57c:	00000000 	nop
				PI_freq_DDR=550;
bfc0a580:	24020226 	li	v0,550
bfc0a584:	afa20010 	sw	v0,16(sp)

			if(memctlc_is_DDR2())
bfc0a588:	0ff00cbd 	jal	bfc032f4 <memctlc_is_DDR2>
bfc0a58c:	00000000 	nop
bfc0a590:	10400003 	beqz	v0,bfc0a5a0 <memctlc_8198C_PI_init+0x38>
bfc0a594:	00000000 	nop
				PI_freq_DDR=510;
bfc0a598:	240201fe 	li	v0,510
bfc0a59c:	afa20010 	sw	v0,16(sp)

			

			if(board_DRAM_freq_mhz()<PI_freq_DDR)	//can go Chariot at 250MHZ		
bfc0a5a0:	0ff0260d 	jal	bfc09834 <board_DRAM_freq_mhz>
bfc0a5a4:	00000000 	nop
bfc0a5a8:	00401821 	move	v1,v0
bfc0a5ac:	8fa20010 	lw	v0,16(sp)
bfc0a5b0:	0062102b 	sltu	v0,v1,v0
bfc0a5b4:	10400053 	beqz	v0,bfc0a704 <memctlc_8198C_PI_init+0x19c>
bfc0a5b8:	00000000 	nop
			{			

			
				_memctl_debug_printf("\n2.Set DRAM_CMD_Phase rising of clk\n");	
				REG32(DWPR1)=0x40000000;
bfc0a5bc:	3c02b800 	lui	v0,0xb800
bfc0a5c0:	34421800 	ori	v0,v0,0x1800
bfc0a5c4:	3c034000 	lui	v1,0x4000
bfc0a5c8:	ac430000 	sw	v1,0(v0)
				_memctl_debug_printf("DWPR1(0x%x)=0x%x\n",DWPR1,REG32(DWPR1));

				
			_memctl_debug_printf("\n1.Set DRAM clk phase inverter \n");	
			REG32(DOR)=0x100000ff;
bfc0a5cc:	3c02b800 	lui	v0,0xb800
bfc0a5d0:	34421064 	ori	v0,v0,0x1064
bfc0a5d4:	3c031000 	lui	v1,0x1000
bfc0a5d8:	346300ff 	ori	v1,v1,0xff
bfc0a5dc:	ac430000 	sw	v1,0(v0)
			_memctl_debug_printf("\n3.PI phase\n");	
			//REG32(0xb80000dc)=0x2CB00400;  //suggestion by PM
			//REG32(0xb80000dc)=0x08200400;//make clock can trigger CAS's low , 330MHZ
			

			 if( (memctlc_is_DDR2()))      //RTL8198CD+DDR2
bfc0a5e0:	0ff00cbd 	jal	bfc032f4 <memctlc_is_DDR2>
bfc0a5e4:	00000000 	nop
bfc0a5e8:	1040000e 	beqz	v0,bfc0a624 <memctlc_8198C_PI_init+0xbc>
bfc0a5ec:	00000000 	nop
                        {
                                REG32_ANDOR(0xb80000dc, ~((0x3f<<24)|(0x3f<<18)), ((0x2c<<24)|(0x2c<<18)))//set PI = 12
bfc0a5f0:	3c02b800 	lui	v0,0xb800
bfc0a5f4:	344200dc 	ori	v0,v0,0xdc
bfc0a5f8:	3c03b800 	lui	v1,0xb800
bfc0a5fc:	346300dc 	ori	v1,v1,0xdc
bfc0a600:	8c640000 	lw	a0,0(v1)
bfc0a604:	3c03c003 	lui	v1,0xc003
bfc0a608:	3463ffff 	ori	v1,v1,0xffff
bfc0a60c:	00832024 	and	a0,a0,v1
bfc0a610:	3c032cb0 	lui	v1,0x2cb0
bfc0a614:	00831825 	or	v1,a0,v1
bfc0a618:	ac430000 	sw	v1,0(v0)
bfc0a61c:	0bf02994 	j	bfc0a650 <memctlc_8198C_PI_init+0xe8>
bfc0a620:	00000000 	nop
                        }
                        else
                        {
                                REG32_ANDOR(0xb80000dc, ~((0x3f<<24)|(0x3f<<18)), ((0x2c<<24)|(0x2C<<18)))//set PI = 12
bfc0a624:	3c02b800 	lui	v0,0xb800
bfc0a628:	344200dc 	ori	v0,v0,0xdc
bfc0a62c:	3c03b800 	lui	v1,0xb800
bfc0a630:	346300dc 	ori	v1,v1,0xdc
bfc0a634:	8c640000 	lw	a0,0(v1)
bfc0a638:	3c03c003 	lui	v1,0xc003
bfc0a63c:	3463ffff 	ori	v1,v1,0xffff
bfc0a640:	00832024 	and	a0,a0,v1
bfc0a644:	3c032cb0 	lui	v1,0x2cb0
bfc0a648:	00831825 	or	v1,a0,v1
bfc0a64c:	ac430000 	sw	v1,0(v0)
			_memctl_debug_printf("0xb80000dc(0x%x)=0x%x\n",0xb80000dc,REG32(0xb80000dc));	

			_memctl_debug_printf("\n4.DQ phase inv\n");	
			//REG32(0xb8001804)|=(5<<29);

			REG32(0xb8001804)|=(5<<29);
bfc0a650:	3c02b800 	lui	v0,0xb800
bfc0a654:	34421804 	ori	v0,v0,0x1804
bfc0a658:	3c03b800 	lui	v1,0xb800
bfc0a65c:	34631804 	ori	v1,v1,0x1804
bfc0a660:	8c640000 	lw	a0,0(v1)
bfc0a664:	3c03a000 	lui	v1,0xa000
bfc0a668:	00831825 	or	v1,a0,v1
bfc0a66c:	ac430000 	sw	v1,0(v0)
			_memctl_debug_printf("0xb8001804(0x%x)=0x%x\n",0xb8001804,REG32(0xb8001804));		

			

			_memctl_debug_printf("\n5.PLL div2\n");	
			REG32(0xb80000d8)|=(1<<21);
bfc0a670:	3c02b800 	lui	v0,0xb800
bfc0a674:	344200d8 	ori	v0,v0,0xd8
bfc0a678:	3c03b800 	lui	v1,0xb800
bfc0a67c:	346300d8 	ori	v1,v1,0xd8
bfc0a680:	8c640000 	lw	a0,0(v1)
bfc0a684:	3c030020 	lui	v1,0x20
bfc0a688:	00831825 	or	v1,a0,v1
bfc0a68c:	ac430000 	sw	v1,0(v0)
			_memctl_debug_printf("0xb80000d8(0x%x)=0x%x\n",0xb80000d8,REG32(0xb80000d8));

			_memctl_debug_printf("\n6.PLL multi 2\n");	
			REG32(0xb80000d8)&=~(1<<21);
bfc0a690:	3c02b800 	lui	v0,0xb800
bfc0a694:	344200d8 	ori	v0,v0,0xd8
bfc0a698:	3c03b800 	lui	v1,0xb800
bfc0a69c:	346300d8 	ori	v1,v1,0xd8
bfc0a6a0:	8c640000 	lw	a0,0(v1)
bfc0a6a4:	3c03ffdf 	lui	v1,0xffdf
bfc0a6a8:	3463ffff 	ori	v1,v1,0xffff
bfc0a6ac:	00831824 	and	v1,a0,v1
bfc0a6b0:	ac430000 	sw	v1,0(v0)
			_memctl_debug_printf("0xb80000d8(0x%x)=0x%x\n",0xb80000d8,REG32(0xb80000d8));

				//Step5 , DACQ0~15
			_memctl_debug_printf("\n5.Manual set DACQ0~15\n"); 			
			 for(i=0;i<32;i++)
bfc0a6b4:	afa00014 	sw	zero,20(sp)
bfc0a6b8:	0bf029bb 	j	bfc0a6ec <memctlc_8198C_PI_init+0x184>
bfc0a6bc:	00000000 	nop
			 {			 	
 				REG32( 0xb8001510 +i*4 ) = 0x00040200; //DDR3 Chariot 600 MHZ OK.
bfc0a6c0:	8fa30014 	lw	v1,20(sp)
bfc0a6c4:	3c022e00 	lui	v0,0x2e00
bfc0a6c8:	34420544 	ori	v0,v0,0x544
bfc0a6cc:	00621021 	addu	v0,v1,v0
bfc0a6d0:	00021080 	sll	v0,v0,0x2
bfc0a6d4:	3c030004 	lui	v1,0x4
bfc0a6d8:	34630200 	ori	v1,v1,0x200
bfc0a6dc:	ac430000 	sw	v1,0(v0)
			REG32(0xb80000d8)&=~(1<<21);
			_memctl_debug_printf("0xb80000d8(0x%x)=0x%x\n",0xb80000d8,REG32(0xb80000d8));

				//Step5 , DACQ0~15
			_memctl_debug_printf("\n5.Manual set DACQ0~15\n"); 			
			 for(i=0;i<32;i++)
bfc0a6e0:	8fa20014 	lw	v0,20(sp)
bfc0a6e4:	24420001 	addiu	v0,v0,1
bfc0a6e8:	afa20014 	sw	v0,20(sp)
bfc0a6ec:	8fa20014 	lw	v0,20(sp)
bfc0a6f0:	28420020 	slti	v0,v0,32
bfc0a6f4:	1440fff2 	bnez	v0,bfc0a6c0 <memctlc_8198C_PI_init+0x158>
bfc0a6f8:	00000000 	nop
bfc0a6fc:	0bf029de 	j	bfc0a778 <memctlc_8198C_PI_init+0x210>
bfc0a700:	00000000 	nop
				#if 0 //For DDR3 660MHZ 
			
				#else
				
			_memctl_debug_printf("\n2.Set DRAM_CMD_Phase falling of clk\n");	
			REG32(DWPR1)=0xc0000000;
bfc0a704:	3c02b800 	lui	v0,0xb800
bfc0a708:	34421800 	ori	v0,v0,0x1800
bfc0a70c:	3c03c000 	lui	v1,0xc000
bfc0a710:	ac430000 	sw	v1,0(v0)


			_memctl_debug_printf("\n0.Set clk Tx delay=8\n");	
			REG32(CLK_MANAGE)|=8<<5;
bfc0a714:	3c02b800 	lui	v0,0xb800
bfc0a718:	34420010 	ori	v0,v0,0x10
bfc0a71c:	3c03b800 	lui	v1,0xb800
bfc0a720:	34630010 	ori	v1,v1,0x10
bfc0a724:	8c630000 	lw	v1,0(v1)
bfc0a728:	34630100 	ori	v1,v1,0x100
bfc0a72c:	ac430000 	sw	v1,0(v0)


			 for(i=0;i<32;i++)
bfc0a730:	afa00014 	sw	zero,20(sp)
bfc0a734:	0bf029da 	j	bfc0a768 <memctlc_8198C_PI_init+0x200>
bfc0a738:	00000000 	nop
			 {			 	
 				//REG32( 0xb8001510 +i*4 ) = 0x00040200; //DDR3 Chariot 600 MHZ OK.
 				 REG32( 0xb8001510 +i*4 )  = (0x8<<24)|0x00040200; 				
bfc0a73c:	8fa30014 	lw	v1,20(sp)
bfc0a740:	3c022e00 	lui	v0,0x2e00
bfc0a744:	34420544 	ori	v0,v0,0x544
bfc0a748:	00621021 	addu	v0,v1,v0
bfc0a74c:	00021080 	sll	v0,v0,0x2
bfc0a750:	3c030804 	lui	v1,0x804
bfc0a754:	34630200 	ori	v1,v1,0x200
bfc0a758:	ac430000 	sw	v1,0(v0)

			_memctl_debug_printf("\n0.Set clk Tx delay=8\n");	
			REG32(CLK_MANAGE)|=8<<5;


			 for(i=0;i<32;i++)
bfc0a75c:	8fa20014 	lw	v0,20(sp)
bfc0a760:	24420001 	addiu	v0,v0,1
bfc0a764:	afa20014 	sw	v0,20(sp)
bfc0a768:	8fa20014 	lw	v0,20(sp)
bfc0a76c:	28420020 	slti	v0,v0,32
bfc0a770:	1440fff2 	bnez	v0,bfc0a73c <memctlc_8198C_PI_init+0x1d4>
bfc0a774:	00000000 	nop
				  
	  			#endif
			}	
			
			
			REG32(DIDER1)=0x1f1f0000;	
bfc0a778:	3c02b800 	lui	v0,0xb800
bfc0a77c:	34421050 	ori	v0,v0,0x1050
bfc0a780:	3c031f1f 	lui	v1,0x1f1f
bfc0a784:	ac430000 	sw	v1,0(v0)
				
}
bfc0a788:	8fbf001c 	lw	ra,28(sp)
bfc0a78c:	27bd0020 	addiu	sp,sp,32
bfc0a790:	03e00008 	jr	ra
bfc0a794:	00000000 	nop

bfc0a798 <start_c>:

#define BSP_DIVISOR         8000

//------------------------------------------------------------------
void start_c()
{	
bfc0a798:	27bdffd0 	addiu	sp,sp,-48
bfc0a79c:	afbf002c 	sw	ra,44(sp)
	REG32(BSP_CDBR)=(BSP_DIVISOR) << BSP_DIVF_OFFSET;
        REG32(BSP_TC0DATA) = (((BSP_SYS_CLK_RATE/BSP_DIVISOR)/HZ)) << 4;
        REG32(0xb800311c)=0x00600000;
	/*For DDR3 must , for DDR2 safe*/
#endif
	memctlc_DBFM_enalbe();
bfc0a7a0:	0ff0293f 	jal	bfc0a4fc <memctlc_DBFM_enalbe>
bfc0a7a4:	00000000 	nop
	
	/*Realtek RTL8198C ZQ pad calibration*/
	RTK_ZQ_K();
bfc0a7a8:	0ff028c8 	jal	bfc0a320 <RTK_ZQ_K>
bfc0a7ac:	00000000 	nop
	
	//-----------------------------------------------------------------	
	//REG32(0xb8001200)=0xffc00000; //Set SPI clock div 16
	unsigned int v=REG32(SYS_HW_STRAP);
bfc0a7b0:	3c02b800 	lui	v0,0xb800
bfc0a7b4:	34420008 	ori	v0,v0,0x8
bfc0a7b8:	8c420000 	lw	v0,0(v0)
bfc0a7bc:	afa20024 	sw	v0,36(sp)
	unsigned char boot_sel=GET_BITVAL(v, 0, RANG3);
bfc0a7c0:	8fa20024 	lw	v0,36(sp)
bfc0a7c4:	304200ff 	andi	v0,v0,0xff
bfc0a7c8:	30420007 	andi	v0,v0,0x7
bfc0a7cc:	a3a20022 	sb	v0,34(sp)
	unsigned char dramtype_sel=GET_BITVAL(v, 3, RANG1);
bfc0a7d0:	8fa20024 	lw	v0,36(sp)
bfc0a7d4:	30420008 	andi	v0,v0,0x8
bfc0a7d8:	000210c2 	srl	v0,v0,0x3
bfc0a7dc:	a3a20021 	sb	v0,33(sp)
	//unsigned char m2x_freq_sel=GET_BITVAL(v, 11, RANG4);  //bit [14:10], but bit 10 is not strap pin
	unsigned char m2x_freq_sel=GET_BITVAL(v, 10, RANG5);  //bit [14:10], but bit 10 is not strap pin
bfc0a7e0:	8fa20024 	lw	v0,36(sp)
bfc0a7e4:	30427c00 	andi	v0,v0,0x7c00
bfc0a7e8:	00021282 	srl	v0,v0,0xa
bfc0a7ec:	a3a20020 	sb	v0,32(sp)


	//-----------
	//Rescur for debug
	#if 1
	if(kbhit(0x2000))
bfc0a7f0:	24042000 	li	a0,8192
bfc0a7f4:	0ff00214 	jal	bfc00850 <kbhit>
bfc0a7f8:	00000000 	nop
bfc0a7fc:	1040000b 	beqz	v0,bfc0a82c <start_c+0x94>
bfc0a800:	00000000 	nop
	{
		if(uart_inc()=='r')
bfc0a804:	0ff001ff 	jal	bfc007fc <uart_inc>
bfc0a808:	00000000 	nop
bfc0a80c:	00401821 	move	v1,v0
bfc0a810:	24020072 	li	v0,114
bfc0a814:	14620005 	bne	v1,v0,bfc0a82c <start_c+0x94>
bfc0a818:	00000000 	nop
		{	
			RescueMode();			
bfc0a81c:	0ff0232e 	jal	bfc08cb8 <RescueMode>
bfc0a820:	00000000 	nop
			
			return ;		
bfc0a824:	0bf02b49 	j	bfc0ad24 <start_c+0x58c>
bfc0a828:	00000000 	nop

	//if(memctlc_is_DDR3()){	
	if(1){	//for both DDR2 and DDR3
	#if 1
	
		if(memctlc_is_DDR2()){
bfc0a82c:	0ff00cbd 	jal	bfc032f4 <memctlc_is_DDR2>
bfc0a830:	00000000 	nop
bfc0a834:	1040000f 	beqz	v0,bfc0a874 <start_c+0xdc>
bfc0a838:	00000000 	nop
			//REG32(SYS_HW_STRAP)=0x59004260; //Set memory clock=390MHZ	
			       unsigned int tmp_v=0;
bfc0a83c:	afa0001c 	sw	zero,28(sp)
                                 tmp_v=REG32(SYS_HW_STRAP);
bfc0a840:	3c02b800 	lui	v0,0xb800
bfc0a844:	34420008 	ori	v0,v0,0x8
bfc0a848:	8c420000 	lw	v0,0(v0)
bfc0a84c:	afa2001c 	sw	v0,28(sp)
                                REG32(SYS_HW_STRAP) = ( tmp_v &~(0x1f<<10))|(0x10<<10);
bfc0a850:	3c02b800 	lui	v0,0xb800
bfc0a854:	34420008 	ori	v0,v0,0x8
bfc0a858:	8fa4001c 	lw	a0,28(sp)
bfc0a85c:	240383ff 	li	v1,-31745
bfc0a860:	00831824 	and	v1,a0,v1
bfc0a864:	34634000 	ori	v1,v1,0x4000
bfc0a868:	ac430000 	sw	v1,0(v0)
bfc0a86c:	0bf02a7d 	j	bfc0a9f4 <start_c+0x25c>
bfc0a870:	00000000 	nop
		}
		else {
			// todo: 8198C DDR3 670MHz; 8198CS DDR3 740MHz
			//		 8954E DDR3 670MHz; 8954ES DDR3 740MHz
			unsigned int tmp_v=0;
bfc0a874:	afa00018 	sw	zero,24(sp)
			tmp_v=REG32(SYS_HW_STRAP);
bfc0a878:	3c02b800 	lui	v0,0xb800
bfc0a87c:	34420008 	ori	v0,v0,0x8
bfc0a880:	8c420000 	lw	v0,0(v0)
bfc0a884:	afa20018 	sw	v0,24(sp)
			if ((REG32(0xb800000c)==RTL_8198C)||(REG32(0xb800000c)==RTL8954E||(REG32(0xb800000c)==RTL8954E)||(REG32(0xb800000c)==RTL8954ES)))
bfc0a888:	3c02b800 	lui	v0,0xb800
bfc0a88c:	3442000c 	ori	v0,v0,0xc
bfc0a890:	8c420000 	lw	v0,0(v0)
bfc0a894:	10400013 	beqz	v0,bfc0a8e4 <start_c+0x14c>
bfc0a898:	00000000 	nop
bfc0a89c:	3c02b800 	lui	v0,0xb800
bfc0a8a0:	3442000c 	ori	v0,v0,0xc
bfc0a8a4:	8c430000 	lw	v1,0(v0)
bfc0a8a8:	24020003 	li	v0,3
bfc0a8ac:	1062000d 	beq	v1,v0,bfc0a8e4 <start_c+0x14c>
bfc0a8b0:	00000000 	nop
bfc0a8b4:	3c02b800 	lui	v0,0xb800
bfc0a8b8:	3442000c 	ori	v0,v0,0xc
bfc0a8bc:	8c430000 	lw	v1,0(v0)
bfc0a8c0:	24020003 	li	v0,3
bfc0a8c4:	10620007 	beq	v1,v0,bfc0a8e4 <start_c+0x14c>
bfc0a8c8:	00000000 	nop
bfc0a8cc:	3c02b800 	lui	v0,0xb800
bfc0a8d0:	3442000c 	ori	v0,v0,0xc
bfc0a8d4:	8c430000 	lw	v1,0(v0)
bfc0a8d8:	24020083 	li	v0,131
bfc0a8dc:	1462001d 	bne	v1,v0,bfc0a954 <start_c+0x1bc>
bfc0a8e0:	00000000 	nop
			{
			//	REG32(SYS_HW_STRAP)=0x59006E60;//Set memory clock=740HZ
				REG32(SYS_HW_STRAP) = ( tmp_v &~(0x1f<<10))|(0x11<<10);
bfc0a8e4:	3c02b800 	lui	v0,0xb800
bfc0a8e8:	34420008 	ori	v0,v0,0x8
bfc0a8ec:	8fa40018 	lw	a0,24(sp)
bfc0a8f0:	240383ff 	li	v1,-31745
bfc0a8f4:	00831824 	and	v1,a0,v1
bfc0a8f8:	34634400 	ori	v1,v1,0x4400
bfc0a8fc:	ac430000 	sw	v1,0(v0)
				if ((REG32(0xb800000c)==RTL8954E)||(REG32(0xb800000c)==RTL8954ES))
bfc0a900:	3c02b800 	lui	v0,0xb800
bfc0a904:	3442000c 	ori	v0,v0,0xc
bfc0a908:	8c430000 	lw	v1,0(v0)
bfc0a90c:	24020003 	li	v0,3
bfc0a910:	10620007 	beq	v1,v0,bfc0a930 <start_c+0x198>
bfc0a914:	00000000 	nop
bfc0a918:	3c02b800 	lui	v0,0xb800
bfc0a91c:	3442000c 	ori	v0,v0,0xc
bfc0a920:	8c430000 	lw	v1,0(v0)
bfc0a924:	24020083 	li	v0,131
bfc0a928:	14620031 	bne	v1,v0,bfc0a9f0 <start_c+0x258>
bfc0a92c:	00000000 	nop
					REG32(0xb80000a0) |= 0x10; // for the case of 5181 500MHz < mem 580MHz
bfc0a930:	3c02b800 	lui	v0,0xb800
bfc0a934:	344200a0 	ori	v0,v0,0xa0
bfc0a938:	3c03b800 	lui	v1,0xb800
bfc0a93c:	346300a0 	ori	v1,v1,0xa0
bfc0a940:	8c630000 	lw	v1,0(v1)
bfc0a944:	34630010 	ori	v1,v1,0x10
bfc0a948:	ac430000 	sw	v1,0(v0)
		else {
			// todo: 8198C DDR3 670MHz; 8198CS DDR3 740MHz
			//		 8954E DDR3 670MHz; 8954ES DDR3 740MHz
			unsigned int tmp_v=0;
			tmp_v=REG32(SYS_HW_STRAP);
			if ((REG32(0xb800000c)==RTL_8198C)||(REG32(0xb800000c)==RTL8954E||(REG32(0xb800000c)==RTL8954E)||(REG32(0xb800000c)==RTL8954ES)))
bfc0a94c:	0bf02a7d 	j	bfc0a9f4 <start_c+0x25c>
bfc0a950:	00000000 	nop
			//	REG32(SYS_HW_STRAP)=0x59006E60;//Set memory clock=740HZ
				REG32(SYS_HW_STRAP) = ( tmp_v &~(0x1f<<10))|(0x11<<10);
				if ((REG32(0xb800000c)==RTL8954E)||(REG32(0xb800000c)==RTL8954ES))
					REG32(0xb80000a0) |= 0x10; // for the case of 5181 500MHz < mem 580MHz
			}
			else if (REG32(0xb800000c)==RTL_8198CD)
bfc0a954:	3c02b800 	lui	v0,0xb800
bfc0a958:	3442000c 	ori	v0,v0,0xc
bfc0a95c:	8c430000 	lw	v1,0(v0)
bfc0a960:	24020002 	li	v0,2
bfc0a964:	1462000a 	bne	v1,v0,bfc0a990 <start_c+0x1f8>
bfc0a968:	00000000 	nop
			{
			//	REG32(SYS_HW_STRAP)=0x59005A60;//Set memory clock=655H
				 REG32(SYS_HW_STRAP) = ( tmp_v &~(0x1f<<10))|(0xE<<10);
bfc0a96c:	3c02b800 	lui	v0,0xb800
bfc0a970:	34420008 	ori	v0,v0,0x8
bfc0a974:	8fa40018 	lw	a0,24(sp)
bfc0a978:	240383ff 	li	v1,-31745
bfc0a97c:	00831824 	and	v1,a0,v1
bfc0a980:	34633800 	ori	v1,v1,0x3800
bfc0a984:	ac430000 	sw	v1,0(v0)
bfc0a988:	0bf02a7d 	j	bfc0a9f4 <start_c+0x25c>
bfc0a98c:	00000000 	nop
			}
			else
			{
				if((REG32(0xb800000c)==RTL_DEFAULT1))
bfc0a990:	3c02b800 	lui	v0,0xb800
bfc0a994:	3442000c 	ori	v0,v0,0xc
bfc0a998:	8c430000 	lw	v1,0(v0)
bfc0a99c:	24020081 	li	v0,129
bfc0a9a0:	1462000a 	bne	v1,v0,bfc0a9cc <start_c+0x234>
bfc0a9a4:	00000000 	nop
				//REG32(SYS_HW_STRAP)=0x59006E60;//Set memory clock=740HZ
				 REG32(SYS_HW_STRAP) = ( tmp_v &~(0x1f<<10))|(0x11<<10);
bfc0a9a8:	3c02b800 	lui	v0,0xb800
bfc0a9ac:	34420008 	ori	v0,v0,0x8
bfc0a9b0:	8fa40018 	lw	a0,24(sp)
bfc0a9b4:	240383ff 	li	v1,-31745
bfc0a9b8:	00831824 	and	v1,a0,v1
bfc0a9bc:	34634400 	ori	v1,v1,0x4400
bfc0a9c0:	ac430000 	sw	v1,0(v0)
bfc0a9c4:	0bf02a7d 	j	bfc0a9f4 <start_c+0x25c>
bfc0a9c8:	00000000 	nop
				else
				//REG32(SYS_HW_STRAP)=0x59004660;//Set memory clock=580MHz
				 REG32(SYS_HW_STRAP) = ( tmp_v &~(0x1f<<10))|(0x11<<10);
bfc0a9cc:	3c02b800 	lui	v0,0xb800
bfc0a9d0:	34420008 	ori	v0,v0,0x8
bfc0a9d4:	8fa40018 	lw	a0,24(sp)
bfc0a9d8:	240383ff 	li	v1,-31745
bfc0a9dc:	00831824 	and	v1,a0,v1
bfc0a9e0:	34634400 	ori	v1,v1,0x4400
bfc0a9e4:	ac430000 	sw	v1,0(v0)
bfc0a9e8:	0bf02a7d 	j	bfc0a9f4 <start_c+0x25c>
bfc0a9ec:	00000000 	nop
		else {
			// todo: 8198C DDR3 670MHz; 8198CS DDR3 740MHz
			//		 8954E DDR3 670MHz; 8954ES DDR3 740MHz
			unsigned int tmp_v=0;
			tmp_v=REG32(SYS_HW_STRAP);
			if ((REG32(0xb800000c)==RTL_8198C)||(REG32(0xb800000c)==RTL8954E||(REG32(0xb800000c)==RTL8954E)||(REG32(0xb800000c)==RTL8954ES)))
bfc0a9f0:	00000000 	nop

	
	
	

	boot_sel=GET_BITVAL(v, 0, RANG3);
bfc0a9f4:	8fa20024 	lw	v0,36(sp)
bfc0a9f8:	304200ff 	andi	v0,v0,0xff
bfc0a9fc:	30420007 	andi	v0,v0,0x7
bfc0aa00:	a3a20022 	sb	v0,34(sp)
	dramtype_sel=GET_BITVAL(v, 3, RANG1);
bfc0aa04:	8fa20024 	lw	v0,36(sp)
bfc0aa08:	30420008 	andi	v0,v0,0x8
bfc0aa0c:	000210c2 	srl	v0,v0,0x3
bfc0aa10:	a3a20021 	sb	v0,33(sp)
	//m2x_freq_sel=GET_BITVAL(v, 11, RANG4);  //bit [14:10], but bit 10 is not strap pin
	m2x_freq_sel=GET_BITVAL(v, 10, RANG5);  //bit [14:10], but bit 10 is not strap pin	
bfc0aa14:	8fa20024 	lw	v0,36(sp)
bfc0aa18:	30427c00 	andi	v0,v0,0x7c00
bfc0aa1c:	00021282 	srl	v0,v0,0xa
bfc0aa20:	a3a20020 	sb	v0,32(sp)
	#endif
	
			

			
			if(memctlc_is_DDR3()){				
bfc0aa24:	0ff00caf 	jal	bfc032bc <memctlc_is_DDR3>
bfc0aa28:	00000000 	nop
bfc0aa2c:	1040007a 	beqz	v0,bfc0ac18 <start_c+0x480>
bfc0aa30:	00000000 	nop

			_memctl_debug_printf("\nDDR3 init flow\n"); 
		

			memctlc_8198C_PI_init();
bfc0aa34:	0ff0295a 	jal	bfc0a568 <memctlc_8198C_PI_init>
bfc0aa38:	00000000 	nop

			_memctl_update_phy_param();
bfc0aa3c:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc0aa40:	00000000 	nop

			

			#if 1
			_memctl_debug_printf("\nSet DCR\n"); 
			REG32(DCR)=0x21220000;//128MB
bfc0aa44:	3c02b800 	lui	v0,0xb800
bfc0aa48:	34421004 	ori	v0,v0,0x1004
bfc0aa4c:	3c032122 	lui	v1,0x2122
bfc0aa50:	ac430000 	sw	v1,0(v0)
			
			#endif			
						
			_memctl_update_phy_param();
bfc0aa54:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc0aa58:	00000000 	nop
bfc0aa5c:	0bf02aa0 	j	bfc0aa80 <start_c+0x2e8>
bfc0aa60:	00000000 	nop
				memctlc_show_reg_info();
				break;
			}
			

			}//end of while 1 loop
bfc0aa64:	00000000 	nop
bfc0aa68:	0bf02aa0 	j	bfc0aa80 <start_c+0x2e8>
bfc0aa6c:	00000000 	nop
bfc0aa70:	00000000 	nop
bfc0aa74:	0bf02aa0 	j	bfc0aa80 <start_c+0x2e8>
bfc0aa78:	00000000 	nop
bfc0aa7c:	00000000 	nop
			
			while(1){			
			

			_memctl_debug_printf("Config DTR for DDR3()\n");		
			memctlc_config_DTR();		
bfc0aa80:	0ff00c4c 	jal	bfc03130 <memctlc_config_DTR>
bfc0aa84:	00000000 	nop
			_memctl_update_phy_param();
bfc0aa88:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc0aa8c:	00000000 	nop
			
				
			_memctl_debug_printf("Invoke memctlc_ddr3_dll_reset()\n");
			memctlc_ddr3_dll_reset();
bfc0aa90:	0ff01cc8 	jal	bfc07320 <memctlc_ddr3_dll_reset>
bfc0aa94:	00000000 	nop
			_memctl_update_phy_param();				
bfc0aa98:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc0aa9c:	00000000 	nop
						

			#if 1
			/*When DDR up to 550MHZ , RTL8198C's read cycle=CL+1*/

			if(board_DRAM_freq_mhz()>=550)
bfc0aaa0:	0ff0260d 	jal	bfc09834 <board_DRAM_freq_mhz>
bfc0aaa4:	00000000 	nop
bfc0aaa8:	2c420226 	sltiu	v0,v0,550
bfc0aaac:	1440001b 	bnez	v0,bfc0ab1c <start_c+0x384>
bfc0aab0:	00000000 	nop
			{
			unsigned int CASminusOne=REG32(0xb8001008)>>28;
bfc0aab4:	3c02b800 	lui	v0,0xb800
bfc0aab8:	34421008 	ori	v0,v0,0x1008
bfc0aabc:	8c420000 	lw	v0,0(v0)
bfc0aac0:	00021702 	srl	v0,v0,0x1c
bfc0aac4:	afa20014 	sw	v0,20(sp)
			_memctl_debug_printf("\nDefault DTR0(0x%x)=0x%x\n",DTR0 ,REG32(DTR0) );	
			
			REG32(0xb8001008)&=0x0fffffff;//set CAS=0
bfc0aac8:	3c02b800 	lui	v0,0xb800
bfc0aacc:	34421008 	ori	v0,v0,0x1008
bfc0aad0:	3c03b800 	lui	v1,0xb800
bfc0aad4:	34631008 	ori	v1,v1,0x1008
bfc0aad8:	8c640000 	lw	a0,0(v1)
bfc0aadc:	3c030fff 	lui	v1,0xfff
bfc0aae0:	3463ffff 	ori	v1,v1,0xffff
bfc0aae4:	00831824 	and	v1,a0,v1
bfc0aae8:	ac430000 	sw	v1,0(v0)

			//CASminusOne-=1;
			CASminusOne+=1;
bfc0aaec:	8fa20014 	lw	v0,20(sp)
bfc0aaf0:	24420001 	addiu	v0,v0,1
bfc0aaf4:	afa20014 	sw	v0,20(sp)

			REG32(0xb8001008)|=CASminusOne<<28;			
bfc0aaf8:	3c02b800 	lui	v0,0xb800
bfc0aafc:	34421008 	ori	v0,v0,0x1008
bfc0ab00:	3c03b800 	lui	v1,0xb800
bfc0ab04:	34631008 	ori	v1,v1,0x1008
bfc0ab08:	8c640000 	lw	a0,0(v1)
bfc0ab0c:	8fa30014 	lw	v1,20(sp)
bfc0ab10:	00031f00 	sll	v1,v1,0x1c
bfc0ab14:	00831825 	or	v1,a0,v1
bfc0ab18:	ac430000 	sw	v1,0(v0)
			#else
			//Check DTR 		
			memctlc_check_DTR_DDR3();			
			_memctl_update_phy_param();
			#endif
			memctlc_check_DTR();	
bfc0ab1c:	0ff0165e 	jal	bfc05978 <memctlc_check_DTR>
bfc0ab20:	00000000 	nop
			_memctl_update_phy_param();
bfc0ab24:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc0ab28:	00000000 	nop


			#if 1 //K read and show read margin		
			
			
			 ShowRxDelayMap(); 				
bfc0ab2c:	0ff003be 	jal	bfc00ef8 <ShowRxDelayMap>
bfc0ab30:	00000000 	nop
			
			 DDR_cali_API7();
bfc0ab34:	0ff021e6 	jal	bfc08798 <DDR_cali_API7>
bfc0ab38:	00000000 	nop

			_memctl_debug_printf("DRAM size detect\n");
			memctlc_dram_size_detect(); //Step4: Size detect , set DMCR to activate DRAM parameter
bfc0ab3c:	0ff02026 	jal	bfc08098 <memctlc_dram_size_detect>
bfc0ab40:	00000000 	nop
			
					

			#if 1		
			/*Good for Write , but seems not to be needed because DRAM has pulled DQ to 1/2 VDD already)*/ 
			REG32(0xb800107c)|=0x80000000;//Eanble RTL8198C ODT
bfc0ab44:	3c02b800 	lui	v0,0xb800
bfc0ab48:	3442107c 	ori	v0,v0,0x107c
bfc0ab4c:	3c03b800 	lui	v1,0xb800
bfc0ab50:	3463107c 	ori	v1,v1,0x107c
bfc0ab54:	8c640000 	lw	a0,0(v1)
bfc0ab58:	3c038000 	lui	v1,0x8000
bfc0ab5c:	00831825 	or	v1,a0,v1
bfc0ab60:	ac430000 	sw	v1,0(v0)

			/*Good for read*/
			REG32(0xb800107c)|=0x40000000;/*Eanble RTL8198C TE*/
bfc0ab64:	3c02b800 	lui	v0,0xb800
bfc0ab68:	3442107c 	ori	v0,v0,0x107c
bfc0ab6c:	3c03b800 	lui	v1,0xb800
bfc0ab70:	3463107c 	ori	v1,v1,0x107c
bfc0ab74:	8c640000 	lw	a0,0(v1)
bfc0ab78:	3c034000 	lui	v1,0x4000
bfc0ab7c:	00831825 	or	v1,a0,v1
bfc0ab80:	ac430000 	sw	v1,0(v0)
			#endif	
				
			_memctl_debug_printf("Test:Write 0xa0400000=0xa5a55a5a\n");
			REG32(0xa0400000)=0xa5a55a5a;
bfc0ab84:	3c02a040 	lui	v0,0xa040
bfc0ab88:	3c03a5a5 	lui	v1,0xa5a5
bfc0ab8c:	34635a5a 	ori	v1,v1,0x5a5a
bfc0ab90:	ac430000 	sw	v1,0(v0)
			_memctl_debug_printf("0xa0400000=0x%x\n",REG32(0xa0400000) );	

			_memctl_debug_printf("Test:Write 0xa0500000=0xa5005a00\n");
			REG32(0xa0500000)=0xa5005a00;
bfc0ab94:	3c02a050 	lui	v0,0xa050
bfc0ab98:	3c03a500 	lui	v1,0xa500
bfc0ab9c:	34635a00 	ori	v1,v1,0x5a00
bfc0aba0:	ac430000 	sw	v1,0(v0)
			_memctl_debug_printf("0xa0500000=0x%x \n",REG32(0xa0500000) );	

			_memctl_debug_printf("Test:Write 0xa0600000=0x98765432\n");
			REG32(0xa0600000)=0x98765432;
bfc0aba4:	3c02a060 	lui	v0,0xa060
bfc0aba8:	3c039876 	lui	v1,0x9876
bfc0abac:	34635432 	ori	v1,v1,0x5432
bfc0abb0:	ac430000 	sw	v1,0(v0)
			_memctl_debug_printf("0xa0600000=0x%x \n",REG32(0xa0600000) );

			_memctl_debug_printf("Test:Write 0xa0700000=0x5a5aa5a5\n");
			REG32(0xa0700000)=0x5a5aa5a5;
bfc0abb4:	3c02a070 	lui	v0,0xa070
bfc0abb8:	3c035a5a 	lui	v1,0x5a5a
bfc0abbc:	3463a5a5 	ori	v1,v1,0xa5a5
bfc0abc0:	ac430000 	sw	v1,0(v0)
			_memctl_debug_printf("0xa0600000=0x%x \n",REG32(0xa0700000) );	

			if((REG32(0xa0400000)==0xa5a55a5a)&&(REG32(0xa0500000)==0xa5005a00)&&(REG32(0xa0600000)==0x98765432))
bfc0abc4:	3c02a040 	lui	v0,0xa040
bfc0abc8:	8c430000 	lw	v1,0(v0)
bfc0abcc:	3c02a5a5 	lui	v0,0xa5a5
bfc0abd0:	34425a5a 	ori	v0,v0,0x5a5a
bfc0abd4:	1462ffa3 	bne	v1,v0,bfc0aa64 <start_c+0x2cc>
bfc0abd8:	00000000 	nop
bfc0abdc:	3c02a050 	lui	v0,0xa050
bfc0abe0:	8c430000 	lw	v1,0(v0)
bfc0abe4:	3c02a500 	lui	v0,0xa500
bfc0abe8:	34425a00 	ori	v0,v0,0x5a00
bfc0abec:	1462ffa0 	bne	v1,v0,bfc0aa70 <start_c+0x2d8>
bfc0abf0:	00000000 	nop
bfc0abf4:	3c02a060 	lui	v0,0xa060
bfc0abf8:	8c430000 	lw	v1,0(v0)
bfc0abfc:	3c029876 	lui	v0,0x9876
bfc0ac00:	34425432 	ori	v0,v0,0x5432
bfc0ac04:	1462ff9d 	bne	v1,v0,bfc0aa7c <start_c+0x2e4>
bfc0ac08:	00000000 	nop
			{
				_memctl_debug_printf("\nDDR3 Init and R/W Pass\n");	
				_memctl_debug_printf("\nDDR3 init flow done\n"); 	
				memctlc_show_reg_info();
bfc0ac0c:	0ff0294b 	jal	bfc0a52c <memctlc_show_reg_info>
bfc0ac10:	00000000 	nop
				break;
bfc0ac14:	00000000 	nop
		
						
		
			

			if(memctlc_is_DDR2()){
bfc0ac18:	0ff00cbd 	jal	bfc032f4 <memctlc_is_DDR2>
bfc0ac1c:	00000000 	nop
bfc0ac20:	10400040 	beqz	v0,bfc0ad24 <start_c+0x58c>
bfc0ac24:	00000000 	nop
			
			_memctl_debug_printf("\nDDR2 init flow\n"); 				
				

			memctlc_8198C_PI_init();
bfc0ac28:	0ff0295a 	jal	bfc0a568 <memctlc_8198C_PI_init>
bfc0ac2c:	00000000 	nop
				 0x21220000 * 128MB *, 
				 0x21320000/ 256MB /, 
				 0x21420000/ 512MB /};
			*/

			_memctl_update_phy_param();
bfc0ac30:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc0ac34:	00000000 	nop
			//REG32(DTR2)=0x0800B000; //set DTR2
			//REG32(0xb8001004)=0x21220000; //set DDR2 128MB 	
			
			//Step3 , DCR
			_memctl_debug_printf("\n3.Set DCR\n"); 
			REG32(DCR)=0x11210000;//32MB
bfc0ac38:	3c02b800 	lui	v0,0xb800
bfc0ac3c:	34421004 	ori	v0,v0,0x1004
bfc0ac40:	3c031121 	lui	v1,0x1121
bfc0ac44:	ac430000 	sw	v1,0(v0)
			
			memctlc_config_DTR();
bfc0ac48:	0ff00c4c 	jal	bfc03130 <memctlc_config_DTR>
bfc0ac4c:	00000000 	nop
			_memctl_update_phy_param();
bfc0ac50:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc0ac54:	00000000 	nop
		
			#endif			
 
 			
			_memctl_debug_printf("Invoke memctlc_ddr2_dll_reset()\n");
			memctlc_ddr2_dll_reset();
bfc0ac58:	0ff01c2d 	jal	bfc070b4 <memctlc_ddr2_dll_reset>
bfc0ac5c:	00000000 	nop
			_memctl_update_phy_param();		
bfc0ac60:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc0ac64:	00000000 	nop

			#if 1
			/*When DDR up to 530MHZ , RTL8198C's read cycle=CL+1*/

			//if(board_DRAM_freq_mhz()>=530)
			if(board_DRAM_freq_mhz()>=510)
bfc0ac68:	0ff0260d 	jal	bfc09834 <board_DRAM_freq_mhz>
bfc0ac6c:	00000000 	nop
bfc0ac70:	2c4201fe 	sltiu	v0,v0,510
bfc0ac74:	1440001b 	bnez	v0,bfc0ace4 <start_c+0x54c>
bfc0ac78:	00000000 	nop
			{
			unsigned int CASminusOne=REG32(0xb8001008)>>28;
bfc0ac7c:	3c02b800 	lui	v0,0xb800
bfc0ac80:	34421008 	ori	v0,v0,0x1008
bfc0ac84:	8c420000 	lw	v0,0(v0)
bfc0ac88:	00021702 	srl	v0,v0,0x1c
bfc0ac8c:	afa20010 	sw	v0,16(sp)
			_memctl_debug_printf("\nDefault DTR0(0x%x)=0x%x\n",DTR0 ,REG32(DTR0) );	
			
			REG32(0xb8001008)&=0x0fffffff;//set CAS=0
bfc0ac90:	3c02b800 	lui	v0,0xb800
bfc0ac94:	34421008 	ori	v0,v0,0x1008
bfc0ac98:	3c03b800 	lui	v1,0xb800
bfc0ac9c:	34631008 	ori	v1,v1,0x1008
bfc0aca0:	8c640000 	lw	a0,0(v1)
bfc0aca4:	3c030fff 	lui	v1,0xfff
bfc0aca8:	3463ffff 	ori	v1,v1,0xffff
bfc0acac:	00831824 	and	v1,a0,v1
bfc0acb0:	ac430000 	sw	v1,0(v0)

			//CASminusOne-=1;
			CASminusOne+=1;
bfc0acb4:	8fa20010 	lw	v0,16(sp)
bfc0acb8:	24420001 	addiu	v0,v0,1
bfc0acbc:	afa20010 	sw	v0,16(sp)

			REG32(0xb8001008)|=CASminusOne<<28;			
bfc0acc0:	3c02b800 	lui	v0,0xb800
bfc0acc4:	34421008 	ori	v0,v0,0x1008
bfc0acc8:	3c03b800 	lui	v1,0xb800
bfc0accc:	34631008 	ori	v1,v1,0x1008
bfc0acd0:	8c640000 	lw	a0,0(v1)
bfc0acd4:	8fa30010 	lw	v1,16(sp)
bfc0acd8:	00031f00 	sll	v1,v1,0x1c
bfc0acdc:	00831825 	or	v1,a0,v1
bfc0ace0:	ac430000 	sw	v1,0(v0)
			//Check DTR 		
			//memctlc_check_DTR_DDR3();			
			//_memctl_update_phy_param();
			#endif
			//chk_dram_cfg(0); //Step5: auto set DTR (check system register's freq setting)
			memctlc_check_DTR();
bfc0ace4:	0ff0165e 	jal	bfc05978 <memctlc_check_DTR>
bfc0ace8:	00000000 	nop
			
			_memctl_update_phy_param();
bfc0acec:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc0acf0:	00000000 	nop
					
		

			#if 1 //K read
			 ShowRxDelayMap(); 
bfc0acf4:	0ff003be 	jal	bfc00ef8 <ShowRxDelayMap>
bfc0acf8:	00000000 	nop
			_memctl_update_phy_param();
bfc0acfc:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc0ad00:	00000000 	nop
			
			 DDR_cali_API7();
bfc0ad04:	0ff021e6 	jal	bfc08798 <DDR_cali_API7>
bfc0ad08:	00000000 	nop
			 _memctl_update_phy_param();
bfc0ad0c:	0ff028ea 	jal	bfc0a3a8 <_memctl_update_phy_param>
bfc0ad10:	00000000 	nop

			 _memctl_debug_printf("DRAM size detect\n");
			memctlc_dram_size_detect(); //Step4: Size detect , set DMCR to activate DRAM parameter
bfc0ad14:	0ff02026 	jal	bfc08098 <memctlc_dram_size_detect>
bfc0ad18:	00000000 	nop
			
			#endif


			_memctl_debug_printf("\nDDR2 init flow done\n"); 
			memctlc_show_reg_info();
bfc0ad1c:	0ff0294b 	jal	bfc0a52c <memctlc_show_reg_info>
bfc0ad20:	00000000 	nop

 
#endif 
 

}
bfc0ad24:	8fbf002c 	lw	ra,44(sp)
bfc0ad28:	27bd0030 	addiu	sp,sp,48
bfc0ad2c:	03e00008 	jr	ra
bfc0ad30:	00000000 	nop
	...
bfc0ad40:	30313233 	andi	s1,at,0x3233
bfc0ad44:	34353637 	ori	s5,at,0x3637
bfc0ad48:	38394142 	xori	t9,at,0x4142
bfc0ad4c:	43444546 	c0	0x1444546
bfc0ad50:	00000000 	nop
bfc0ad54:	bfc02140 	cache	0x0,8512(s8)
bfc0ad58:	bfc01de8 	cache	0x0,7656(s8)
bfc0ad5c:	bfc01e7c 	cache	0x0,7804(s8)
bfc0ad60:	bfc01f0c 	cache	0x0,7948(s8)
bfc0ad64:	bfc020f4 	cache	0x0,8436(s8)
bfc0ad68:	bfc0210c 	cache	0x0,8460(s8)
bfc0ad6c:	09576172 	j	b55d85c8 <dl+0xb55d8484>
bfc0ad70:	6e696e67 	0x6e696e67
bfc0ad74:	3a207772 	xori	zero,s1,0x7772
bfc0ad78:	6f6e6720 	0x6f6e6720
bfc0ad7c:	7443574c 	jalx	b10d5d30 <dl+0xb10d5bec>
bfc0ad80:	20636f6d 	addi	v1,v1,28525
bfc0ad84:	70757461 	0x70757461
bfc0ad88:	74696f6e 	jalx	b1a5bdb8 <dl+0xb1a5bc74>
bfc0ad8c:	0a000000 	j	b8000000 <dl+0xb7fffebc>
bfc0ad90:	0a576172 	j	b95d85c8 <dl+0xb95d8484>
bfc0ad94:	6e696e67 	0x6e696e67
bfc0ad98:	3a205265 	xori	zero,s1,0x5265
bfc0ad9c:	66726573 	0x66726573
bfc0ada0:	68207469 	0x68207469
bfc0ada4:	6d65204f 	0x6d65204f
bfc0ada8:	76657220 	jalx	b995c880 <dl+0xb995c73c>
bfc0adac:	4452414d 	0x4452414d
bfc0adb0:	20537065 	addi	s3,v0,28773
bfc0adb4:	63203738 	0x63203738
bfc0adb8:	30306e73 	andi	s0,at,0x6e73
bfc0adbc:	20212000 	addi	at,at,8192
bfc0adc0:	0a726566 	j	b9c99598 <dl+0xb9c99454>
bfc0adc4:	693d2564 	0x693d2564
bfc0adc8:	20756e69 	addi	s5,v1,28265
bfc0adcc:	74732020 	jalx	b1cc8080 <dl+0xb1cc7f3c>
bfc0add0:	00000000 	nop
bfc0add4:	0a726566 	j	b9c99598 <dl+0xb9c99454>
bfc0add8:	695f756e 	0x695f756e
bfc0addc:	69743d25 	0x69743d25
bfc0ade0:	64204452 	0x64204452
bfc0ade4:	414d5f43 	0x414d5f43
bfc0ade8:	4c4b2020 	madd.s	$f0,$f2,$f4,$f11
bfc0adec:	00000000 	nop
bfc0adf0:	0a726566 	j	b9c99598 <dl+0xb9c99454>
bfc0adf4:	72657368 	0x72657368
bfc0adf8:	20706572 	addi	s0,v1,25970
bfc0adfc:	696f6420 	0x696f6420
bfc0ae00:	73657474 	0x73657474
bfc0ae04:	696e673d 	0x696e673d
bfc0ae08:	2564206e 	addiu	a0,t3,8302
bfc0ae0c:	73202000 	0x73202000
bfc0ae10:	bfc03a98 	cache	0x0,15000(s8)
bfc0ae14:	bfc03ab4 	cache	0x0,15028(s8)
bfc0ae18:	bfc03ad0 	cache	0x0,15056(s8)
bfc0ae1c:	bfc03aec 	cache	0x0,15084(s8)
bfc0ae20:	bfc03b08 	cache	0x0,15112(s8)
bfc0ae24:	bfc03b24 	cache	0x0,15140(s8)
bfc0ae28:	bfc03b40 	cache	0x0,15168(s8)
bfc0ae2c:	bfc03ba0 	cache	0x0,15264(s8)
bfc0ae30:	bfc03bbc 	cache	0x0,15292(s8)
bfc0ae34:	bfc03bd8 	cache	0x0,15320(s8)
bfc0ae38:	bfc03bf4 	cache	0x0,15348(s8)
bfc0ae3c:	bfc03c10 	cache	0x0,15376(s8)
bfc0ae40:	bfc03c2c 	cache	0x0,15404(s8)
bfc0ae44:	bfc03c64 	cache	0x0,15460(s8)
bfc0ae48:	bfc03c48 	cache	0x0,15432(s8)
bfc0ae4c:	bfc03eac 	cache	0x0,16044(s8)
bfc0ae50:	bfc03e20 	cache	0x0,15904(s8)
bfc0ae54:	bfc03e3c 	cache	0x0,15932(s8)
bfc0ae58:	bfc03e58 	cache	0x0,15960(s8)
bfc0ae5c:	bfc03e74 	cache	0x0,15988(s8)
bfc0ae60:	bfc03e90 	cache	0x0,16016(s8)
bfc0ae64:	bfc03f98 	cache	0x0,16280(s8)
bfc0ae68:	bfc03ef0 	cache	0x0,16112(s8)
bfc0ae6c:	bfc03f0c 	cache	0x0,16140(s8)
bfc0ae70:	bfc03f28 	cache	0x0,16168(s8)
bfc0ae74:	bfc03f44 	cache	0x0,16196(s8)
bfc0ae78:	bfc03f60 	cache	0x0,16224(s8)
bfc0ae7c:	bfc03f7c 	cache	0x0,16252(s8)
bfc0ae80:	09445241 	j	b5114904 <dl+0xb51147c0>
bfc0ae84:	4d205369 	msub.d	$f13,$f9,$f10,$f0
bfc0ae88:	7a65203d 	0x7a65203d
bfc0ae8c:	20256420 	addi	a1,at,25632
bfc0ae90:	204d420a 	addi	t5,v0,16906
bfc0ae94:	00000000 	nop
bfc0ae98:	23576172 	addi	s7,k0,24946
bfc0ae9c:	6e6e696e 	0x6e6e696e
bfc0aea0:	673a2043 	0x673a2043
bfc0aea4:	4153206d 	0x4153206d
bfc0aea8:	69676874 	0x69676874
bfc0aeac:	20746f6f 	addi	s4,v1,28527
bfc0aeb0:	20736d61 	addi	s3,v1,28001
bfc0aeb4:	6c6c2066 	0x6c6c2066
bfc0aeb8:	6f722063 	0x6f722063
bfc0aebc:	75727265 	jalx	b5c9c994 <dl+0xb5c9c850>
bfc0aec0:	6e742044 	0x6e742044
bfc0aec4:	52414d20 	beql	s2,at,bfc1e348 <__boot_end+0x9020>
bfc0aec8:	66726571 	0x66726571
bfc0aecc:	2e282564 	sltiu	t0,s1,9572
bfc0aed0:	4d487a29 	msub.d	$f8,$f10,$f15,$f8
bfc0aed4:	0a000000 	j	b8000000 <dl+0xb7fffebc>
bfc0aed8:	23576172 	addi	s7,k0,24946
bfc0aedc:	6e6e696e 	0x6e6e696e
bfc0aee0:	673a204e 	0x673a204e
bfc0aee4:	6f204357 	0x6f204357
bfc0aee8:	4c203e20 	madd.s	$f24,$f1,$f7,$f0
bfc0aeec:	3820666f 	xori	zero,at,0x666f
bfc0aef0:	72204444 	0x72204444
bfc0aef4:	52332053 	beql	s1,s3,bfc13044 <__boot_start+0x7044>
bfc0aef8:	4452414d 	0x4452414d
bfc0aefc:	0a000000 	j	b8000000 <dl+0xb7fffebc>
bfc0af00:	23576172 	addi	s7,k0,24946
bfc0af04:	6e6e696e 	0x6e6e696e
bfc0af08:	673a2043 	0x673a2043
bfc0af0c:	574c206d 	bnel	k0,t4,bfc130c4 <__boot_start+0x70c4>
bfc0af10:	69676874 	0x69676874
bfc0af14:	20746f6f 	addi	s4,v1,28527
bfc0af18:	20736d61 	addi	s3,v1,28001
bfc0af1c:	6c6c2066 	0x6c6c2066
bfc0af20:	6f722063 	0x6f722063
bfc0af24:	75727265 	jalx	b5c9c994 <dl+0xb5c9c850>
bfc0af28:	6e742044 	0x6e742044
bfc0af2c:	52414d20 	beql	s2,at,bfc1e3b0 <__boot_end+0x9088>
bfc0af30:	66726571 	0x66726571
bfc0af34:	2e282564 	sltiu	t0,s1,9572
bfc0af38:	4d487a29 	msub.d	$f8,$f10,$f15,$f8
bfc0af3c:	0a000000 	j	b8000000 <dl+0xb7fffebc>
bfc0af40:	23576172 	addi	s7,k0,24946
bfc0af44:	6e6e696e 	0x6e6e696e
bfc0af48:	673a2044 	0x673a2044
bfc0af4c:	54523128 	bnel	v0,s2,bfc173f0 <__boot_end+0x20c8>
bfc0af50:	72747029 	0x72747029
bfc0af54:	20736574 	addi	s3,v1,25972
bfc0af58:	74696e67 	jalx	b1a5b99c <dl+0xb1a5b858>
bfc0af5c:	206d6179 	addi	t5,v1,24953
bfc0af60:	2076696c 	addi	s6,v1,26988
bfc0af64:	6f6c6174 	0x6f6c6174
bfc0af68:	65732074 	0x65732074
bfc0af6c:	68652072 	0x68652072
bfc0af70:	65717569 	0x65717569
bfc0af74:	72656d65 	0x72656d65
bfc0af78:	6e742028 	0x6e742028
bfc0af7c:	25646e73 	addiu	a0,t3,28275
bfc0af80:	292e204d 	slti	t6,t1,8269
bfc0af84:	61782e20 	0x61782e20
bfc0af88:	25644d48 	addiu	a0,t3,19784
bfc0af8c:	7a20666f 	0x7a20666f
bfc0af90:	72206375 	0x72206375
bfc0af94:	7272656e 	0x7272656e
bfc0af98:	74207365 	jalx	b081cd94 <dl+0xb081cc50>
bfc0af9c:	7474696e 	jalx	b1d1a5b8 <dl+0xb1d1a474>
bfc0afa0:	670a0000 	0x670a0000
bfc0afa4:	23576172 	addi	s7,k0,24946
bfc0afa8:	6e6e696e 	0x6e6e696e
bfc0afac:	673a2044 	0x673a2044
bfc0afb0:	54523128 	bnel	v0,s2,bfc17454 <__boot_end+0x212c>
bfc0afb4:	72747029 	0x72747029
bfc0afb8:	20736574 	addi	s3,v1,25972
bfc0afbc:	74696e67 	jalx	b1a5b99c <dl+0xb1a5b858>
bfc0afc0:	20282564 	addi	t0,at,9572
bfc0afc4:	20636c6b 	addi	v1,v1,27755
bfc0afc8:	7329206d 	0x7329206d
bfc0afcc:	61792076 	0x61792076
bfc0afd0:	696c6f6c 	0x696c6f6c
bfc0afd4:	61746573 	0x61746573
bfc0afd8:	20746865 	addi	s4,v1,26725
bfc0afdc:	206d696e 	addi	t5,v1,26990
bfc0afe0:	2e207265 	sltiu	zero,s1,29285
bfc0afe4:	71756972 	0x71756972
bfc0afe8:	656d656e 	0x656d656e
bfc0afec:	74283420 	jalx	b0a0d080 <dl+0xb0a0cf3c>
bfc0aff0:	636c6b73 	0x636c6b73
bfc0aff4:	2920666f 	slti	zero,t1,26223
bfc0aff8:	72206375 	0x72206375
bfc0affc:	7272656e 	0x7272656e
bfc0b000:	74207365 	jalx	b081cd94 <dl+0xb081cc50>
bfc0b004:	7474696e 	jalx	b1d1a5b8 <dl+0xb1d1a474>
bfc0b008:	670a0000 	0x670a0000
bfc0b00c:	23576172 	addi	s7,k0,24946
bfc0b010:	6e6e696e 	0x6e6e696e
bfc0b014:	673a2044 	0x673a2044
bfc0b018:	54523128 	bnel	v0,s2,bfc174bc <__boot_end+0x2194>
bfc0b01c:	77747229 	jalx	bdd1c8a4 <dl+0xbdd1c760>
bfc0b020:	20736574 	addi	s3,v1,25972
bfc0b024:	74696e67 	jalx	b1a5b99c <dl+0xb1a5b858>
bfc0b028:	206d6179 	addi	t5,v1,24953
bfc0b02c:	2076696c 	addi	s6,v1,26988
bfc0b030:	6f6c6174 	0x6f6c6174
bfc0b034:	65732074 	0x65732074
bfc0b038:	68652072 	0x68652072
bfc0b03c:	65717569 	0x65717569
bfc0b040:	72656d65 	0x72656d65
bfc0b044:	6e742028 	0x6e742028
bfc0b048:	25646e73 	addiu	a0,t3,28275
bfc0b04c:	292e204d 	slti	t6,t1,8269
bfc0b050:	61782e20 	0x61782e20
bfc0b054:	25644d48 	addiu	a0,t3,19784
bfc0b058:	7a20666f 	0x7a20666f
bfc0b05c:	72206375 	0x72206375
bfc0b060:	7272656e 	0x7272656e
bfc0b064:	74207365 	jalx	b081cd94 <dl+0xb081cc50>
bfc0b068:	7474696e 	jalx	b1d1a5b8 <dl+0xb1d1a474>
bfc0b06c:	670a0000 	0x670a0000
bfc0b070:	23576172 	addi	s7,k0,24946
bfc0b074:	6e6e696e 	0x6e6e696e
bfc0b078:	673a2044 	0x673a2044
bfc0b07c:	54523128 	bnel	v0,s2,bfc17520 <__boot_end+0x21f8>
bfc0b080:	77747229 	jalx	bdd1c8a4 <dl+0xbdd1c760>
bfc0b084:	20736574 	addi	s3,v1,25972
bfc0b088:	74696e67 	jalx	b1a5b99c <dl+0xb1a5b858>
bfc0b08c:	20282564 	addi	t0,at,9572
bfc0b090:	20636c6b 	addi	v1,v1,27755
bfc0b094:	7329206d 	0x7329206d
bfc0b098:	61792076 	0x61792076
bfc0b09c:	696c6f6c 	0x696c6f6c
bfc0b0a0:	61746573 	0x61746573
bfc0b0a4:	20746865 	addi	s4,v1,26725
bfc0b0a8:	206d696e 	addi	t5,v1,26990
bfc0b0ac:	2e207265 	sltiu	zero,s1,29285
bfc0b0b0:	71756972 	0x71756972
bfc0b0b4:	656d656e 	0x656d656e
bfc0b0b8:	74283420 	jalx	b0a0d080 <dl+0xb0a0cf3c>
bfc0b0bc:	636c6b73 	0x636c6b73
bfc0b0c0:	2920666f 	slti	zero,t1,26223
bfc0b0c4:	72206375 	0x72206375
bfc0b0c8:	7272656e 	0x7272656e
bfc0b0cc:	74207365 	jalx	b081cd94 <dl+0xb081cc50>
bfc0b0d0:	7474696e 	jalx	b1d1a5b8 <dl+0xb1d1a474>
bfc0b0d4:	670a0000 	0x670a0000
bfc0b0d8:	0a092357 	j	b8248d5c <dl+0xb8248c18>
bfc0b0dc:	61726e6e 	0x61726e6e
bfc0b0e0:	696e673a 	0x696e673a
bfc0b0e4:	20445452 	addi	a0,v0,21586
bfc0b0e8:	20736574 	addi	s3,v1,25972
bfc0b0ec:	74696e67 	jalx	b1a5b99c <dl+0xb1a5b858>
bfc0b0f0:	206d6179 	addi	t5,v1,24953
bfc0b0f4:	2076696c 	addi	s6,v1,26988
bfc0b0f8:	6f6c6174 	0x6f6c6174
bfc0b0fc:	65207468 	0x65207468
bfc0b100:	65207265 	0x65207265
bfc0b104:	71756972 	0x71756972
bfc0b108:	656d656e 	0x656d656e
bfc0b10c:	74206f66 	jalx	b081bd98 <dl+0xb081bc54>
bfc0b110:	20445241 	addi	a0,v0,21057
bfc0b114:	4d207265 	0x4d207265
bfc0b118:	66726573 	0x66726573
bfc0b11c:	6820696e 	0x6820696e
bfc0b120:	2025646d 	addi	a1,at,25709
bfc0b124:	732e0a00 	0x732e0a00
bfc0b128:	23576172 	addi	s7,k0,24946
bfc0b12c:	6e6e696e 	0x6e6e696e
bfc0b130:	673a2044 	0x673a2044
bfc0b134:	54523128 	bnel	v0,s2,bfc175d8 <__boot_end+0x22b0>
bfc0b138:	72702920 	0x72702920
bfc0b13c:	73657474 	0x73657474
bfc0b140:	696e6720 	0x696e6720
bfc0b144:	6d617920 	0x6d617920
bfc0b148:	76696c6f 	jalx	b9a5b1bc <dl+0xb9a5b078>
bfc0b14c:	6c617465 	0x6c617465
bfc0b150:	73207468 	0x73207468
bfc0b154:	65207265 	0x65207265
bfc0b158:	71756972 	0x71756972
bfc0b15c:	656d656e 	0x656d656e
bfc0b160:	74202825 	jalx	b080a094 <dl+0xb0809f50>
bfc0b164:	646e7329 	0x646e7329
bfc0b168:	2e204d61 	sltiu	zero,s1,19809
bfc0b16c:	782e2025 	0x782e2025
bfc0b170:	644d487a 	0x644d487a
bfc0b174:	20666f72 	addi	a2,v1,28530
bfc0b178:	20637572 	addi	v1,v1,30066
bfc0b17c:	72656e74 	0x72656e74
bfc0b180:	20736574 	addi	s3,v1,25972
bfc0b184:	74696e67 	jalx	b1a5b99c <dl+0xb1a5b858>
bfc0b188:	0a000000 	j	b8000000 <dl+0xb7fffebc>
bfc0b18c:	23576172 	addi	s7,k0,24946
bfc0b190:	6e6e696e 	0x6e6e696e
bfc0b194:	673a2044 	0x673a2044
bfc0b198:	54522872 	bnel	v0,s2,bfc15364 <__boot_end+0x3c>
bfc0b19c:	63642920 	0x63642920
bfc0b1a0:	73657474 	0x73657474
bfc0b1a4:	696e6720 	0x696e6720
bfc0b1a8:	6d617920 	0x6d617920
bfc0b1ac:	76696c6f 	jalx	b9a5b1bc <dl+0xb9a5b078>
bfc0b1b0:	6c617465 	0x6c617465
bfc0b1b4:	73207468 	0x73207468
bfc0b1b8:	65207265 	0x65207265
bfc0b1bc:	71756972 	0x71756972
bfc0b1c0:	656d656e 	0x656d656e
bfc0b1c4:	74202825 	jalx	b080a094 <dl+0xb0809f50>
bfc0b1c8:	646e7329 	0x646e7329
bfc0b1cc:	2e204d61 	sltiu	zero,s1,19809
bfc0b1d0:	782e2025 	0x782e2025
bfc0b1d4:	644d487a 	0x644d487a
bfc0b1d8:	20666f72 	addi	a2,v1,28530
bfc0b1dc:	20637572 	addi	v1,v1,30066
bfc0b1e0:	72656e74 	0x72656e74
bfc0b1e4:	20736574 	addi	s3,v1,25972
bfc0b1e8:	74696e67 	jalx	b1a5b99c <dl+0xb1a5b858>
bfc0b1ec:	0a000000 	j	b8000000 <dl+0xb7fffebc>
bfc0b1f0:	23576172 	addi	s7,k0,24946
bfc0b1f4:	6e6e696e 	0x6e6e696e
bfc0b1f8:	673a2044 	0x673a2044
bfc0b1fc:	54522872 	bnel	v0,s2,bfc153c8 <__boot_end+0xa0>
bfc0b200:	72642920 	0x72642920
bfc0b204:	73657474 	0x73657474
bfc0b208:	696e6720 	0x696e6720
bfc0b20c:	6d617920 	0x6d617920
bfc0b210:	76696c6f 	jalx	b9a5b1bc <dl+0xb9a5b078>
bfc0b214:	6c617465 	0x6c617465
bfc0b218:	73207468 	0x73207468
bfc0b21c:	65207265 	0x65207265
bfc0b220:	71756972 	0x71756972
bfc0b224:	656d656e 	0x656d656e
bfc0b228:	74202825 	jalx	b080a094 <dl+0xb0809f50>
bfc0b22c:	646e7329 	0x646e7329
bfc0b230:	2e204d61 	sltiu	zero,s1,19809
bfc0b234:	782e2025 	0x782e2025
bfc0b238:	644d487a 	0x644d487a
bfc0b23c:	20666f72 	addi	a2,v1,28530
bfc0b240:	20637572 	addi	v1,v1,30066
bfc0b244:	72656e74 	0x72656e74
bfc0b248:	20736574 	addi	s3,v1,25972
bfc0b24c:	74696e67 	jalx	b1a5b99c <dl+0xb1a5b858>
bfc0b250:	0a000000 	j	b8000000 <dl+0xb7fffebc>
bfc0b254:	23576172 	addi	s7,k0,24946
bfc0b258:	6e6e696e 	0x6e6e696e
bfc0b25c:	673a2044 	0x673a2044
bfc0b260:	54523128 	bnel	v0,s2,bfc17704 <__boot_end+0x23dc>
bfc0b264:	72726429 	0x72726429
bfc0b268:	20736574 	addi	s3,v1,25972
bfc0b26c:	74696e67 	jalx	b1a5b99c <dl+0xb1a5b858>
bfc0b270:	20282564 	addi	t0,at,9572
bfc0b274:	20636c6b 	addi	v1,v1,27755
bfc0b278:	7329206d 	0x7329206d
bfc0b27c:	61792076 	0x61792076
bfc0b280:	696c6f6c 	0x696c6f6c
bfc0b284:	61746573 	0x61746573
bfc0b288:	20746865 	addi	s4,v1,26725
bfc0b28c:	206d696e 	addi	t5,v1,26990
bfc0b290:	2e207265 	sltiu	zero,s1,29285
bfc0b294:	71756972 	0x71756972
bfc0b298:	656d656e 	0x656d656e
bfc0b29c:	74283420 	jalx	b0a0d080 <dl+0xb0a0cf3c>
bfc0b2a0:	636c6b73 	0x636c6b73
bfc0b2a4:	2920666f 	slti	zero,t1,26223
bfc0b2a8:	72206375 	0x72206375
bfc0b2ac:	7272656e 	0x7272656e
bfc0b2b0:	74207365 	jalx	b081cd94 <dl+0xb081cc50>
bfc0b2b4:	7474696e 	jalx	b1d1a5b8 <dl+0xb1d1a474>
bfc0b2b8:	670a0000 	0x670a0000
bfc0b2bc:	23576172 	addi	s7,k0,24946
bfc0b2c0:	6e6e696e 	0x6e6e696e
bfc0b2c4:	673a2044 	0x673a2044
bfc0b2c8:	54522866 	bnel	v0,s2,bfc15464 <__boot_end+0x13c>
bfc0b2cc:	61776729 	0x61776729
bfc0b2d0:	20736574 	addi	s3,v1,25972
bfc0b2d4:	74696e67 	jalx	b1a5b99c <dl+0xb1a5b858>
bfc0b2d8:	206d6179 	addi	t5,v1,24953
bfc0b2dc:	2076696c 	addi	s6,v1,26988
bfc0b2e0:	6f6c6174 	0x6f6c6174
bfc0b2e4:	65732074 	0x65732074
bfc0b2e8:	68652072 	0x68652072
bfc0b2ec:	65717569 	0x65717569
bfc0b2f0:	72656d65 	0x72656d65
bfc0b2f4:	6e742028 	0x6e742028
bfc0b2f8:	25646e73 	addiu	a0,t3,28275
bfc0b2fc:	292e204d 	slti	t6,t1,8269
bfc0b300:	61782e20 	0x61782e20
bfc0b304:	25644d48 	addiu	a0,t3,19784
bfc0b308:	7a20666f 	0x7a20666f
bfc0b30c:	72206375 	0x72206375
bfc0b310:	7272656e 	0x7272656e
bfc0b314:	74207365 	jalx	b081cd94 <dl+0xb081cc50>
bfc0b318:	7474696e 	jalx	b1d1a5b8 <dl+0xb1d1a474>
bfc0b31c:	670a0000 	0x670a0000
bfc0b320:	23576172 	addi	s7,k0,24946
bfc0b324:	6e6e696e 	0x6e6e696e
bfc0b328:	673a2044 	0x673a2044
bfc0b32c:	54522872 	bnel	v0,s2,bfc154f8 <__boot_end+0x1d0>
bfc0b330:	66632920 	0x66632920
bfc0b334:	73657474 	0x73657474
bfc0b338:	696e6720 	0x696e6720
bfc0b33c:	6d617920 	0x6d617920
bfc0b340:	76696c6f 	jalx	b9a5b1bc <dl+0xb9a5b078>
bfc0b344:	6c617465 	0x6c617465
bfc0b348:	73207468 	0x73207468
bfc0b34c:	65207265 	0x65207265
bfc0b350:	71756972 	0x71756972
bfc0b354:	656d656e 	0x656d656e
bfc0b358:	74202825 	jalx	b080a094 <dl+0xb0809f50>
bfc0b35c:	646e7329 	0x646e7329
bfc0b360:	2e204d61 	sltiu	zero,s1,19809
bfc0b364:	782e2025 	0x782e2025
bfc0b368:	644d487a 	0x644d487a
bfc0b36c:	20666f72 	addi	a2,v1,28530
bfc0b370:	20637572 	addi	v1,v1,30066
bfc0b374:	72656e74 	0x72656e74
bfc0b378:	20736574 	addi	s3,v1,25972
bfc0b37c:	74696e67 	jalx	b1a5b99c <dl+0xb1a5b858>
bfc0b380:	0a000000 	j	b8000000 <dl+0xb7fffebc>
bfc0b384:	23576172 	addi	s7,k0,24946
bfc0b388:	6e6e696e 	0x6e6e696e
bfc0b38c:	673a2044 	0x673a2044
bfc0b390:	54522872 	bnel	v0,s2,bfc1555c <__boot_end+0x234>
bfc0b394:	61732920 	0x61732920
bfc0b398:	73657474 	0x73657474
bfc0b39c:	696e6720 	0x696e6720
bfc0b3a0:	6d617920 	0x6d617920
bfc0b3a4:	76696c6f 	jalx	b9a5b1bc <dl+0xb9a5b078>
bfc0b3a8:	6c617465 	0x6c617465
bfc0b3ac:	73207468 	0x73207468
bfc0b3b0:	65207265 	0x65207265
bfc0b3b4:	71756972 	0x71756972
bfc0b3b8:	656d656e 	0x656d656e
bfc0b3bc:	74202825 	jalx	b080a094 <dl+0xb0809f50>
bfc0b3c0:	646e7329 	0x646e7329
bfc0b3c4:	2e204d61 	sltiu	zero,s1,19809
bfc0b3c8:	782e2025 	0x782e2025
bfc0b3cc:	644d487a 	0x644d487a
bfc0b3d0:	20666f72 	addi	a2,v1,28530
bfc0b3d4:	20637572 	addi	v1,v1,30066
bfc0b3d8:	72656e74 	0x72656e74
bfc0b3dc:	20736574 	addi	s3,v1,25972
bfc0b3e0:	74696e67 	jalx	b1a5b99c <dl+0xb1a5b858>
bfc0b3e4:	0a000000 	j	b8000000 <dl+0xb7fffebc>
bfc0b3e8:	23576172 	addi	s7,k0,24946
bfc0b3ec:	6e6e696e 	0x6e6e696e
bfc0b3f0:	673a204e 	0x673a204e
bfc0b3f4:	6f204341 	0x6f204341
bfc0b3f8:	53203e20 	beqzl	t9,bfc1ac7c <__boot_end+0x5954>
bfc0b3fc:	3720666f 	ori	zero,t9,0x666f
bfc0b400:	72204444 	0x72204444
bfc0b404:	52322053 	beql	s1,s2,bfc13554 <__boot_start+0x7554>
bfc0b408:	4452414d 	0x4452414d
bfc0b40c:	0a000000 	j	b8000000 <dl+0xb7fffebc>
bfc0b410:	23576172 	addi	s7,k0,24946
bfc0b414:	6e6e696e 	0x6e6e696e
bfc0b418:	673a2044 	0x673a2044
bfc0b41c:	54523028 	bnel	v0,s2,bfc174c0 <__boot_end+0x2198>
bfc0b420:	63776c29 	0x63776c29
bfc0b424:	20213d20 	addi	at,at,15648
bfc0b428:	6361732d 	0x6361732d
bfc0b42c:	31204452 	andi	zero,t1,0x4452
bfc0b430:	414d2063 	0x414d2063
bfc0b434:	6c6f636b 	0x6c6f636b
bfc0b438:	0a000000 	j	b8000000 <dl+0xb7fffebc>
bfc0b43c:	0a092357 	j	b8248d5c <dl+0xb8248c18>
bfc0b440:	61726e6e 	0x61726e6e
bfc0b444:	696e673a 	0x696e673a
bfc0b448:	20445452 	addi	a0,v0,21586
bfc0b44c:	20736574 	addi	s3,v1,25972
bfc0b450:	74696e67 	jalx	b1a5b99c <dl+0xb1a5b858>
bfc0b454:	206d6179 	addi	t5,v1,24953
bfc0b458:	2076696c 	addi	s6,v1,26988
bfc0b45c:	6f6c6174 	0x6f6c6174
bfc0b460:	65207468 	0x65207468
bfc0b464:	65207265 	0x65207265
bfc0b468:	71756972 	0x71756972
bfc0b46c:	656d656e 	0x656d656e
bfc0b470:	74206f66 	jalx	b081bd98 <dl+0xb081bc54>
bfc0b474:	20445241 	addi	a0,v0,21057
bfc0b478:	4d207265 	0x4d207265
bfc0b47c:	66726573 	0x66726573
bfc0b480:	6820696e 	0x6820696e
bfc0b484:	2025646e 	addi	a1,at,25710
bfc0b488:	732e0a00 	0x732e0a00
bfc0b48c:	0a445241 	j	b9114904 <dl+0xb91147c0>
bfc0b490:	4d205479 	nmsub.d	$f17,$f9,$f10,$f0
bfc0b494:	70653a20 	0x70653a20
bfc0b498:	44445232 	0x44445232
bfc0b49c:	0a000000 	j	b8000000 <dl+0xb7fffebc>
bfc0b4a0:	0a445241 	j	b9114904 <dl+0xb91147c0>
bfc0b4a4:	4d205479 	nmsub.d	$f17,$f9,$f10,$f0
bfc0b4a8:	70653a20 	0x70653a20
bfc0b4ac:	44445233 	0x44445233
bfc0b4b0:	0a000000 	j	b8000000 <dl+0xb7fffebc>
bfc0b4b4:	0a526573 	j	b94995cc <dl+0xb9499488>
bfc0b4b8:	6375653a 	0x6375653a
bfc0b4bc:	20000000 	addi	zero,zero,0
bfc0b4c0:	626f6f74 	0x626f6f74
bfc0b4c4:	696e670a 	0x696e670a
bfc0b4c8:	00000000 	nop
bfc0b4cc:	0a444452 	j	b9111148 <dl+0xb9111004>
bfc0b4d0:	322f3320 	andi	t7,s1,0x3320
bfc0b4d4:	696e6974 	0x696e6974
bfc0b4d8:	20666c6f 	addi	a2,v1,27759
bfc0b4dc:	77203235 	jalx	bc80c8d4 <dl+0xbc80c790>
bfc0b4e0:	304d485a 	andi	t5,v0,0x485a
bfc0b4e4:	0a000000 	j	b8000000 <dl+0xb7fffebc>
bfc0b4e8:	53504930 	beql	k0,s0,bfc1d9ac <__boot_end+0x8684>
bfc0b4ec:	00000000 	nop
bfc0b4f0:	53504931 	beql	k0,s0,bfc1d9b8 <__boot_end+0x8690>
bfc0b4f4:	00000000 	nop
bfc0b4f8:	4e464249 	c3	0x464249
bfc0b4fc:	00000000 	nop
bfc0b500:	4e414e44 	c3	0x414e44
bfc0b504:	00000000 	nop
bfc0b508:	524f4d30 	beql	s2,t7,bfc1e9cc <__boot_end+0x96a4>
bfc0b50c:	31000000 	andi	zero,t0,0x0
bfc0b510:	524f4d30 	beql	s2,t7,bfc1e9d4 <__boot_end+0x96ac>
bfc0b514:	32000000 	andi	zero,s0,0x0
bfc0b518:	524f4d30 	beql	s2,t7,bfc1e9dc <__boot_end+0x96b4>
bfc0b51c:	33000000 	andi	zero,t8,0x0
bfc0b520:	456e4175 	0x456e4175
bfc0b524:	746f4f4c 	jalx	b1bd3d30 <dl+0xb1bd3bec>
bfc0b528:	54746573 	bnel	v1,s4,bfc24af8 <__boot_end+0xf7d0>
bfc0b52c:	74000000 	jalx	b0000000 <dl+0xaffffebc>
bfc0b530:	44445232 	0x44445232
bfc0b534:	00000000 	nop
bfc0b538:	44445233 	0x44445233
bfc0b53c:	00000000 	nop

bfc0b540 <m2x_clksel_table>:
bfc0b540:	000000fa 0000010e 00000122 00000136     ..........."...6
bfc0b550:	0000014a 0000015e 00000172 00000235     ...J...^...r...5
bfc0b560:	0000019a 000001ae 000001c2 000001d6     ................
bfc0b570:	000001ea 000001fe 00000212 00000226     ...............&
bfc0b580:	00000186 00000244 00000253 00000262     .......D...S...b
bfc0b590:	00000271 00000280 0000028f 0000029e     ...q............
bfc0b5a0:	000002ad 000002bc 000002d0 000002e4     ................
bfc0b5b0:	000002f3 00000302 00000311 00000320     ............... 
bfc0b5c0:	09445241 4d206672 65717565 6e63793a     .DRAM frequency:
bfc0b5d0:	2025644d 487a0a00 00000000 00000000      %dMHz..........
